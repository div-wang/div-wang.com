<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android免root修改定位</title>
      <link href="/2022/11/android-modify-positioning/"/>
      <url>/2022/11/android-modify-positioning/</url>
      
        <content type="html"><![CDATA[<h1 id="Android免root修改定位"><a href="#Android免root修改定位" class="headerlink" title="Android免root修改定位"></a>Android免root修改定位</h1><blockquote><p>Android的虚拟定位大部分都是需要root权限的，我们经过长期探索，终于找到一款不需要root即可开启虚拟定位的软件Fake Location</p></blockquote><h2 id="安装-Fake-Location"><a href="#安装-Fake-Location" class="headerlink" title="安装 Fake Location"></a>安装 Fake Location</h2><p><img src="http://fakeloc.cc/upload/5e9d4bf314134800299a7de9/icon/com.lerist.fakelocation_1.2.0.6_561_a.png" alt="Fake Location"><br><a href="http://fakeloc.cc/app">官方网站下载</a><br><a href="https://github.com/Lerist/FakeLocation/releases">Github 下载</a></p><h2 id="Fake-Location设置"><a href="#Fake-Location设置" class="headerlink" title="Fake Location设置"></a>Fake Location设置</h2><ul><li>打开手机设置功能，找到“我的手机”或者“我的设备”</li><li>找到“版本号”或者“XX系统版本”，然后快速点击三次，提示打开开发者模式就可以了</li><li>退回设置功能，在“系统”或者“更多设置”中找到“开发者选项”（或者直接在设置中搜索“开发者选项”）<br><img src="/static/img/android-modify-positioning/001.png" alt="图片地址"></li><li>下滑找到“选择模拟位置信息应用”选择Fake Location<br><img src="/static/img/android-modify-positioning/002.png" alt="图片地址"></li><li>打开Fake Location的位置模拟旁的加号添加位置，手动选择未知，拉动找到相近的位置，并点击右下角的对勾<br><img src="/static/img/android-modify-positioning/003.png" alt="图片地址"></li><li>启动模拟成功</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="程序后台运行一段时间后自动关闭、跳回真实位置、摇杆退出或摇杆罗盘不随手机方向旋转"><a href="#程序后台运行一段时间后自动关闭、跳回真实位置、摇杆退出或摇杆罗盘不随手机方向旋转" class="headerlink" title="程序后台运行一段时间后自动关闭、跳回真实位置、摇杆退出或摇杆罗盘不随手机方向旋转"></a>程序后台运行一段时间后自动关闭、跳回真实位置、摇杆退出或摇杆罗盘不随手机方向旋转</h3><p>这种情况通常是程序被系统或其它某些应用清理掉了，请尝试允许FL后台运行，以及关闭省电优化之类的设置：</p><ul><li>华为手机允许程序后台运行： <a href="https://zhidao.baidu.com/question/521051452342852205.html">https://zhidao.baidu.com/question/521051452342852205.html</a></li><li>华为手机忽略电池优化： <a href="https://zhidao.baidu.com/question/652261302590163205.html">https://zhidao.baidu.com/question/652261302590163205.html</a></li><li>Oppo 手机允许程序后台运行： <a href="https://zhidao.baidu.com/question/1545944666186333827.html">https://zhidao.baidu.com/question/1545944666186333827.html</a></li><li>Vivo 手机允许程序后台运行： <a href="https://jingyan.baidu.com/article/046a7b3e9462f2f9c27fa9e9.html">https://jingyan.baidu.com/article/046a7b3e9462f2f9c27fa9e9.html</a></li><li>小米手机：进入应用详情页，打开“自启动”开关，并把“省电策略”设为无限制<img src="https://raw.githubusercontent.com/Lerist/fakelocation.github.io/master/FAQ/zh/img/Screenshot_2019-04-27-08-17-37-981_com.miui.secur.png" width="300px">其他手机请自行百度允许程序后台运行的方法</li></ul><h3 id="手机没有ROOT权限，使用ROOT模式下的功能（不保证所有机型都适用）"><a href="#手机没有ROOT权限，使用ROOT模式下的功能（不保证所有机型都适用）" class="headerlink" title="手机没有ROOT权限，使用ROOT模式下的功能（不保证所有机型都适用）"></a>手机没有ROOT权限，使用ROOT模式下的功能（不保证所有机型都适用）</h3><p>手机没有ROOT权限的话，可以尝试在虚拟大师里使用ROOT模式，虚拟大师：<a href="https://www.coolapk.com/apk/com.vmos.app">https://www.coolapk.com/apk/com.vmos.app</a> ，安装虚拟大师后，把 Fake Location 和需要使用Fake Location功能的应用一并安装进虚拟大师，就可以使用ROOT模式下的功能了。(提示：有些APP可能不支持在虚拟大师里运行，还请自行测试)。</p><h3 id="NOROOT模式下开启位置模拟后，部分APP依然显示真实位置"><a href="#NOROOT模式下开启位置模拟后，部分APP依然显示真实位置" class="headerlink" title="NOROOT模式下开启位置模拟后，部分APP依然显示真实位置"></a>NOROOT模式下开启位置模拟后，部分APP依然显示真实位置</h3><p>有些APP需要在ROOT模式下才有效，NOROOT模式测试无效就只能使用ROOT模式；手机没有ROOT的话可以参考下面第 10 条。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 虚拟定位 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟定位 </tag>
            
            <tag> 钉钉打卡 </tag>
            
            <tag> 企业微信打卡 </tag>
            
            <tag> 飞书打卡 </tag>
            
            <tag> Android虚拟定位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios修改定位想去哪里去哪里～</title>
      <link href="/2022/11/ios-modify-positioning/"/>
      <url>/2022/11/ios-modify-positioning/</url>
      
        <content type="html"><![CDATA[<h1 id="ios修改定位想去哪里去哪里～"><a href="#ios修改定位想去哪里去哪里～" class="headerlink" title="ios修改定位想去哪里去哪里～"></a>ios修改定位想去哪里去哪里～</h1><blockquote><p>iPhone最简单模拟定位方法，随时随地打卡，支持最新ios16</p></blockquote><h2 id="下载爱思助手"><a href="#下载爱思助手" class="headerlink" title="下载爱思助手"></a>下载爱思助手</h2><p>需要有一台电脑，windows和macos都可以<br>下载地址 <a href="https://www.i4.cn/">https://www.i4.cn/</a></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="下载好以后通过数据线连接手机"><a href="#下载好以后通过数据线连接手机" class="headerlink" title="下载好以后通过数据线连接手机"></a>下载好以后通过数据线连接手机</h3><h3 id="点击上方的工具箱"><a href="#点击上方的工具箱" class="headerlink" title="点击上方的工具箱"></a>点击上方的工具箱</h3><p><img src="/static/img/ios-modify-positioning/001.png" alt="图片地址"></p><h3 id="在工具箱里面找到虚拟定位"><a href="#在工具箱里面找到虚拟定位" class="headerlink" title="在工具箱里面找到虚拟定位"></a>在工具箱里面找到虚拟定位</h3><p>如果是window好好找一找虚拟定位<br><img src="/static/img/ios-modify-positioning/002.png" alt="图片地址"></p><h3 id="搜索定位位置并修改"><a href="#搜索定位位置并修改" class="headerlink" title="搜索定位位置并修改"></a>搜索定位位置并修改</h3><ul><li>可以输入地址搜索定位</li><li>可以拖动地图定位地址</li><li>点击【修改虚拟定位】即可完成<br><img src="/static/img/ios-modify-positioning/003.png" alt="图片地址"></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、修改位置失效时间差不多在1天左右<br>2、修改位置会导致你的手机一直处于那个位置，比如你在别的地方打车定位还是在公司<br>3、修改位置怎么恢复 重启手机或者打开爱思助手还原真实位置</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 虚拟定位 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟定位 </tag>
            
            <tag> 钉钉打卡 </tag>
            
            <tag> 企业微信打卡 </tag>
            
            <tag> 飞书打卡 </tag>
            
            <tag> iphone虚拟定位 </tag>
            
            <tag> ios虚拟定位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iTerm2代替mac默认终端</title>
      <link href="/2022/10/use-iterm2/"/>
      <url>/2022/10/use-iterm2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用iTerm2代替mac默认终端"><a href="#使用iTerm2代替mac默认终端" class="headerlink" title="使用iTerm2代替mac默认终端"></a>使用iTerm2代替mac默认终端</h1><blockquote><p>iTerm2你还只是用来替代默认终端吗？落伍了靓仔，跟着我，带你解锁更多iTerm2实用姿势。</p></blockquote><h2 id="安装iTerm2"><a href="#安装iTerm2" class="headerlink" title="安装iTerm2"></a>安装iTerm2</h2><p>默认从<a href="http://www.iterm2.com/">iterm2 官网</a>下载</p><h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><ul><li>Mac默认自带zsh，所以可以直接安装oh-my-zsh</li><li>Ubuntu Linux下，使用<code>apt-get</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure></li><li>Ubuntu Linux下，使用<code>apt-get</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install zsh -y</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><p>zsh 的默认配置及其复杂繁琐，oh-my-zsh是zsh的配置插件，安装oh-my-zsh是为了减少zsh配置带来的烦恼。</p><p>官方github: <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a></p><p>我这里是用curl的方式安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</span><br></pre></td></tr></table></figure><h3 id="zsh更换主题"><a href="#zsh更换主题" class="headerlink" title="zsh更换主题"></a>zsh更换主题</h3><p>换个漂亮的主题<br><img src="https://gist.githubusercontent.com/fcamblor/f8e824caa28f8bea5572/raw/8c96ec7d669edac8ae1e1935fe389ee7b3bf543c/screenshot.png" alt="agnoster-fcamblor.zsh-theme"><br>修改文件~/.zshrc中的<code>ZSH_THEME</code>一行，改成这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure><p>重新打开一个窗口就行了</p><p>如果没有箭头，只有方框+问号的话，还需要安装powerline</p><p>这是一个字体增强的软件，就是往字体库里面新加了一个字体</p><p>在github可以直接下载然后执行install.sh来安装👉<a href="https://github.com/powerline/fonts">Powerline-patched font</a></p><p>一步一步的安装方法参见👉<a href="https://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation">powerline的文档</a></p><p>然后在你的终端gui设置里面，把字体改成后缀为powerline的字体就行了</p><h3 id="zsh使用系统默认配置-bash-profile"><a href="#zsh使用系统默认配置-bash-profile" class="headerlink" title="zsh使用系统默认配置.bash_profile"></a>zsh使用系统默认配置.bash_profile</h3><p>默认使用zsh后，bash配置是失效的<br>需要在<code>.zshrc</code>中导入<code>.bash_profile</code>配置:</p><ul><li>执行<code>vi ~/.zshrc</code>,</li><li>将 <code>source .bash_profile</code> 粘贴到最下面，保存即可。</li></ul><h2 id="go2shell默认打开iTerm2"><a href="#go2shell默认打开iTerm2" class="headerlink" title="go2shell默认打开iTerm2"></a>go2shell默认打开iTerm2</h2><p>而Go2Shell默认没有设置界面,需要用命令行打开(隐藏得真深)<br>在Shell中输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a Go2Shell --args config</span><br></pre></td></tr></table></figure><p>打开设置界面<br><img src="http://upload-images.jianshu.io/upload_images/531570-4d1263d149c3a10c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br>选择<code>iTerm2</code>选项，点击<code>Save&amp;Quit</code>保存退出即可</p><h2 id="Status-Bar"><a href="#Status-Bar" class="headerlink" title="Status Bar"></a>Status Bar</h2><p><img src="https://blog.div-wang.com/static/img/iterm2-shortcut-key/001.jpg"></p><h3 id="开启设置"><a href="#开启设置" class="headerlink" title="开启设置"></a>开启设置</h3><p>打开 <code>Preferences &gt; Profiles &gt; Session</code>，选中 <code>Status bar enabled</code>，然后单击配置状态栏开始设置状态栏配置。</p><h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><h4 id="系统资源监控"><a href="#系统资源监控" class="headerlink" title="系统资源监控"></a>系统资源监控</h4><ul><li><strong>CPU Utilization</strong> - 显示CPU一分钟内的利用率图表。</li><li><strong>Memory Utilization</strong> - 显示RAM一分钟内的利用率图表。</li><li><strong>Network Throughput</strong> - 显示一分钟内的上传和下载吞吐量图。</li></ul><h4 id="Shell-信息"><a href="#Shell-信息" class="headerlink" title="Shell 信息"></a>Shell 信息</h4><ul><li><strong>Current Directory</strong> - 显示当前工作目录</li><li><strong>Host Name</strong> - 显示当前主机名。</li><li><strong>User Name</strong> - 显示当前用户名。</li><li><strong>Job Name</strong> - 显示当前前台程序及其父进程的名称。</li><li><strong>git state</strong> - 显示当前的git分支， 以及是否有未提交的代码.</li><li><strong>Clock</strong> - 显示当前时间和日期。</li></ul><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th align="left">快捷键</th><th>操作说明</th></tr></thead><tbody><tr><td align="left">Ctrl + A</td><td>转到当前键入的行的开头</td></tr><tr><td align="left">Ctrl + E</td><td>转到当前键入的行的结尾</td></tr><tr><td align="left">Ctrl + U</td><td>清除光标前的所有行</td></tr><tr><td align="left">Ctrl + K</td><td>清除光标后的所有行</td></tr><tr><td align="left">Ctrl + W</td><td>删除光标前面的单词</td></tr><tr><td align="left">Ctrl + T</td><td>交换光标前的最后两个字符</td></tr><tr><td align="left">Esc + T</td><td>交换光标前的最后两个单词</td></tr><tr><td align="left">Ctrl + L</td><td>清除屏幕（等同clear）</td></tr><tr><td align="left">Ctrl + C</td><td>推出你正在运行的任何程序</td></tr><tr><td align="left">Ctrl + D</td><td>退出当前shell</td></tr><tr><td align="left">Option + →</td><td>光标向前移动一个单词</td></tr><tr><td align="left">Option + ←</td><td>将光标向后移动一个单词</td></tr><tr><td align="left">Ctrl + F</td><td>将光标向前移动一个字符</td></tr><tr><td align="left">Ctrl + B</td><td>将光标向后移动一个字符</td></tr><tr><td align="left">Ctrl + Y</td><td>粘贴最后一个命令剪切的任何东西</td></tr><tr><td align="left">Ctrl + _</td><td>撤销最后一个命令</td></tr></tbody></table><h2 id="配置sublime-Terminal-插件默认打开iTerm2"><a href="#配置sublime-Terminal-插件默认打开iTerm2" class="headerlink" title="配置sublime Terminal 插件默认打开iTerm2"></a>配置sublime Terminal 插件默认打开iTerm2</h2><blockquote><p>sublime 我已经很久不用了，留给有需要的同学</p></blockquote><p>打开sublime，选择<br><code>Preferences &gt; Package Setting &gt; Terminal &gt; Setting Default</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// The command to execute for the terminal, leave blank for the OS default</span></span><br><span class="line">  <span class="comment">// See https://github.com/wbond/sublime_terminal#examples for examples</span></span><br><span class="line">  <span class="comment">// 设置Terminal快捷键默认打开iTerm2</span></span><br><span class="line">  <span class="string">&quot;terminal&quot;</span>: <span class="string">&quot;iTerm2-v3.sh&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A list of default parameters to pass to the terminal, this can be</span></span><br><span class="line">  <span class="comment">// overridden by passing the &quot;parameters&quot; key with a list value to the args</span></span><br><span class="line">  <span class="comment">// dict when calling the &quot;open_terminal&quot; or &quot;open_terminal_project_folder&quot;</span></span><br><span class="line">  <span class="comment">// commands</span></span><br><span class="line">  <span class="comment">// 默认新标签打开</span></span><br><span class="line">  <span class="string">&quot;parameters&quot;</span>: [<span class="string">&quot;--open-in-tab&quot;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An environment variables changeset. Default environment variables used for the</span></span><br><span class="line">  <span class="comment">// terminal are inherited from sublime. Use this mapping to overwrite/unset. Use</span></span><br><span class="line">  <span class="comment">// null value to indicate that the environment variable should be unset.、</span></span><br><span class="line">  <span class="comment">// 默认环境变量，不做修改</span></span><br><span class="line">  <span class="string">&quot;env&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> iTerm2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> macOS </tag>
            
            <tag> 软件 </tag>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用一键脚本搭建trojan服务</title>
      <link href="/2022/10/build-a-trojan-service-with-a-one-click-script/"/>
      <url>/2022/10/build-a-trojan-service-with-a-one-click-script/</url>
      
        <content type="html"><![CDATA[<h1 id="使用一键脚本搭建trojan服务"><a href="#使用一键脚本搭建trojan服务" class="headerlink" title="使用一键脚本搭建trojan服务"></a>使用一键脚本搭建trojan服务</h1><blockquote><p>最近vpn的端口经常被封，之前了解过v2ray的WebSocket+TLS+Web技术是目前最稳妥的方案，但是受限于证书更新的问题，一直觉得麻烦。直到最近看到了trajan一键安装脚本，能够自动申请证书并续期，简直是神器。</p></blockquote><h2 id="trajan是什么"><a href="#trajan是什么" class="headerlink" title="trajan是什么"></a>trajan是什么</h2><p>`Trojan不使用自定义的加密协议来隐藏自身。相反，使用特征明显的TLS协议(TLS/SSL)，使得流量看起来与正常的HTTPS网站相同。TLS是一个成熟的加密体系，HTTPS即使用TLS承载HTTP流量。使用正确配置的加密TLS隧道，可以保证传输的</p><ul><li>保密性（GFW无法得知传输的内容）</li><li>完整性（一旦GFW试图篡改传输的密文，通讯双方都会发现）</li><li>不可抵赖（GFW无法伪造身份冒充服务端或者客户端）</li><li>前向安全（即使密钥泄露，GFW也无法解密先前的加密流量）</li></ul><p>对于被动检测，Trojan协议的流量与HTTPS流量的特征和行为完全一致。而HTTPS流量占据了目前互联网流量的一半以上，且TLS握手成功后流量均为密文，几乎不存在可行方法从其中分辨出Trojan协议流量。</p><p>从官方的描述看，就是不带反响代理的v2ray+WebSocket+TLS+Web。</p><p><a href="https://github.com/Jrohy/trojan">trojan官方github</a></p><h2 id="服务搭建过程"><a href="#服务搭建过程" class="headerlink" title="服务搭建过程"></a>服务搭建过程</h2><h3 id="准备一个域名"><a href="#准备一个域名" class="headerlink" title="准备一个域名"></a>准备一个域名</h3><p>你要有一个域名，并且把A记录解析到你要搭建的服务器上</p><h3 id="准备安装"><a href="#准备安装" class="headerlink" title="准备安装"></a>准备安装</h3><p>更新服务器系统及脚本所依赖的安装包，参考如下命令更新服务器、安装 wget 和 curl 包。</p><p>CentOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y &amp;&amp; yum install wget -y &amp;&amp; yum install curl -y</span><br></pre></td></tr></table></figure><p>Debian / Ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update -y &amp;&amp; apt-get install wget -y &amp;&amp; apt-get install curl -y</span><br></pre></td></tr></table></figure><p>如果是一台新的服务器，更新过程会有点久，等待更新完服务器后，然后就可以参照下面的步骤开始安装 atrandys Trojan 一键脚本了。</p><h3 id="一键脚本安装教程"><a href="#一键脚本安装教程" class="headerlink" title="一键脚本安装教程"></a>一键脚本安装教程</h3><p>运行以上命令需要root权限，所以需要切换到root账户下，也可以使用<code>sudo</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/atrandys/trojan/master/trojan_mult.sh &amp;&amp; chmod +x trojan_mult.sh &amp;&amp; ./trojan_mult.sh</span><br></pre></td></tr></table></figure><p>该脚本会自动下载<code>trojan_mult.sh</code>到你当前目录，如果安装失败，可以手动执行<code>sh ./trojan_mult.sh</code>即可在此执行。</p><h3 id="trojan配置"><a href="#trojan配置" class="headerlink" title="trojan配置"></a>trojan配置</h3><p>一键脚本安装后，默认会安装到<code>/usr/src/</code>目录下，一共有3个文件夹</p><ul><li><code>trojan</code> 配置文件和可执行文件</li><li><code>trojan-cert</code> https证书</li><li><code>trojan-cli</code> 命令行工具</li></ul><h4 id="配置文件trojan-server-conf，"><a href="#配置文件trojan-server-conf，" class="headerlink" title="配置文件trojan/server.conf，"></a>配置文件<code>trojan/server.conf</code>，</h4><blockquote><p>注意<code>trojan</code>目录下有两个conf文件，<code>trojan/config.conf</code>是默认配置文件，修改也不会生效。</p></blockquote><p>配置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;run_type&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span>: <span class="number">443</span>, #端口号，如果443被封，可以改这里</span><br><span class="line">    <span class="attr">&quot;remote_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;remote_port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;password&quot;</span> #这里是密码，可以是多个，不同人用不同密码，控制访问</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;log_level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cert&quot;</span>: <span class="string">&quot;/usr/src/trojan-cert/net56.diyboo.com/fullchain.cer&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;/usr/src/trojan-cert/net56.diyboo.com/private.key&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;key_password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;cipher_tls13&quot;</span>:<span class="string">&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;prefer_server_cipher&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;alpn&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;reuse_session&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;session_ticket&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;session_timeout&quot;</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">&quot;plain_http_response&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;curves&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dhparam&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tcp&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;no_delay&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;keep_alive&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;fast_open_qlen&quot;</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;mysql&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;server_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;server_port&quot;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改默认443端口"><a href="#修改默认443端口" class="headerlink" title="修改默认443端口"></a>修改默认443端口</h3><p>我的vps默认443被封了，我看网上说443端口很容易被封: <a href="https://github.com/Jrohy/trojan/issues/567">443突然嗝屁，请问有更换端口的办法吗？</a><br>只需要按照我上面配置文件说明修改端口号，并保存<br>执行一下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trojan restart </span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>trojan相比v2ray配置很简单，安装就更简单了，并且安全可靠，能够稳定用一段时间</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://github.com/Jrohy/trojan">trojan官方github</a></p><p><a href="https://www.linuxtrojan.com/">TROJAN 中文网</a></p><p><a href="https://github.com/Chikage0o0/Linux-NetSpeed">BBR开启脚本</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
            <tag> 教程 </tag>
            
            <tag> trojan </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在咸鱼买东西不翻车</title>
      <link href="/2022/09/buy-things-in-xianyu-not-deceived/"/>
      <url>/2022/09/buy-things-in-xianyu-not-deceived/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在咸鱼买东西不翻车"><a href="#如何在咸鱼买东西不翻车" class="headerlink" title="如何在咸鱼买东西不翻车"></a>如何在咸鱼买东西不翻车</h1><h2 id="教你找到心仪的价格"><a href="#教你找到心仪的价格" class="headerlink" title="教你找到心仪的价格"></a>教你找到心仪的价格</h2><ul><li>打开首页搜索你想要的商品，查看搜索到的前三页价格，得到一个评论价格，这个是主页价格，其实是偏高的。</li><li>在筛选里最高价格输入平均价，最低价输入平均价-100然后就可以愉快的挑选商品了</li><li>如果你想买更低的价格，那么请仔细看确认卖家这一步，很重要</li></ul><h2 id="教你确认卖家是不是骗子"><a href="#教你确认卖家是不是骗子" class="headerlink" title="教你确认卖家是不是骗子"></a>教你确认卖家是不是骗子</h2><h3 id="卖家的三个分类"><a href="#卖家的三个分类" class="headerlink" title="卖家的三个分类"></a>卖家的三个分类</h3><h4 id="普通卖家"><a href="#普通卖家" class="headerlink" title="普通卖家"></a>普通卖家</h4><ul><li>机器保存比较好，对期望价格比较好，占比3成左右</li><li>机器损坏比较厉害，基本上无法用，不过给钱就卖，占比2成</li><li>手机有一定小问题，懒得修，有软件问题也有硬件问题，占比5成</li></ul><h4 id="专业卖家"><a href="#专业卖家" class="headerlink" title="专业卖家"></a>专业卖家</h4><ul><li>咸鱼出货量比较大，一般是多个账号收机器，一个账号买机器。占比3成左右，价格贵点，售后好没啥其他问题</li><li>出货少，什么都卖，一般是新手卖家或者自己线下门店的货。占比4成以上，翻车概率有，但是可以杀价</li><li>批量出货的卖家，走量，主要是供货给玩批量养号的工作室。占比3成左右，价格低，品相不好，议价空间也很低。</li></ul><h4 id="骗子卖家"><a href="#骗子卖家" class="headerlink" title="骗子卖家"></a>骗子卖家</h4><ul><li>女生自用，这是惯用的一种手法，伪装成普通卖家1，一般价格是他们一半，属于广撒网模式。</li><li>专业维修，这种是伪装成专业卖家1，批量出货，价格也是比较合理，但是硬件全是翻新过得，翻车几率很大。</li><li>自营手机店，这种事伪装成专业卖家2，文案专业，手机价格低，出售不维修，看着像真的手机店。大部分要求不走咸鱼交易。</li></ul><h3 id="选择哪类卖家呢？"><a href="#选择哪类卖家呢？" class="headerlink" title="选择哪类卖家呢？"></a>选择哪类卖家呢？</h3><ul><li>首先明确需求，你要买什么价格，如果是平均价格稍微低一些，那么就是专业普通卖家1和普通卖家3</li><li>如果追求低价格，那么首选是普通卖家3，其次是专业卖家2，他们都能啥价，有些小城市的人不了解价格，卖的会比较低，如果是其他渠道得来的，那就更低了。</li><li>一定要注意骗子，他们骗术也是与时俱进的。</li></ul><h2 id="教你怎么买东西不翻车"><a href="#教你怎么买东西不翻车" class="headerlink" title="教你怎么买东西不翻车"></a>教你怎么买东西不翻车</h2><ul><li>首先是花点时间看下首页的帖子，了解你要买的东西都有哪些黑话。</li><li>感觉差不多了的时候，先找专业卖家套话，举个例子，你买iPhone手机，首先得问卖家，是不是有没有拆机，电池是多少，有没有ID。</li><li>交流中学到的新黑话，再找其他专业卖家反复确认，这个时候反正不买他们东西，一定要问到他们不想搭理你。脸皮厚也是买到不翻车商品的必备技能。</li><li>感觉问的差不多，已经把想买的东西了解比较清楚了，这个时候找普通卖家3或者专业卖家2，用你刚学到的知识疯狂压价。</li><li>压价一定要狠，如果他表示价格无法接受，那么在提高价格继续谈。如果对方不理你了，不要紧，换个小号加个价重新谈。一般这种小号加价以后有的谈的，都是真实卖家，这个时候就是斗智斗勇的时刻了。</li><li>这个时候切记，如果你压价比较狠对方直接同意，或者你怎么问他问题他都不生气，一直想跟你成交，那么这个人十有八九是骗子。</li><li>如果价格感觉合适，对方也原因卖，那么就直接下单，收到货不要急着签收，要验证是否有之前双方沟通中没有说清楚的问题，如果有小问题，那么这时候一定要再次跟卖家压价，一版这个时候卖家为了促成交易，并且理亏，会不成运费以及一定金额。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 薅羊毛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose快速构建wordpress</title>
      <link href="/2020/10/use-docker-to-quickly-deploy-wordPress/"/>
      <url>/2020/10/use-docker-to-quickly-deploy-wordPress/</url>
      
        <content type="html"><![CDATA[<h1 id="使用docker-compose快速构建wordpress"><a href="#使用docker-compose快速构建wordpress" class="headerlink" title="使用docker-compose快速构建wordpress"></a>使用docker-compose快速构建wordpress</h1><blockquote><p>今天讲解一下超级简单方式搭建wordpress。使用 docker-compose 快速安装博客，顺带将nginx、mysql一起集成进去。</p></blockquote><h2 id="为什么使用docker-compose来构建"><a href="#为什么使用docker-compose来构建" class="headerlink" title="为什么使用docker-compose来构建"></a>为什么使用docker-compose来构建</h2><p>docker-composer 是 docker 的一种编排服务。就想本文的例子，你有一个wordpress镜像，一个mysql镜像，一个nginx镜像。如果没有docker-compose，那么每次启动的时候，你需要敲各个容器的启动参数，环境变量，容器命名，指定不同容器的链接参数等等一系列的操作，相当繁琐。而用了docker-composer之后，你就可以把这些命令一次性写在<code>docker-composer.yml</code>文件中，以后每次启动这一整个环境（含3个容器）的时候，你只要敲一个<code>docker-composer up</code>命令就ok了。</p><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><h3 id="centos-安装-docker"><a href="#centos-安装-docker" class="headerlink" title="centos 安装 docker"></a>centos 安装 docker</h3><h5 id="更新源地址"><a href="#更新源地址" class="headerlink" title="更新源地址"></a>更新源地址</h5><blockquote><p>众所周知的原因，官方源国内访问太慢，需要替换源地址，下面两个源地址任选一个即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阿里云的源</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清华大学的源</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h5 id="更新yum中的docker-ce为最新版本"><a href="#更新yum中的docker-ce为最新版本" class="headerlink" title="更新yum中的docker-ce为最新版本"></a>更新yum中的docker-ce为最新版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update <span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce <span class="comment">#安装 docker</span></span><br><span class="line">sudo systemctl start docker <span class="comment">#启动 docker 服务</span></span><br><span class="line">docker version <span class="comment">#查看 docker版本</span></span><br></pre></td></tr></table></figure><h5 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-compose <span class="comment">#安装 docker-compose</span></span><br><span class="line">sudo docker-compose version <span class="comment">#查看版本</span></span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><h4 id="创建-nginx-conf"><a href="#创建-nginx-conf" class="headerlink" title="创建 nginx.conf"></a>创建 nginx.conf</h4><blockquote><p>这是配合wordpress:php7.4-fpm-alpine镜像的nginx配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.domain.com;</span><br><span class="line">    # 配置wordpress目录为根目录</span><br><span class="line">    root /var/www/html;</span><br><span class="line">    index index.php;</span><br><span class="line">    # 配置日志目录</span><br><span class="line">    access_log /var/log/nginx/wordpress-access.log;</span><br><span class="line">    error_log /var/log/nginx/wordpress-error.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.php?$args;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        try_files $uri =404;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        # 配置访问转发到wordpress镜像9000接口</span><br><span class="line">        fastcgi_pass wordpress:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-docker-compose-yml"><a href="#创建-docker-compose-yml" class="headerlink" title="创建 docker-compose.yml"></a>创建 docker-compose.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span> <span class="comment">#指定本 yml 依从的 compose 哪个版本制定的。</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span> <span class="comment">#使用最新nginx镜像</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment">#容器总是重新启动</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span> <span class="comment">#将服务器8080端口映射到nginx镜像80端口</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment">#将服务器的nginx相关文件夹挂载到nginx镜像中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx:/etc/nginx/conf.d</span> <span class="comment">#配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/logs:/var/log/nginx</span> <span class="comment">#日志</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./html:/var/www/html</span> <span class="comment">#访问根目录，这个目录也是wordpress的根目录</span></span><br><span class="line">    <span class="attr">links:</span> <span class="comment">#链接到wordpress镜像，设置内网访问</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span> <span class="comment">#使用mysql:5.7镜像</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment">#容器总是重新启动</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3308:3306&quot;</span> <span class="comment">#将服务器3308端口映射到dbs镜像3306端口</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment">#db镜像的环境变量</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment">#将服务器的数据库文件夹挂载到db镜像中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:php7.4-fpm</span> <span class="comment">#使用wordpress:php7.4-fpm镜像，配合nginx使用</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment">#容器总是重新启动</span></span><br><span class="line">    <span class="attr">depends_on:</span> <span class="comment">#启动db镜像之后再启动wordpress镜像</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment">#wordpress镜像的环境变量</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment">#将服务器的wordpress文件夹挂载到wordpress镜像中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./html:/var/www/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini</span></span><br></pre></td></tr></table></figure><h2 id="运行wordpress"><a href="#运行wordpress" class="headerlink" title="运行wordpress"></a>运行wordpress</h2><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up -d <span class="comment">#后台运行</span></span><br></pre></td></tr></table></figure><h4 id="访问地址："><a href="#访问地址：" class="headerlink" title="访问地址："></a>访问地址：</h4><p>浏览器输入<code>IP:8080</code>或<code>www.domain.com</code>直接访问</p><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml down <span class="comment">#停止并删除服务</span></span><br></pre></td></tr></table></figure><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps <span class="comment">#查看所有服务状态</span></span><br><span class="line">docker-compose stop <span class="comment">#停止所有容器</span></span><br><span class="line">docker-compose stop nginx <span class="comment">#停止指定容器（nginx）</span></span><br><span class="line">docker-compose rm nginx <span class="comment">#删除容器</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020淘宝双11 利用autojs 自动领喵币 &amp; 自动吸猫脚本 持续更新</title>
      <link href="/2020/10/2020-double11-autojs/"/>
      <url>/2020/10/2020-double11-autojs/</url>
      
        <content type="html"><![CDATA[<h1 id="2020淘宝双11-利用autojs-自动领喵币-amp-自动吸猫脚本-持续更新"><a href="#2020淘宝双11-利用autojs-自动领喵币-amp-自动吸猫脚本-持续更新" class="headerlink" title="2020淘宝双11 利用autojs 自动领喵币 &amp; 自动吸猫脚本 持续更新"></a>2020淘宝双11 利用autojs 自动领喵币 &amp; 自动吸猫脚本 持续更新</h1><blockquote><p>autojs autojs最新版 autojs最免费版 淘宝双十一 自动脚本</p></blockquote><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/div-wang/2020double11">https://github.com/div-wang/2020double11</a></p><h2 id="安装autojs"><a href="#安装autojs" class="headerlink" title="安装autojs"></a>安装autojs</h2><p>本版本autojs是打包自开源项目<a href="https://github.com/hyb1996/Auto.js">hyb1996/Auto.js</a>最新免费版本，没有任何后门，请放心使用</p><h4 id="下载autojs"><a href="#下载autojs" class="headerlink" title="下载autojs"></a>下载autojs</h4><ul><li>您可以直接下载: <code>AutoJs-4.1.1a.Alpha2-armeabi-v7a-release.apk</code></li><li>使用百度网盘: <code>链接: https://pan.baidu.com/s/1VAo0UDkaoGT_DLwYTQIg9w 提取码: imvd 复制这段内容后打开百度网盘手机App，操作更方便哦</code><h4 id="安装autojs-1"><a href="#安装autojs-1" class="headerlink" title="安装autojs"></a>安装autojs</h4></li></ul><p>下载之后，找到<code>AutoJs-4.1.1a.Alpha2-armeabi-v7a-release.apk</code>，点击安装<br>安装完打开会有提示：<br><img src="/static/001.jpg"><br>不够用管他，直接点击确定，开启无障碍模式</p><h4 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h4><ul><li><a href="https://www.bilibili.com/video/BV14Z4y1V7b3">autojs安装并开启无障碍模式</a></li><li><a href="https://www.bilibili.com/video/BV1A54y1r7YA/">如何添加脚本文件–视频文件</a></li></ul><h2 id="脚本更新说明"><a href="#脚本更新说明" class="headerlink" title="脚本更新说明"></a>脚本更新说明</h2><p>脚本贡献感谢<a href="https://github.com/roceys">roceys</a>大神的<a href="https://github.com/roceys/Taobao">Taobao</a>项目</p><h3 id="Version：0-0-3"><a href="#Version：0-0-3" class="headerlink" title="Version：0.0.3"></a>Version：0.0.3</h3><ul><li>增加去搜索功能</li><li>增加自动撸猫功能（偶尔出现1600暴击）</li><li>增加自动领奖励功能</li><li>1021晚上发现淘宝增加了脚本检测 可以使用低版本淘宝破解</li></ul><h2 id="破解脚本失效问题"><a href="#破解脚本失效问题" class="headerlink" title="破解脚本失效问题"></a>破解脚本失效问题</h2><p>淘宝最新版本有无障碍检测，autojs恰恰是基于无障碍模式运行的，可以说是针对性的。</p><p>不过这也难不到我，新版本有无障碍检测，老版本不会有呀。本人亲测<a href="https://os-android.liqucn.com/rj/13937-history-278.shtml">淘宝9.5.7apk</a>没有这个限制</p><p>我的网盘链接也有9.5.7的安装包，不够网盘超过100M有限制，需要客户端才能下载。大家可以自行选择下载。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 薅羊毛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> autojs </tag>
            
            <tag> 自动领猫币 </tag>
            
            <tag> 双十一 </tag>
            
            <tag> 618 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2Ray 使用教程 2022</title>
      <link href="/2020/10/V2Ray-is-full-of-tutorials-2020/"/>
      <url>/2020/10/V2Ray-is-full-of-tutorials-2020/</url>
      
        <content type="html"><![CDATA[<h1 id="V2Ray-使用教程-2022"><a href="#V2Ray-使用教程-2022" class="headerlink" title="V2Ray 使用教程 2022"></a>V2Ray 使用教程 2022</h1><blockquote><p>上一篇的V2Ray是2017年写的，至今已经5年了，V2Ray有很多不一样的地方，决定重新写一篇文章</p></blockquote><h2 id="V2Ray是什么"><a href="#V2Ray是什么" class="headerlink" title="V2Ray是什么"></a>V2Ray是什么</h2><p>V2Ray经过这几年发展，已经成为安全的代名词了，接下来介绍下最新版本的v2ray如何安装。</p><p><a href="https://www.v2ray.com/">V2Ray官方网站</a></p><p><a href="https://github.com/v2ray/">V2Ray-Github</a></p><h2 id="服务端搭建过程"><a href="#服务端搭建过程" class="headerlink" title="服务端搭建过程"></a>服务端搭建过程</h2><ul><li>国外的免费vps路子已经不行了，<ul><li><a href="https://aws.amazon.com/">aws</a>的<a href="https://aws.amazon.com/cn/free/">新用户免费一年</a>的服务器ip大部分被强了</li><li><a href="https://cloud.google.com/">谷歌云</a>的免费只有3个月了</li></ul></li><li>国内付费也得靠运气了<ul><li>阿里云的轻量应用服务器ip大部分不能用，可以优先选择ecs，1核0.5G，流量按照使用付费，一个月大概40左右</li><li>腾讯云目的<code>轻量应用服务器</code>，在大量封禁账号，我的因为特征明显，账号都被腾讯云封禁了，如果不做伪装，不要选择腾讯。，</li></ul></li></ul><h3 id="登录-vps-自动执行安装脚本"><a href="#登录-vps-自动执行安装脚本" class="headerlink" title="登录 vps 自动执行安装脚本"></a>登录 vps 自动执行安装脚本</h3><p>运行以上命令需要root权限，所以需要切换到root账户下，也可以使用<code>sudo</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br></pre></td></tr></table></figure><p>该脚本会自动安装以下两个文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/v2ray/v2ray：V2Ray 程序；</span><br><span class="line">/usr/local/etc/v2ray/config.json：配置文件；</span><br></pre></td></tr></table></figure><h5 id="官方说明：此脚本会配置开机自动运行脚本，仅适用于-SysV-模式，不支持-Debian-7-的-systemd。"><a href="#官方说明：此脚本会配置开机自动运行脚本，仅适用于-SysV-模式，不支持-Debian-7-的-systemd。" class="headerlink" title="官方说明：此脚本会配置开机自动运行脚本，仅适用于 SysV 模式，不支持 Debian 7 的 systemd。"></a>官方说明：此脚本会配置开机自动运行脚本，仅适用于 SysV 模式，不支持 Debian 7 的 systemd。</h5><h3 id="V2Ray配置"><a href="#V2Ray配置" class="headerlink" title="V2Ray配置"></a>V2Ray配置</h3><h5 id="编辑-usr-local-etc-v2ray-config-json-文件来配置代理方式，这里给出新的配置，是最近3年来我绝得最稳定的配置"><a href="#编辑-usr-local-etc-v2ray-config-json-文件来配置代理方式，这里给出新的配置，是最近3年来我绝得最稳定的配置" class="headerlink" title="编辑 /usr/local/etc/v2ray/config.json 文件来配置代理方式，这里给出新的配置，是最近3年来我绝得最稳定的配置"></a>编辑 /usr/local/etc/v2ray/config.json 文件来配置代理方式，这里给出新的配置，是最近3年来我绝得最稳定的配置</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;access&quot;</span>: <span class="string">&quot;/var/log/v2ray/access.log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;/var/log/v2ray/error.log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span>: <span class="string">&quot;info&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;clients&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;uuid&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;alterId&quot;</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="attr">&quot;security&quot;</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;shadowsocks&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">3389</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;aes-256-gcm&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;udp&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;strategy&quot;</span>: <span class="string">&quot;rules&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;ip&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;0.0.0.0/8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;10.0.0.0/8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;100.64.0.0/10&quot;</span>,</span><br><span class="line">            <span class="string">&quot;127.0.0.0/8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;169.254.0.0/16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;172.16.0.0/12&quot;</span>,</span><br><span class="line">            <span class="string">&quot;192.0.0.0/24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;192.0.2.0/24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;198.18.0.0/15&quot;</span>,</span><br><span class="line">            <span class="string">&quot;198.51.100.0/24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;203.0.113.0/24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;::1/128&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fc00::/7&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fe80::/10&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;blocked&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ss端口我试过很多，什么3001-3033、10086这些非系统流量端口总是被封tcp流量，换成3389之后就没有这个问题了。</p><h4 id="国内服务器转发"><a href="#国内服务器转发" class="headerlink" title="国内服务器转发"></a>国内服务器转发</h4><h5 id="安装最新发行的-geoip-dat-和-geosite-dat"><a href="#安装最新发行的-geoip-dat-和-geosite-dat" class="headerlink" title="安装最新发行的 geoip.dat 和 geosite.dat"></a>安装最新发行的 geoip.dat 和 geosite.dat</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh)</span><br></pre></td></tr></table></figure><h5 id="转发配置"><a href="#转发配置" class="headerlink" title="转发配置"></a>转发配置</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;log&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;access&quot;</span>: <span class="string">&quot;/var/log/v2ray/access.log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;/var/log/v2ray/error.log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span>: <span class="string">&quot;info&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">4443</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;clients&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;25f8fa73-9468-4b6a-...&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;alterId&quot;</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="attr">&quot;security&quot;</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;shadowsocks&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;udp&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;shadowsocks&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;servers&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;国外VPS IP&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="number">3389</span>,</span><br><span class="line">            <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;level&quot;</span>: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span>: <span class="string">&quot;IPIfNonMatch&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;geoip:private&quot;</span>,</span><br><span class="line">          <span class="string">&quot;geoip:cn&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;blocked&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;ext:gfw.dat:gfw&quot;</span>,</span><br><span class="line">          <span class="string">&quot;geosite:google&quot;</span>,</span><br><span class="line">          <span class="string">&quot;geosite:geolocation-!cn&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;network&quot;</span>: <span class="string">&quot;tcp,udp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;user&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;gh110827@gmail.com&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="V2Ray启动说明"><a href="#V2Ray启动说明" class="headerlink" title="V2Ray启动说明"></a>V2Ray启动说明</h3><p>运行 <code>service v2ray start</code> 来启动 V2Ray 进程</p><table><thead><tr><th>service v2ray 方法</th><th>功能描述</th></tr></thead><tbody><tr><td>start</td><td>启动 V2Ray</td></tr><tr><td>stop</td><td>停止 V2Ray</td></tr><tr><td>status</td><td>查看 V2Ray 启动信息</td></tr><tr><td>reload</td><td>重新加载 V2Ray 配置信息</td></tr><tr><td>restart</td><td>重新启动 V2Ray</td></tr><tr><td>force-reload</td><td>强制重新加载 V2Ray 配置信息</td></tr></tbody></table><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h4 id="官方网站上有丰富的-GUI-客户端："><a href="#官方网站上有丰富的-GUI-客户端：" class="headerlink" title="官方网站上有丰富的 GUI 客户端："></a>官方网站上有丰富的 GUI 客户端：</h4><p><a href="https://www.v2ray.com/awesome/tools.html">V2Ray 客户端列表</a></p><h4 id="Clash配置"><a href="#Clash配置" class="headerlink" title="Clash配置"></a>Clash配置</h4><p>我自己选择的是<code>Clash</code>，主要是看中它支持的格式多，管理方便，并且开源免费。<br>缺点也是有多，就是配置复杂，所以Clash的配置大家可以参考下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP(S) SOCKS混合端口</span></span><br><span class="line"><span class="comment"># 注意仅在较新版本中可用填写此项时上面两项就不需要存在了</span></span><br><span class="line"><span class="comment"># 在CFW中想要分别设置这两个代理的端口必须保留此项否则会自动合并</span></span><br><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许局域网设备连接</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP(S)与SOCKS服务器的用户验证</span></span><br><span class="line"><span class="string">​#</span> <span class="attr">authentication:</span> <span class="literal">null</span></span><br><span class="line"><span class="comment">#   - &quot;user1:pass1&quot;</span></span><br><span class="line"><span class="comment">#   - &quot;user2:pass2&quot;</span></span><br><span class="line"><span class="comment"># 默认使用 rule/direct/global(规则/直连/全局)</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志等级一般也不需要我们去管</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RESTful API 的地址 http://127.0.0.1:9090</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DNS 服务器配置(可选；若不配置，程序内置的 DNS 服务会被关闭)</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span></span><br><span class="line">  <span class="comment"># 以下填写的 DNS 服务器将会被用来解析 DNS 服务的域名</span></span><br><span class="line">  <span class="comment"># 仅填写 DNS 服务器的 IP 地址</span></span><br><span class="line">  <span class="attr">default-nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span> <span class="comment"># 或 redir-host</span></span><br><span class="line">  <span class="attr">fake-ip-range:</span> <span class="number">198.18</span><span class="number">.0</span><span class="number">.1</span><span class="string">/16</span> <span class="comment"># Fake IP 地址池 (CIDR 形式)</span></span><br><span class="line">  <span class="comment"># use-hosts: true # 查询 hosts 并返回 IP 记录</span></span><br><span class="line">  <span class="comment"># 在以下列表的域名将不会被解析为 fake ip，这些域名相关的解析请求将会返回它们真实的 IP 地址</span></span><br><span class="line">  <span class="attr">fake-ip-filter:</span></span><br><span class="line">    <span class="comment"># 以下域名列表参考自 vernesong/OpenClash 项目，并由 Hackl0us 整理补充</span></span><br><span class="line">    <span class="comment"># === LAN ===</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.lan&#x27;</span></span><br><span class="line">    <span class="comment"># === Apple Software Update Service ===</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;swscan.apple.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;mesu.apple.com&#x27;</span></span><br><span class="line">    <span class="comment"># === Windows 10 Connnect Detection ===</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.msftconnecttest.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.msftncsi.com&#x27;</span></span><br><span class="line">    <span class="comment"># === Music Service ===</span></span><br><span class="line">    <span class="comment">## NetEase</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.music.163.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.126.net&#x27;</span></span><br><span class="line">    <span class="comment">## Baidu</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;musicapi.taihe.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;music.taihe.com&#x27;</span></span><br><span class="line">    <span class="comment">## Kugou</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;songsearch.kugou.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;trackercdn.kugou.com&#x27;</span></span><br><span class="line">    <span class="comment">## Kuwo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.kuwo.cn&#x27;</span></span><br><span class="line">    <span class="comment">## JOOX</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;api-jooxtt.sanook.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;api.joox.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;joox.com&#x27;</span></span><br><span class="line">    <span class="comment">## QQ</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.y.qq.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.music.tc.qq.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;aqqmusic.tc.qq.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.stream.qqmusic.qq.com&#x27;</span></span><br><span class="line">    <span class="comment">## Xiami</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.xiami.com&#x27;</span></span><br><span class="line">    <span class="comment">## Migu</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.music.migu.cn&#x27;</span></span><br><span class="line">    <span class="comment"># === Game Service ===</span></span><br><span class="line">    <span class="comment">## Nintendo Switch</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.srv.nintendo.net&#x27;</span></span><br><span class="line">    <span class="comment">## Sony PlayStation</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.stun.playstation.net&#x27;</span></span><br><span class="line">    <span class="comment">## Microsoft Xbox</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xbox.*.microsoft.com&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;+.xboxlive.com&#x27;</span></span><br><span class="line">    <span class="comment"># === Other ===</span></span><br><span class="line">    <span class="comment">## QQ Quick Login</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;localhost.ptlogin2.qq.com&#x27;</span></span><br><span class="line">    <span class="comment">## Golang</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;proxy.golang.org&#x27;</span></span><br><span class="line">    <span class="comment">## STUN Server</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;stun.*.*&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;stun.*.*.*&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 支持 UDP / TCP / DoT / DoH 协议的 DNS 服务，可以指明具体的连接端口号。</span></span><br><span class="line">  <span class="comment"># 所有 DNS 请求将会直接发送到服务器，不经过任何代理。</span></span><br><span class="line">  <span class="comment"># Clash 会使用最先获得的解析记录回复 DNS 请求</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">  <span class="comment"># 当 fallback 参数被配置时 DNS 请求将同时发送至上方 nameserver 列表和下方 fallback 列表中配置的所有 DNS 服务器.</span></span><br><span class="line">  <span class="comment"># 当解析得到的 IP 地址的地理位置不是 CN 时，clash 将会选用 fallback 中 DNS 服务器的解析结果。</span></span><br><span class="line">  <span class="attr">fallback:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 如果使用 nameserver 列表中的服务器解析的 IP 地址在下方列表中的子网中，则它们被认为是无效的，</span></span><br><span class="line">  <span class="comment"># Clash 会选用 fallback 列表中配置 DNS 服务器解析得到的结果。</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># 当 fallback-filter.geoip 为 true 且 IP 地址的地理位置为 CN 时，</span></span><br><span class="line">  <span class="comment"># Clash 会选用 nameserver 列表中配置 DNS 服务器解析得到的结果。</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># 当 fallback-filter.geoip 为 false 如果解析结果不在 fallback-filter.ipcidr 范围内，</span></span><br><span class="line">  <span class="comment"># Clash 总会选用 nameserver 列表中配置 DNS 服务器解析得到的结果。</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># 采取以上逻辑进行域名解析是为了对抗 DNS 投毒攻击。</span></span><br><span class="line">  <span class="attr">fallback-filter:</span></span><br><span class="line">    <span class="attr">geoip:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">geoip-code:</span> <span class="string">CN</span></span><br><span class="line">    <span class="attr">ipcidr:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">240.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tun:</span></span><br><span class="line"><span class="comment">#   enable: true #如果需要启用 TUN 模式，请设置为 true</span></span><br><span class="line"><span class="comment">#   stack: system # 或 gvisor</span></span><br><span class="line"><span class="comment">#   macOS-auto-route: true</span></span><br><span class="line"><span class="comment">#   macOS-auto-detect-interface: true</span></span><br><span class="line"><span class="comment">#   dns-hijack:</span></span><br><span class="line"><span class="comment">#     - tcp://1.1.1.1:53</span></span><br><span class="line"><span class="comment">#     - tcp://8.8.8.8:53</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># interface-name: en0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点信息</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2ray规则</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">你的服务器ip地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">vmess</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span><span class="string">（你配置的端口）</span></span><br><span class="line">    <span class="attr">uuid:</span> <span class="string">uuid（你配置的uuid）</span></span><br><span class="line">    <span class="attr">alterId:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">cipher:</span> <span class="string">auto</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shadowsocks规则</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">你的服务器ip地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ss</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3389</span><span class="string">（你配置的端口）</span></span><br><span class="line">    <span class="attr">cipher:</span> <span class="string">aes-256-gcm</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password（你配置的密码）</span></span><br><span class="line">    <span class="attr">udp:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">trojan规则（可以自定义）</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">example.com（你配置的域名）</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">trojan</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">443</span> <span class="string">（你配置的端口）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password（你配置的密码）</span></span><br><span class="line"><span class="comment"># 策略组</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Proxy</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="comment"># url: &quot;www.google.com&quot; # 测速网址</span></span><br><span class="line">    <span class="comment"># interval: 30 # 测速间隔(s)</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v2ray规则</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">shadowsocks规则</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">trojan规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则组仅Premium版可用: </span></span><br><span class="line"><span class="comment"># ClashX Pro = https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public</span></span><br><span class="line"><span class="comment"># Clash for Windows = https://github.com/Fndroid/clash_for_windows_pkg/releases</span></span><br><span class="line"><span class="comment"># Clash for Android Premium = https://github.com/Kr328/ClashForAndroid/releases</span></span><br><span class="line"><span class="attr">rule-providers:</span></span><br><span class="line">  <span class="attr">reject:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/reject.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">icloud:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/icloud.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">apple:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/apple.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">google:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/google.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/proxy.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">direct:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/direct.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">private:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/private.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gfw:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/gfw.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">greatfire:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/greatfire.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/greatfire.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tld-not-cn:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">domain</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/tld-not-cn.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">telegramcidr:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">ipcidr</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/telegramcidr.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cncidr:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">ipcidr</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/cncidr.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">lancidr:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">ipcidr</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/lancidr.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">youjia:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">behavior:</span> <span class="string">ipcidr</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&#x27;https://redtom-proxy.oss-cn-beijing.aliyuncs.com/clash_config/youjia.txt&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./ruleset/youjia.yaml</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="number">86400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则一般不需要你一条一条的写一般都是用转换API与GitHub上的规则批量导入的</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># &gt; 应用配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PROCESS-NAME,iTerm2,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PROCESS-NAME,Code,Proxy</span></span><br><span class="line">  <span class="comment"># &gt; 自定义规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gsmarena.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tiktok.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tiktokcdn.com,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,tiktokv.com,Proxy</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># &gt; 群组规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,reject,REJECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,gfw,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,greatfire,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,tld-not-cn,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,google,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,telegramcidr,Proxy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RULE-SET,cncidr,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">MATCH,DIRECT</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用shadowsocks客户端"><a href="#使用shadowsocks客户端" class="headerlink" title="使用shadowsocks客户端"></a>使用shadowsocks客户端</h4><p>服务端配置好shadowsocks，使用shadowsocks客户端连接到上面定义的shadowsocks端口3389进行测试上网是否成功。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://blog.div-wang.com/2017/10/V2Ray-is-full-of-tutorials.html">V2Ray 使用教程</a></p><p><a href="https://ailitonia.com/archives/v2ray%E5%AE%8C%E5%85%A8%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/">V2Ray完全配置指南</a></p><p><a href="https://www.v2ray.com/awesome/tools.html">第三方客户端</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
            <tag> V2Ray </tag>
            
            <tag> ssr </tag>
            
            <tag> ss </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用element-ui的upload组件上传到七牛云</title>
      <link href="/2020/09/element-upload-component-to-qiniu/"/>
      <url>/2020/09/element-upload-component-to-qiniu/</url>
      
        <content type="html"><![CDATA[<h1 id="使用element-ui的upload组件上传到七牛云"><a href="#使用element-ui的upload组件上传到七牛云" class="headerlink" title="使用element-ui的upload组件上传到七牛云"></a>使用element-ui的upload组件上传到七牛云</h1><blockquote><p>最近基于element-ui开发管理平台，老的上传组件基于plupload官方推荐的，有点过于重了。自己写了一个基于element-ui的上传组件。</p></blockquote><h2 id="后端获取token实现"><a href="#后端获取token实现" class="headerlink" title="后端获取token实现"></a>后端获取token实现</h2><p><a href="https://developer.qiniu.com/kodo/manual/1208/upload-token">获取上传token的文档</a><br>最下面有<a href="https://github.com/qiniu/nodejs-sdk.v6/blob/master/qiniu/rs.js?ref=developer.qiniu.com">Demo-nodejs</a></p><p>填入ak,sk,以及bucketName(就是开始创建的对象存储空间的名字)，修改demo的key重新运行即可。</p><p><img src="/static/img/element-upload-component-to-qiniu/001.png" alt="001"></p><p>还有个具体点的代码实现：<a href="https://smallpath.me/post/element-upload-qiniu#%E5%90%8E%E7%AB%AF">Smallpath的小站</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> element-ui </tag>
            
            <tag> upload </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用acme.sh实现网站https</title>
      <link href="/2018/10/use-acme-website-https/"/>
      <url>/2018/10/use-acme-website-https/</url>
      
        <content type="html"><![CDATA[<h1 id="利用acme-sh实现网站https"><a href="#利用acme-sh实现网站https" class="headerlink" title="利用acme.sh实现网站https"></a>利用acme.sh实现网站https</h1><blockquote><p><strong>acme.sh</strong> 实现了 <code>acme</code> 协议, 可以从 letsencrypt 生成免费的证书, 配置和管理相当方便.</p></blockquote><h2 id="1-安装-acme-sh"><a href="#1-安装-acme-sh" class="headerlink" title="1. 安装 acme.sh"></a>1. 安装 <strong>acme.sh</strong></h2><p>安装很简单, 一条命令搞定:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>sh 文件将 <strong>acme.sh</strong> 安装目录在 <code>~/.acme.sh/</code> 下, 创建 一个 <code>acme.sh=~/.acme.sh/acme.sh</code> 的 alias, 方便你的使用, 再自动为你创建一个 job,  每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.</p><p>** 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code>, 安装不会写入其他文件**</p><h2 id="2-生成证书"><a href="#2-生成证书" class="headerlink" title="2. 生成证书"></a>2. 生成证书</h2><p><strong>acme.sh</strong> 实现了 <strong>acme</strong> 协议支持的所有验证协议, 一般有两种方式验证: http 和 dns 验证.</p><h3 id="2-1-http-方式"><a href="#2-1-http-方式" class="headerlink" title="2-1. http 方式."></a>2-1. http 方式.</h3><p>http 方式也根据使用服务不同为以下几种</p><h4 id="2-1-1-正常-http-验证"><a href="#2-1-1-正常-http-验证" class="headerlink" title="2-1-1. 正常 http 验证"></a>2-1-1. 正常 http 验证</h4><p>只需要指定域名, 并指定域名所在的网站根目录. <strong>acme.sh</strong> 会全自动的生成验证文件, 并放到网站的根目录, 自动完成验证会删除验证文件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  /home/wwwroot/mydomain.com/</span><br></pre></td></tr></table></figure><h4 id="2-1-2-apache服务器验证"><a href="#2-1-2-apache服务器验证" class="headerlink" title="2-1-2. apache服务器验证"></a>2-1-2. <strong>apache</strong>服务器验证</h4><p>如果你用的 <strong>apache</strong>服务器, <strong>acme.sh</strong> 还可以智能的从 <strong>apache</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo acme.sh --issue  -d mydomain.com   --apache</span><br></pre></td></tr></table></figure><h4 id="2-1-3-nginx服务器验证"><a href="#2-1-3-nginx服务器验证" class="headerlink" title="2-1-3. nginx服务器验证"></a>2-1-3. <strong>nginx</strong>服务器验证</h4><p>如果你用的 <strong>nginx</strong>服务器, 或者反代, <strong>acme.sh</strong> 还可以智能的从 <strong>nginx</strong>的配置中自动完成验证, 你不需要指定网站根目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo acme.sh --issue  -d mydomain.com   --nginx</span><br></pre></td></tr></table></figure><p><strong>注意, 无论是 apache 还是 nginx 模式, acme.sh会生成一个 config 文件, 并备份你的 nginx.config, 所以这里一般会用到 sudo, 验证完成acme.sh会自动回复你的 nginx.config</strong></p><h4 id="2-1-4-独立服务模式-–standalone"><a href="#2-1-4-独立服务模式-–standalone" class="headerlink" title="2-1-4.独立服务模式 –standalone"></a>2-1-4.独立服务模式 <strong>–standalone</strong></h4><p>在 <strong>acme.sh</strong> 安装过程中会有一个 warning 提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Tue Nov  7 09:17:19 UTC 2017] It is recommended to install socat first.</span><br><span class="line">[Tue Nov  7 09:17:19 UTC 2017] We use socat for standalone server if you use standalone mode.</span><br><span class="line">[Tue Nov  7 09:17:19 UTC 2017] If you don&#x27;t use standalone mode, just ignore this warning.</span><br></pre></td></tr></table></figure><p><code>-- standalone</code>是用来启动独立服务端的, 也就是你没有任何web 服务, <strong>acme.sh</strong> 可以启动一个webserver, 监听 <strong>80</strong> 端口, 完成验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --standalone -d mydomain.com</span><br></pre></td></tr></table></figure><h3 id="2-2-DNS-方式"><a href="#2-2-DNS-方式" class="headerlink" title="2-2.DNS 方式"></a>2-2.DNS 方式</h3><p>DNS 方式就是在域名上添加一条 txt 解析记录, 验证域名所有权, 分为自动和手动.</p><h4 id="2-2-1-自动-DNS-解析"><a href="#2-2-1-自动-DNS-解析" class="headerlink" title="2-2-1.自动 DNS 解析"></a>2-2-1.自动 DNS 解析</h4><p>DNS 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.</p><p><strong>acme.sh</strong> 目前支持 30 多种解析商的自动集成.</p><p>详细的 api 用法: <a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md">How to use DNS API</a></p><h4 id="2-2-2-手动-DNS-解析"><a href="#2-2-2-手动-DNS-解析" class="headerlink" title="2-2-2.手动 DNS 解析"></a>2-2-2.手动 DNS 解析</h4><p>执行以下命令, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns -d mydomain.com</span><br></pre></td></tr></table></figure><p>等待解析完成之后, 使用<code>--renew</code>命令重新生成证书:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --renew -d mydomain.com</span><br></pre></td></tr></table></figure><h3 id="2-3-多级子域名支持"><a href="#2-3-多级子域名支持" class="headerlink" title="2-3. 多级子域名支持"></a>2-3. 多级子域名支持</h3><p><strong>acme.sh</strong>对于多个域名或子域名的支持相当方便, 在执行命令后加上你所有的域名, 例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_ali -d mydomain.com -d *.mydomain.com</span><br></pre></td></tr></table></figure><h2 id="3-copy-安装-证书"><a href="#3-copy-安装-证书" class="headerlink" title="3. copy/安装 证书"></a>3. copy/安装 证书</h2><p>默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>,  官方不建议直接使用此目录下的文件, 推荐使用 <code>--installcert</code> 命令, 指定目标位置, 然后自己配置目录:</p><h4 id="Apache-example"><a href="#Apache-example" class="headerlink" title="Apache example:"></a>Apache example:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--cert-file      /path/to/certfile/in/apache/cert.pem  \</span><br><span class="line">--key-file       /path/to/keyfile/in/apache/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure><h4 id="Nginx-example"><a href="#Nginx-example" class="headerlink" title="Nginx example:"></a>Nginx example:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure><p>这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.</p><p>详细参数请参考: <a href="https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc">Install the issued cert to Apache/Nginx etc.</a></p><h2 id="4-更新"><a href="#4-更新" class="headerlink" title="4. 更新"></a>4. 更新</h2><h3 id="4-1-证书更新"><a href="#4-1-证书更新" class="headerlink" title="4-1. 证书更新"></a>4-1. 证书更新</h3><p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p><p>如果您想强制更新，执行一下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># RSA</span><br><span class="line">$ acme.sh --renew -d example.com --force</span><br><span class="line"></span><br><span class="line"># ECC</span><br><span class="line">acme.sh --renew -d example.com --force --ecc</span><br></pre></td></tr></table></figure><h3 id="4-2-acme-sh-更新"><a href="#4-2-acme-sh-更新" class="headerlink" title="4-2. acme.sh 更新"></a>4-2. acme.sh 更新</h3><p>升级 acme.sh 到最新版 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure><p>开启自动升级:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure><p>关闭自动更新:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade  --auto-upgrade  0</span><br></pre></td></tr></table></figure><p>更多命令，请在终端执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E">中文说明</a></p><p><a href="https://github.com/Neilpang/acme.sh/wiki">Wiki Home</a></p><p><a href="https://github.com/Neilpang/acme.sh">An ACME Shell script: acme.sh</a></p><p><a href="http://www.racksam.com/2016/12/26/centos-nginx-setup-lets-encrypt-with-acme-sh/">使用acme.sh脚本的DNS API方式申请及更新let’s encrypt证书</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acme.sh </tag>
            
            <tag> https </tag>
            
            <tag> 域名 </tag>
            
            <tag> 证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Docker 运行 MongoDB</title>
      <link href="/2018/09/run-mongoDB-with-docker/"/>
      <url>/2018/09/run-mongoDB-with-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="利用-Docker-运行-MongoDB"><a href="#利用-Docker-运行-MongoDB" class="headerlink" title="利用 Docker 运行 MongoDB"></a>利用 Docker 运行 MongoDB</h1><blockquote><p>在服务器上安装MongoDB很是繁琐，而通过 Docker 运行 MongoDB很是方便，数据迁移也变得更加简单，日常的运维和使用与本地安装基本没有区别。</p></blockquote><h3 id="Docker系列文章"><a href="#Docker系列文章" class="headerlink" title="Docker系列文章"></a>Docker系列文章</h3><p><a href="/2018/05/linux-install-docker-ce.html">Linux 安装 Docker</a><br><a href="/2018/05/build-git-server-using-gogs-docker-image.html">使用Docker Gogs搭建git服务</a><br><a href="/2018/05/run-mongoDB-with-docker.html">利用 Docker 运行 MongoDB</a></p></div><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装docker，参考文章<a href="/2018/05/linux-install-docker-ce.html">Linux 安装 Docker</a></p><h3 id="查找官方镜像"><a href="#查找官方镜像" class="headerlink" title="查找官方镜像"></a>查找官方镜像</h3><p>查找Docker Hub上的 mongo 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sudo docker search mongo</span><br><span class="line">NAME                                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mongo                               MongoDB document databases provide high avai…   4916                [OK]</span><br><span class="line">mongo-express                       Web-based MongoDB admin interface, written w…   288                 [OK]</span><br><span class="line">tutum/mongodb                       MongoDB Docker image – listens <span class="keyword">in</span> port 27017…   224                                     [OK]</span><br><span class="line">mvertes/alpine-mongo                light MongoDB container                         79                                      [OK]</span><br><span class="line">mongoclient/mongoclient             Official docker image <span class="keyword">for</span> Mongoclient, featu…   54                                      [OK]</span><br><span class="line">bitnami/mongodb                     Bitnami MongoDB Docker Image                    46                                      [OK]</span><br><span class="line">frodenas/mongodb                    A Docker Image <span class="keyword">for</span> MongoDB                      17                                      [OK]</span><br><span class="line">mongooseim/mongooseim               Small docker image <span class="keyword">for</span> MongooseIM - robust a…   16</span><br><span class="line">mongooseim/mongooseim-docker        MongooseIM server the latest stable version     11                                      [OK]</span><br><span class="line">cvallance/mongo-k8s-sidecar         Kubernetes side car to setup and maintain a …   8                                       [OK]</span><br><span class="line">centos/mongodb-26-centos7           MongoDB NoSQL database server                   5</span><br><span class="line">centos/mongodb-32-centos7           MongoDB NoSQL database server                   5</span><br><span class="line">istepanov/mongodump                 Docker image with mongodump running as a cro…   5                                       [OK]</span><br><span class="line">eses/mongodb_exporter               mongodb exporter <span class="keyword">for</span> prometheus                 4                                       [OK]</span><br><span class="line">khezen/mongo                        MongoDB Docker image supporting RocksDB stor…   4                                       [OK]</span><br><span class="line">neowaylabs/mongodb-mms-agent        This Docker image with MongoDB Monitoring Ag…   2                                       [OK]</span><br><span class="line">centos/mongodb-36-centos7           MongoDB NoSQL database server                   2</span><br><span class="line">centos/mongodb-34-centos7           MongoDB NoSQL database server                   1</span><br><span class="line">openshift/mongodb-24-centos7        DEPRECATED: A Centos7 based MongoDB v2.4 ima…   1</span><br><span class="line">ekesken/mongo                       docker image <span class="keyword">for</span> mongo that is configurable …   1                                       [OK]</span><br><span class="line">webhippie/mongodb                   Docker images <span class="keyword">for</span> mongodb                       1                                       [OK]</span><br><span class="line">circleci/mongo                      CircleCI images <span class="keyword">for</span> MongoDB                     1                                       [OK]</span><br><span class="line">amd64/mongo                         MongoDB document databases provide high avai…   0</span><br><span class="line">quilt/mongo                         MongoDB container <span class="keyword">for</span> quilt.io                  0                                       [OK]</span><br><span class="line">ansibleplaybookbundle/mongodb-apb   An APB to deploy MongoDB.                       0                                       [OK]</span><br></pre></td></tr></table></figure><p>这里我们拉取官方的最新镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure><p>等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为mongo的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mongo               latest              a41c82c0998a        11 days ago         380MB</span><br></pre></td></tr></table></figure><h3 id="运行-mongo-镜像"><a href="#运行-mongo-镜像" class="headerlink" title="运行 mongo 镜像"></a>运行 mongo 镜像</h3><p><a href="https://hub.docker.com/_/mongo/">mongo镜像官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -v /data/db:/data/db -d mongo --auth</span><br></pre></td></tr></table></figure><p><code>—-name</code> 指定镜像的名字，如果不指定会使用 Docker 镜像 ID。<br><code>-p 27018:27017</code> 官方的 mongo 镜像默认端口是27017，我们将它映射到主机的端口上27018。 27018端口可自定义，但是不能是在使用的接口。<br><code>-v /data/db:/data/db</code> -v 是挂载路径，将 mongo 镜像里的目录挂载到本地目录，mongo 镜像默认目录是/data/db。<br><code>-d</code> 在后台运行。<br><code>—auth</code> 以 auth 模式运行 mongo。</p><p>然后执行一下 docker ps 确认一下库已经正常运行起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID    IMAGE      COMMAND                  CREATED        STATUS        PORTS                      NAMES</span><br><span class="line">20e0be4e4a7e    mongo      <span class="string">&quot;docker-entrypoint.s…&quot;</span>   7 days ago     Up 7 days     0.0.0.0:20188-&gt;27017/tcp   mongo</span><br></pre></td></tr></table></figure><h3 id="连接-mongo-镜像"><a href="#连接-mongo-镜像" class="headerlink" title="连接 mongo 镜像"></a>连接 mongo 镜像</h3><p>使用 <code>docker exec</code> 命令连接 mongo 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo /bin/bash</span><br></pre></td></tr></table></figure><p>更多的请看文档-<a href="http://www.runoob.com/docker/docker-exec-command.html">Docker exec 命令</a></p><h3 id="创建用户和数据库"><a href="#创建用户和数据库" class="headerlink" title="创建用户和数据库"></a>创建用户和数据库</h3><p>1、 切换到admin数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><p>2、创建管理员账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: <span class="string">&#x27;admin&#x27;</span>, <span class="built_in">pwd</span>: <span class="string">&#x27;admin_password&#x27;</span>, roles: [ &#123; role: <span class="string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ] &#125;);</span><br></pre></td></tr></table></figure><p>3、为创建的管理员账户进行授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin_password&quot;</span>);</span><br></pre></td></tr></table></figure><p>4、切换到指定数据库（如不存在会自动创建，默认是没有数据的，执行<code>show dbs</code>并不会显示出来）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>5、创建test库下的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: <span class="string">&#x27;test&#x27;</span>, <span class="built_in">pwd</span>: <span class="string">&#x27;test_password&#x27;</span>, roles: [&#123; role: <span class="string">&quot;readWrite&quot;</span>, db: <span class="string">&quot;test&quot;</span> &#125;] &#125;);</span><br></pre></td></tr></table></figure><h3 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h3><p>shell链接数据库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo 127.0.0.1:27018/<span class="built_in">test</span> -u <span class="built_in">test</span> -p test_password</span><br></pre></td></tr></table></figure><p>标准 URI 连接语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://<span class="built_in">test</span>:test_password@127.0.0.1:27018/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><p><a href="http://www.runoob.com/docker/docker-install-mongodb.html">Docker 安装 MongoDB</a><br><a href="http://www.runoob.com/mongodb/mongodb-connections.html">MongoDB - 连接</a><br><a href="https://hub.docker.com/_/mongo/">mongo镜像官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gogs Docker镜像配置git服务器</title>
      <link href="/2018/09/build-git-server-using-gogs-docker-image/"/>
      <url>/2018/09/build-git-server-using-gogs-docker-image/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Gogs-Docker镜像配置git服务器"><a href="#使用Gogs-Docker镜像配置git服务器" class="headerlink" title="使用Gogs Docker镜像配置git服务器"></a>使用Gogs Docker镜像配置git服务器</h1><blockquote><p>公司刚成立，急需要一台自己的git服务。之前使用Gitlab，不过搭建实在太过麻烦，在网上搜到Gogs有docker镜像，正好前两天学习了Docker，决定使用Docker+Gogs搞一搞。</p></blockquote><h3 id="认识Docker"><a href="#认识Docker" class="headerlink" title="认识Docker"></a>认识Docker</h3><h4 id="简单概括："><a href="#简单概括：" class="headerlink" title="简单概括："></a>简单概括：</h4><p>Docker本身是个虚拟机工具，Docker也是一个镜像管理工具。<br>如果有安装虚拟机的经验的小伙伴可能会比较好理解，Docker的镜像其实就是类似于一个系统盘一样。虚拟机工具还原的是一个完整的系统，一个普通电脑运行2个虚拟系统就会卡成翔。而docker安装在linux上，它借用了linux系统内核，一些底层服务直接用调用linux内核完成，这样子的系统就可以把镜像压缩到足够小（因为只有引用层代码，没有系统底层代码）。而Docker镜像启动之后我们称之为容器，容器相应的无论大小还是内存都比传统虚拟机占优势。这样一个linux系统同时运行几十甚至几百个容器，还受Docker命令的统一管理。<br>所以使用Docker也就必须要熟悉它的命令行工具：<br><a href="http://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全</a></p><h4 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h4><p>查看上篇文章：<a href="/2018/05/linux-install-docker-ce.html">Linux 安装 Docker</a></p><h3 id="认识-Gogs"><a href="#认识-Gogs" class="headerlink" title="认识 Gogs"></a>认识 Gogs</h3><p>Gogs标榜：易安装、跨平台、轻量级。最最重要的是它开源。<br>Gogs介绍（官网）：<a href="https://gogs.io/">https://gogs.io/</a></p><h3 id="安装Gogs"><a href="#安装Gogs" class="headerlink" title="安装Gogs"></a>安装Gogs</h3><p>使用<code>docker pull</code>把镜像下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gogs/gogs</span><br></pre></td></tr></table></figure><h3 id="启动Gogs容器"><a href="#启动Gogs容器" class="headerlink" title="启动Gogs容器"></a>启动Gogs容器</h3><p>Docker本身使用了linux内核，所以一些linux的特性他也是具备的，比如挂载磁盘。<br>Docker在常见一个容器服务时使用的是<code>docker run</code>命令，它的options就提供了一个 <code>-v | -volume</code> 的参数，就是用来挂在磁盘。<br>这个有什么用呢，简单讲，你用Gogs镜像创建了一个容器，Gogs的数据都是存放在默认的data目录下，当我们那天升级或误删容器之后，我们的数据就无法找回了。<br>而 <code>-v | -volume</code> 这个命令就可以将容器中的 <code>data</code> 目录挂载到linux主机上的其他任意目录，这样子就可以保证升级、误删、数据迁移我的数据都不会变。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=gogs -p 10022:22 -p 10080:3000 -v /data/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure><p>这里还要注意：<br><code>--name</code>：是用来给容器做别名了，理论上每个容器都有一个CONTAINER ID，这个是hash值，太长不好记，所以用哥别名。<br><code>-p</code>：是映射端口，10022映射的是容器中的22端口 10080映射的是容器中的3000端口，我们配置gogs的时候会用到他们</p><h3 id="启动-Gogs"><a href="#启动-Gogs" class="headerlink" title="启动 Gogs"></a>启动 Gogs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker start gogs</span><br><span class="line">docker ps</span><br><span class="line">docker ps //查看启动状态</span><br></pre></td></tr></table></figure><h3 id="访问Gogs进行配置"><a href="#访问Gogs进行配置" class="headerlink" title="访问Gogs进行配置"></a>访问Gogs进行配置</h3><p>默认地址是： http://${ip}:10080<br>使用阿里云的小伙伴注意：阿里云需要在安全组规则配置入站规则，即服务器端口10080， ssh端口10022</p><h5 id="数据库配置："><a href="#数据库配置：" class="headerlink" title="数据库配置："></a>数据库配置：</h5><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/b4cde507db8c7703aa92ae93493b977b.jpg" alt="图片"></p><h5 id="ssh与http配置："><a href="#ssh与http配置：" class="headerlink" title="ssh与http配置："></a>ssh与http配置：</h5><p><img src="http://aliyunzixunbucket.oss-cn-beijing.aliyuncs.com/jpg/8ef500f6bdf5cbfc49125c2c3842c167.jpg" alt="图片"></p><p>配置成功之后，自动登陆，就可以创建自己的私有仓库了！</p><h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><p><a href="https://www.aliyun.com/jiaocheng/120285.html?spm=5176.100033.0.0.jZ1hRY">阿里云图文教程（本次搭建参考此教程）</a><br><a href="https://www.cnblogs.com/donaldtdz/p/8443516.html">阿里云Linux CentOS 7 Docker部署使用gogs搭建自己的git服务器</a><br><a href="https://gogs.io/docs">Gogs使用文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Gogs </tag>
            
            <tag> git </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 Docker</title>
      <link href="/2018/09/linux-install-docker-ce/"/>
      <url>/2018/09/linux-install-docker-ce/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-安装-Docker"><a href="#Linux-安装-Docker" class="headerlink" title="Linux 安装 Docker"></a>Linux 安装 Docker</h1><blockquote><p>很早就听说了docker，以前一直把docker理解为单纯的虚拟机，最近在部署服务的时候深入了解了下docker，决定写一个系列文章作为学习记录。</p></blockquote><h2 id="debain如何安装docker"><a href="#debain如何安装docker" class="headerlink" title="debain如何安装docker"></a>debain如何安装docker</h2><p>一如既往的使用debain + apt-get方式安装docker，这样做安装方便，容易升级，并随时跟进最新版本，也方便版本回滚。</p><h3 id="安装软件包让apt支持HTTPS"><a href="#安装软件包让apt支持HTTPS" class="headerlink" title="安装软件包让apt支持HTTPS"></a>安装软件包让apt支持HTTPS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br></pre></td></tr></table></figure><h3 id="添加docker官方GPG-KEY"><a href="#添加docker官方GPG-KEY" class="headerlink" title="添加docker官方GPG KEY"></a>添加docker官方GPG KEY</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// $(. /etc/os-release;<span class="built_in">echo</span><span class="string">&quot;<span class="variable">$ID</span>&quot;</span>) 获取Linux发行版本</span><br><span class="line">curl -fsSL https://download.docker.com/linux/$(. /etc/os-release;<span class="built_in">echo</span><span class="string">&quot;<span class="variable">$ID</span>&quot;</span>)/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><h3 id="指纹验证"><a href="#指纹验证" class="headerlink" title="指纹验证"></a>指纹验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 这里是Debian 9.0</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure><p>是否输出：<code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code></p><h3 id="添加apt镜像仓库"><a href="#添加apt镜像仓库" class="headerlink" title="添加apt镜像仓库"></a>添加apt镜像仓库</h3><h4 id="x86-64"><a href="#x86-64" class="headerlink" title="x86_64:"></a>x86_64:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \ <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/<span class="subst">$(. /etc/os-release;echo<span class="string">&quot;<span class="variable">$ID</span>&quot;</span>)</span> \ <span class="subst">$(lsb_release -cs)</span> \ stable&quot;</span></span><br></pre></td></tr></table></figure><h4 id="armhf"><a href="#armhf" class="headerlink" title="armhf:"></a>armhf:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=armhf] https://download.docker.com/linux/<span class="subst">$(. /etc/os-release;echo<span class="string">&quot;<span class="variable">$ID</span>&quot;</span>)</span>\ <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | \</span><br><span class="line">sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><h3 id="安装docker-CE"><a href="#安装docker-CE" class="headerlink" title="安装docker CE"></a>安装docker CE</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h4 id="Docker-从-17-03版本之后分为-CE（Community-Edition）-和-EE（Enterprise-Edition））"><a href="#Docker-从-17-03版本之后分为-CE（Community-Edition）-和-EE（Enterprise-Edition））" class="headerlink" title="Docker 从 17.03版本之后分为 CE（Community Edition） 和 EE（Enterprise Edition））"></a>Docker 从 17.03版本之后分为 CE（Community Edition） 和 EE（Enterprise Edition））</h4><p>Docker以后会以CE（Community Edition）和EE（Enterprise Edition）的形式发布。其中，CE版本每个月发布一次，也就是说，随后的版本就是17.03、17.04、17.05等，而EE的版本是没三个月发布一次，对应的就是17.03、17.06等。对于发布的每个EE版本，Docker官网都会提供一年的技术支持。 </p><h2 id="contentOS-如何安装docker"><a href="#contentOS-如何安装docker" class="headerlink" title="contentOS 如何安装docker"></a>contentOS 如何安装docker</h2><p>因为最新的代码部署到了content os服务器上，所以这里也提供了yum的安装步骤。</p><h3 id="yum-默认源安装"><a href="#yum-默认源安装" class="headerlink" title="yum 默认源安装"></a>yum 默认源安装</h3><p>Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，版本是1.13.1，不是最新版本。安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-io</span><br></pre></td></tr></table></figure><h3 id="docker官方推荐安装"><a href="#docker官方推荐安装" class="headerlink" title="docker官方推荐安装"></a>docker官方推荐安装</h3><p>使用官方推荐安装方式可以更新到最新docker版本</p><h4 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本:"></a>卸载老版本:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-selinux \</span><br><span class="line">                docker-engine-selinux \</span><br><span class="line">                docker-engine</span><br></pre></td></tr></table></figure><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p><code>yum-utils</code>提供<code>yum-config-manager</code>实用程序，devicemapper-storage-driver驱动程序需要<code>device-mapper-persistent-data</code>和<code>lvm2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">                    device-mapper-persistent-data \</span><br><span class="line">                    lvm2</span><br></pre></td></tr></table></figure><h4 id="更新docker稳定版本库"><a href="#更新docker稳定版本库" class="headerlink" title="更新docker稳定版本库"></a>更新docker稳定版本库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="也可以开启或关闭最新测试版"><a href="#也可以开启或关闭最新测试版" class="headerlink" title="也可以开启或关闭最新测试版"></a>也可以开启或关闭最新测试版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启最新测试版本库</span></span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br><span class="line"><span class="comment"># 关闭最新测试版本库</span></span><br><span class="line">sudo yum-config-manager --<span class="built_in">disable</span> docker-ce-test</span><br></pre></td></tr></table></figure><h4 id="安装最新版本的Docker-CE"><a href="#安装最新版本的Docker-CE" class="headerlink" title="安装最新版本的Docker CE"></a>安装最新版本的Docker CE</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈一谈P2P和贫富差距</title>
      <link href="/2018/08/talk-p2p/"/>
      <url>/2018/08/talk-p2p/</url>
      
        <content type="html"><![CDATA[<h1 id="谈一谈P2P和贫富差距"><a href="#谈一谈P2P和贫富差距" class="headerlink" title="谈一谈P2P和贫富差距"></a>谈一谈P2P和贫富差距</h1><blockquote><p>吃一堑，长一智，今年雷了三个平台，也写下最近的感触吧。</p></blockquote><h2 id="先来谈一篇文章"><a href="#先来谈一篇文章" class="headerlink" title="先来谈一篇文章"></a>先来谈一篇文章</h2><p>谈之前先聊下今天看的一篇文章《中国高中的等级分化，比大学严重多了》，这篇文章是虎嗅推荐的，从文章的开头就能知道大概思想</p><blockquote><p>在县城中学，很多人高中一毕业就出去打工。在省城国际高中，有的学生从小到大没坐过地铁，不是因为穷。</p></blockquote><p>整体文章无非是批判贫富差距加大，教育不平，等级分化严重。<br>不过文章比较有意思的是不直接批判，只是举了一些学校的例子。</p><ul><li>很多同学，高中毕业就去打工——欧安，广西桂北某县城中学</li><li>在广东小县城，小升初就是小高考——张家明，粤西某县级市第一中学</li><li>如果再选一次，我还会来这里——筱琪，安徽六安，毛坦厂中学</li><li>所有的市一中，都和我们差不多吧——曹吉利，山西某地级市一中</li><li>母校教会我们要做一个闪闪发光的人——长风，广州，广东实验中学</li></ul><p>从作者的举例就可以看出端倪，让贫困县的中学和一线大城市的贵族学校坐对比，展示贫富差距如此之大的立场。这篇文章其实和17年那篇《北京，有2000万人在假装生活》有异曲同工之妙，看似忧国忧民，批判贫富差距。除了真正带给读者的只有读过之后的震撼，带动大家仇富的心理，还能带来什么呢？</p><p>还能带来的必然是10w+不会跑了，在国家去杠杆，美国关税制压，P2P爆雷，股市波动不断，虚拟币也持续低迷的这个时间点发这种文章，作者心机很深了。</p><h2 id="闲扯下我对贫富差距的看法"><a href="#闲扯下我对贫富差距的看法" class="headerlink" title="闲扯下我对贫富差距的看法"></a>闲扯下我对贫富差距的看法</h2><p>上面文章不能给读者一个正能量的输出，我在这里就给一个。</p><p>其实个人的贫富有时候跟公司挺相似的，在资本市场上，一个创业公司（比如今日头条），如果每年保持超高的增长率，好多风投机构机构都会看好他，并花重资投资他，而他自己也知道和大公司的差距在哪，会不断创新，最终也会上市并有可能成为巨头。而巨头和一些上市公司呢，因为体量大，思维僵化，最终会因创新不足而增加乏力，不断的被新公司超越（百度，eBay），甚至是取代（四通利方，雅虎）。很多大公司拥有更多的资金，人才和人脉资源。但是这些对于创业公司而言并不是不可战胜的。如果资本市场大环境能够一直健康发展，在我看来创业公司反而容易获得发展。</p><p>与此相同，人也会因为地域，地方经济，资源配比不合理都是造成贫富分化。穷人可以看作是创业公司，富人就是些巨头或者上市公司。贫富的差距并不是决定了一切的。人的价值和公司很像，就是不断的努力提高自己，获得更多的认可。如果我们认识到自己在这个社会的价值，不断提高和完善自己，让自己有更多议价能力，我们的成功并不是不可完成的，甚至可以逆袭。</p><p>但是对于整个大环境而言，地域，地方经济，资源配比这些我们吃瓜群众能改变的并不多，就如同现在的经济环境一样，比如P2P。</p><h2 id="聊聊P2P吧"><a href="#聊聊P2P吧" class="headerlink" title="聊聊P2P吧"></a>聊聊P2P吧</h2><blockquote><p>网贷之家数据显示，整个6月，出现问题的平台数量达到80家，其中问题平台63家，停业平台17家。7月以来行业风险继续发酵，截至7月22日，已经又出现了99家问题平台，其中82家提现困难、跑路14家、经侦介入3家。</p></blockquote><p>最近投资3家P2P，全部都提现困难了，说起主因还是太过贪婪。不过，这事吧后悔也没啥用，现在想来还不如趁这个机会多学点东西。<br>就最近几天情况来看，我也简单总结下P2P这几天疯狂爆雷的原因吧：</p><ul><li>国家加大去杠杆力度：导致今年货币增速放缓，银行放贷困难，并且大部分贷款都给了国企，民营企业更是雪上加霜。因为民营企业贷款困难，只能使用利率更高的P2P贷款。</li><li>楼市限购：二三线城市持续限购，在限购期之前，出现大规模摇号验资购房情况，吸走了大部分市场资金。仅杭州限购，在6月21日这一天高峰期，涉及的资金约为727.06亿元。摇号验资所需的资金来源有相当一部分来自P2P。</li><li>信用债违约：2018年中国信用债市场有近30只个券公告违约，在数量上较上年略减，但呈现同一发行人多期债券连续违约，且多数有国有背景等特点。出现违约较多的发行主体包括中国城市建设控股集团、大连机床集团和东北特殊钢集团等。而有相当一部分P2P平台爸债券作为了资产配置，7月份的连环爆雷，跟信用债违约有很大关系。</li></ul><h2 id="个人阴谋论下，希望不是如我所想："><a href="#个人阴谋论下，希望不是如我所想：" class="headerlink" title="个人阴谋论下，希望不是如我所想："></a>个人阴谋论下，希望不是如我所想：</h2><p>现在整个市场的大环境相当不好，最根本原因还是过去30年造成的杠杆引发的。</p><p>去杠杆之下有恰逢中美贸易战，美国恨不得趁你病要你命，国家必须要加大力度去杠杆以防止引发大规模经济危机。而地方债务是这次去杠杆的主力。地方政府因为货币增速放缓，国家房价管控不能大规模卖地来换取资金，仅靠税收很难承担如此高的债务。最近很多地方集团紧跟着就出现债务违约。</p><p>现在最担心的就是，地方政府任由地方企业违约或者破产，企业吸纳的资金优先偿还地方性银行贷款，以完成去杠杆任务。而这些债务违约涉及到P2P和民众的资金，则会出兑付方案，不过也会展期了。相当于将债务过度给普通老百姓。</p><p>理想情况下是，地方政府完成去杠杠任务，国家可以放水放出更多资金，地方政府再贷款给企业偿还贷款和破产重组，企业尝还老百姓贷款。地方GDP发展，国内经济稳中有升。不理想的情况是，贸易站持续，国外空头持续做空，造成中小企业大面积倒闭，地方债务违约越来越多，老百姓持续维权，国内国外一团糟。</p><p>现在从国家公布上半年数据看，应该还算是理想情况，但是中美贸易站实在是个定时炸弹。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cn.reuters.com/article/%E8%83%8C%E6%99%AF%E8%B5%84%E6%96%99%EF%BC%9A2018%E5%B9%B4%E4%B8%AD%E5%9B%BD%E4%BF%A1%E7%94%A8%E5%80%BA%E8%BF%9D%E7%BA%A6%E4%B8%80%E8%A7%88-idCNL4S1UX1IV">2018年中国信用债违约一览(2018-08-05)</a></li><li><a href="http://www.xinhuanet.com/finance/2018-07/18/c_129915158.htm">2018上半年GDP增长6.8%</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 微信双开、撤回拦截</title>
      <link href="/2018/08/mac-os-wechat/"/>
      <url>/2018/08/mac-os-wechat/</url>
      
        <content type="html"><![CDATA[<h1 id="macOS-微信双开、撤回拦截"><a href="#macOS-微信双开、撤回拦截" class="headerlink" title="macOS 微信双开、撤回拦截"></a>macOS 微信双开、撤回拦截</h1><blockquote><p>我门都知道安卓手机 root 后可以双开微信、撤回拦截微信消息这些功能，今天这些功能也被移植到 mac 上来了。</p></blockquote><h2 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h2><p><strong>WeChatTweak</strong>不仅可以拦截微信消息，双开微信，还能够免手机认证登录，真是方便的一逼。<br><img src="/static/img/mac-os-wechat/WX20180801-111352@2x.png" alt="WX20180801-111352@2x"></p><p><strong>WeChatTweak</strong>亲测，macOS 10.14 Mojave系统可以正常使用。</p><p>提供技术的大神是： <a href="https://github.com/Sunnyyoung">sunnyyoung</a></p><blockquote><p>iOS/macOS 开发者、开源爱好者、业余逆向开发，正在学习前/后端开发，走往全栈目标的路上。</p></blockquote><p>大神的反编译技术相当厉害，ios er 可以多看看他的blog <a href="https://blog.sunnyyoung.net/">「Sunnyyoung’s Blog」</a><br>项目地址：<a href="https://github.com/Sunnyyoung/WeChatTweak-macOS">WeChatTweak-macOS</a><br>还有个QQ的兄弟项目：<a href="https://github.com/Sunnyyoung/QQTweak-macOS">QQTweak-macOS</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1、通过git命令安装"><a href="#1、通过git命令安装" class="headerlink" title="1、通过git命令安装"></a>1、通过git命令安装</h3><p>打开终端窗口，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Sunnyyoung/WeChatTweak-macOS.git \</span><br><span class="line">  &amp;&amp; <span class="built_in">cd</span> WeChatTweak-macOS \</span><br><span class="line">  &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>结果提示 Install successfully! 则安装成功！</p><h3 id="2、下载zip包安装"><a href="#2、下载zip包安装" class="headerlink" title="2、下载zip包安装"></a>2、下载zip包安装</h3><p>直接点击下载 zip 文件：<br><img src="https://camo.githubusercontent.com/921744c74963771cefaa9d0020b9897963134079/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30392f30322f353961613864666365333434622e706e67" alt="下载zip"><br>解压到当前指定文件夹，我是解压到<code>~/Downloads/</code>目录下，然后执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads/WeChatTweak-macOS \</span><br><span class="line">    &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>结果提示 Install successfully! 则安装成功！</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>进入项目文件夹，然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure><p>即可卸载成功</p><h2 id="微信-macOS-客户端支持-Alfred"><a href="#微信-macOS-客户端支持-Alfred" class="headerlink" title="微信 macOS 客户端支持 Alfred"></a>微信 macOS 客户端支持 Alfred</h2><h3 id="WeChat-alfredworkflow"><a href="#WeChat-alfredworkflow" class="headerlink" title="WeChat.alfredworkflow"></a>WeChat.alfredworkflow</h3><p>Alfred 作为 macOS 平台上的效率神器，能够提升效率与体验， <a href="https://github.com/Sunnyyoung">sunnyyoung</a> 大神也写了一个 <a href="https://github.com/Sunnyyoung/WeChatTweak-macOS/blob/master/WeChat.alfredworkflow">WeChat.alfredworkflow</a>。  </p><blockquote><p>通过 Alfred 模糊搜索联系人并快速跳转到对应聊天界面</p></blockquote><p>使用命令打开项目中的 WeChat.alfredworkflow 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open WeChatTweak-macOS/WeChat.alfredworkflow</span><br></pre></td></tr></table></figure><p>将 WeChat.alfredworkflow 添加到 Alfred</p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/static/img/mac-os-wechat/WX20180801-102554@2x.png" alt="WX20180801-102554@2x"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 微信 </tag>
            
            <tag> 防撤回 </tag>
            
            <tag> 双开 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级到最新的macOS Mojave</title>
      <link href="/2018/07/mac-os-mojave/"/>
      <url>/2018/07/mac-os-mojave/</url>
      
        <content type="html"><![CDATA[<h1 id="升级到最新的macOS-Mojave"><a href="#升级到最新的macOS-Mojave" class="headerlink" title="升级到最新的macOS Mojave"></a>升级到最新的macOS Mojave</h1><blockquote><p>macOS Mojave已经放出 beta 版好久了，在 v2ex 上看到好多帖子都说基本稳定，我也试着升级到了 Mac os Mojave 10.14 beta2，在这里吐槽下 Mojave。</p></blockquote><h3 id="设备：MacBook-Pro-Retina-13-inch-Early-2015"><a href="#设备：MacBook-Pro-Retina-13-inch-Early-2015" class="headerlink" title="设备：MacBook Pro (Retina, 13-inch, Early 2015)"></a>设备：MacBook Pro (Retina, 13-inch, Early 2015)</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>macOS Mojave 的公测版是6月27号放出，所有注册参与<a href="https://beta.apple.com/sp/zh/betaprogram/">「Apple Beta 版软件计划」</a>的用户都可以升级。<br><strong>升级之前 强烈建议 先做备份</strong></p><ul><li>先进去官网-<a href="https://beta.apple.com/sp/zh/betaprogram/">Apple Beta 版软件计划</a>， 点击「注册」按钮，申请账号</li><li>账号注册好之后，访问并<a href="https://beta.apple.com/sp/zh/betaprogram/redemption?locale=zh#macos">注册您的设备</a></li><li>点击「下载 macOS Public Beta 版访问使用工具」按钮<br><img src="https://cdn.sspai.com/minja/2018-06-27-Screenshot%202018-06-27%20at%209.03.42%20AM-fs8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></li><li>打开刚刚下载的 dmg 镜像，打开其中的 pkg 文件，按照提示安装描述文件；<br><img src="https://cdn.sspai.com/minja/2018-06-27-Screenshot%202018-06-27%20at%209.05.29%20AM.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></li><li>软件会自动打开 App Store 并切换到 macOS Mojave 的下载页面，点击下载按钮即可下载安装文件。（具体时间就看下载速度了）</li><li>下载完成重启并安装即可。（我的mac安装Mojave，系统显示时间是42分钟，实际用时1小时左右）</li></ul><h3 id="Mojave带来的新功能："><a href="#Mojave带来的新功能：" class="headerlink" title="Mojave带来的新功能："></a>Mojave带来的新功能：</h3><h4 id="Mojave支持暗黑模式"><a href="#Mojave支持暗黑模式" class="headerlink" title="Mojave支持暗黑模式"></a>Mojave支持暗黑模式</h4><p>这也是我愿意升级Mojave最大的理由，官方介绍上讲Mojave支持黑暗模式的Xcode。当我看到暗黑的Xcode时，已经确定了眼神，虽然我并不是ios开发者。暗黑模式对程序员来说吸引力太大了。（捂脸，主要是我）<br>实际体验上 Finder，App Store 这些自带软件都支持了暗黑模式，整体使用下来，感觉苹果这次beta版本很有诚意，系统整体对暗黑模式支持的相当好。不过因为还是beta版，第三方软件很少有支持暗黑模式，这样就造成使用Chrome的时候感觉怪怪的。总体看还是比较舒服了，但是因为第三方的支持问题，并没有太惊艳的感觉。</p><h4 id="动态桌面支持"><a href="#动态桌面支持" class="headerlink" title="动态桌面支持"></a>动态桌面支持</h4><p>这个功能还是比较惊艳的，桌面阴影随着时间改变不断变换，很是神奇。目前动态桌面只有两款壁纸支持，这么炫酷的动态桌面，以后动态壁纸的需求会非常大，看网上有说，这或许是下一个风口，哈哈，不知道能不能成功（祝他好运）</p><h4 id="锁屏界面"><a href="#锁屏界面" class="headerlink" title="锁屏界面"></a>锁屏界面</h4><p>锁屏界面不再是毛玻璃了，最开始有点不太适应，使用一段时间后，还是不太适应（捂脸）<br>时间也会根据当前时间的不断的变换位置，位置跟时钟一样，几点就在几点钟方向。最开始用 Mojave，看到时间不再正中间，跑偏掉了，还以为是bug（捂脸）</p><h4 id="桌面堆栈"><a href="#桌面堆栈" class="headerlink" title="桌面堆栈"></a>桌面堆栈</h4><p>说实在的，我本人有轻微强迫症，所有的临时文件都会归类到文件夹中，桌面一直保持的很干净，所以桌面堆栈并未亲身体验到快捷（捂脸）</p><h4 id="系统自带应用的更新"><a href="#系统自带应用的更新" class="headerlink" title="系统自带应用的更新"></a>系统自带应用的更新</h4><ul><li>Finder：Mojave 的整体 UI 在日常使用上无法感知到有太大变化。只有Finder的 UI 细节优化了不少，看着更加立体和丰富，另外苹果对 Finder 的功能也进行了补强，经典的 CoverFlow 被 Gallery View（幻灯片模式）所取代，而且右边栏可以查看文件的 Metadata 元数据了，图片的简单操作被提到了一级窗口，你可以对图片进行旋转，标记等操作。</li><li>App Store：界面进行了重新设计，新版 App Store 将顶部 tab 布局改成了左侧 menu 布局，视觉上更加清晰，使用上也更加高效了。并且这次 macOS App Store 支持中文了（鼓掌）</li><li>FaceTime：苹果号称支持最多 32 人的视频群聊，可以通过 Mac, iPhone, iPad, Apple Watch 不同的平台终端进行同步的视频聊天，但是实际体验上对杂音过滤不够，音质优化也不太好，槽点比较多。不过毕竟是beta版，应该还有优化空间（摊手）</li><li>截屏功能：增加了类似 ios 11 的快速编辑功能，截图之后缩略图会在右下角停留，方便点击二次编辑。</li><li>快速查看：开放更多操作权限。可以对文件进行简单的编辑操作，比如图片（包括 PDF）的剪裁，标记，旋转操作，对音频、视频文件的长度剪切操作。（鼓掌）</li><li>增加了更多对ios应用，Apple News、语音备忘录、股票、家庭。根据报道，苹果计划让 macOS 系统兼容 iOS 应用，如果真是这样的话，那么会促使更多的 iOS 应用去适配 macOS 平台。（这是要一同所有平台呀）</li><li>输入发进行了升级，ui感觉更漂亮，选词也更加顺畅。不过输入汉字的时候经常会没反应，切换到英文模式再切回来就又好了。目前10.14 Beta (18A336e)还没解决</li></ul><h4 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h4><p>Mojave 使用上的一点问题：</p><ul><li>Alfred 因为权限问题，无法直接访问剪切板了，并且开机的时候会问好几次是否访问通讯录权限，google了一下，是 Mojave 对隐私和安全做了加强。</li><li>Chrome 每次点击新 tab，随便输入内容就会自动打开已关闭标签，也 google 了一下，暂时还不能确定是 Chrome 问题还是 Mojave 问题。</li><li>网上反应最多的”开关静音的时候显示条会掉牙”和”已打开的软件图标丢失”我并没有遇到，应该是最新版修复了。</li></ul><p>总体来看，Mojave 使用体验很顺，有部分小bug也不影响正常使用，想体验最新版本或是对黑暗模式感兴趣的，可以升级体验。<br>升级前做好备份，如果你觉得测试版无法保证日常的生活、工作需要，稳定性差，可以用 Time Machine 降级回老版本。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 系统 </tag>
            
            <tag> 电脑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解钉钉打卡</title>
      <link href="/2018/05/crack-dingding-punch/"/>
      <url>/2018/05/crack-dingding-punch/</url>
      
        <content type="html"><![CDATA[<h1 id="破解钉钉打卡"><a href="#破解钉钉打卡" class="headerlink" title="破解钉钉打卡"></a>破解钉钉打卡</h1><blockquote><p>本文利用Xcode模拟定位，随时随地打卡，只适用于ios系统。</p></blockquote><h3 id="需要解密坐标"><a href="#需要解密坐标" class="headerlink" title="需要解密坐标"></a>需要解密坐标</h3><p>这里普及一下坐标系统：<br>目前我们经常接触是<strong>原始坐标</strong>，<strong>火星坐标</strong>，<strong>二次加密坐标</strong>。</p><ul><li>原始坐标：手机上获取到的是原始的GPS坐标 —— <strong>WGS-84</strong>。</li><li>火星坐标：我大天朝自己加了飘逸搞的一套加密坐标，中国国测局（和GFW一样的傻屌组织）—— <strong>GCJ-02</strong>：<strong>谷歌</strong>、<strong>高德</strong>。</li><li>百度加密坐标：在火星坐标的基础上再次飘逸后的加密坐标 —— <strong>BD-09</strong>：<strong>百度</strong>。<br>这里我们需要将 <strong>GCJ-02</strong> 和 <strong>BD-09</strong> 转换成 <strong>WGS-84</strong><br>网上有模拟算法，但是不能保证100%精准-<a href="https://github.com/googollee/eviltransform.git">eviltransform算法</a>。</li></ul><h3 id="获取坐标"><a href="#获取坐标" class="headerlink" title="获取坐标"></a>获取坐标</h3><p>坐标获取入口：</p><ul><li><a href="http://lbs.amap.com/console/show/picker">高德</a></li><li><a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">百度</a></li></ul><p>首先，根据各自的喜好，选好你想要模拟的位置，这里以高德地图<strong>望京soho</strong>原始坐标为例：</p><ul><li><p>高德地图上望京soho的<strong>GCJ-02</strong>坐标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">116.48105,39.996794</span><br></pre></td></tr></table></figure></li><li><p>我们使用最新<a href="https://github.com/googollee/eviltransform/tree/master/javascript#gcjtowgsgcj2wgs">eviltransform.gcj2wgs</a>方法转换出所需要的<strong>WGS-84</strong>坐标。（百度地图使用<a href="https://github.com/googollee/eviltransform/tree/master/javascript#%E7%99%BE%E5%BA%A6bd-09">eviltransform.bd2wgs</a>方法）</p></li><li><p>解密后的<strong>WGS-84</strong>坐标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">116.47496089091223,39.995513178011876</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>clone项目 <a href="https://github.com/div-wang/simulate-location">simulate-location</a></p><h4 id="项目里新建gpx文件"><a href="#项目里新建gpx文件" class="headerlink" title="项目里新建gpx文件"></a>项目里新建gpx文件</h4><p>这里我们需要新建一个 <strong>gpx</strong> 文件，也可以用项目目前默认的，包含坐标用于模拟定位。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gpx</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">creator</span>=<span class="string">&quot;GMapToGPX 6.4j - http://www.elsewhere.org/GMapToGPX/&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.topografix.com/GPX/1/1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wpt</span> <span class="attr">lat</span>=<span class="string">&quot;39.995513178011876&quot;</span> <span class="attr">lon</span>=<span class="string">&quot;116.47496089091223&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wpt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gpx</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把转换得到的 <strong>GCJ-02</strong> 坐标对应到 <strong>lat</strong> 和 <strong>lon</strong> 里面即可。</p><h4 id="真机运行"><a href="#真机运行" class="headerlink" title="真机运行"></a>真机运行</h4><ul><li>xcode真机运行项目，在<code>run</code>起来之后，点击<code>debug &gt; simulate location &gt; soho</code>就切换到该坐标定位了。</li><li>或者点击控制台定位图标：<br><img src="https://raw.githubusercontent.com/div-wang/simulate-location/master/png/001.jpg" alt="图片"></li></ul><h4 id="随时随地打卡"><a href="#随时随地打卡" class="headerlink" title="随时随地打卡"></a>随时随地打卡</h4><ul><li>这个时候千万别点<strong>Stop</strong>，<strong>Home</strong>键后台，然后直接拔掉数据线即可（猜测是Xcode开发者模式开了个进程来模拟定位，如果Xcode上没有Stop，那这个进程就不会Kill掉）。</li><li>亲测模拟定位是有时效的，一般是2-4天，超过了再重新<code>run</code>一遍就可以了。</li></ul><h4 id="还原定位"><a href="#还原定位" class="headerlink" title="还原定位"></a>还原定位</h4><ul><li>恢复方法最直接的是重启手机还原定位。</li><li>也可以用xcode再<code>run</code>一次，然后直接 <strong>Stop</strong> 即可。</li></ul><h3 id="破解钉钉WiFi打卡"><a href="#破解钉钉WiFi打卡" class="headerlink" title="破解钉钉WiFi打卡"></a>破解钉钉WiFi打卡</h3><p>如果公司只配置校验了SSID，没有校验DHCP地址，把家里的WiFi名称改得和公司打卡的WiFi即可。<br>公司如果启动了DHCP校验，需要把手机的IP地址配置的和公司的一样，一般是： <code>192.168.1.*</code>。<br>获取方法: <code>设置 &gt; 无线局域网 &gt; 链接的wifi名 &gt; ip地址</code></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 虚拟定位 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 钉钉 </tag>
            
            <tag> 打卡 </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Array 常用操作</title>
      <link href="/2018/05/javascript-array-operating/"/>
      <url>/2018/05/javascript-array-operating/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-Array-常用操作"><a href="#JavaScript-Array-常用操作" class="headerlink" title="JavaScript Array 常用操作"></a>JavaScript Array 常用操作</h1><blockquote><p>基本数组的常用操作，做个备份。</p></blockquote><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>在JavaScript中，数组以 Array 为构造函数，是一个高阶的类似有序列表的数据类型。</p><h2 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">//建议使用［］声明数组对象;</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>); <span class="comment">//new个数组对象，length是5</span></span><br></pre></td></tr></table></figure><h5 id="元素列"><a href="#元素列" class="headerlink" title="元素列"></a>元素列</h5><p>向 Array 构造函数传递以 ”,“ 分号分割的一组数据（即元素列）时，将返回一个以这些数据为数组元素的数组对象（当元素列仅有一个数据且为数值时除外，这是接下来要说的内容）。数据的个数为元素个数，即数组长度。</p><h5 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h5><p>向 Array 构造函数传递一个在 0 到 232-1 之间的整数，将返回一个以此为长度的数组对象。通过length属性可以访问这个值。如果传入的参数不是有效的数值，则抛出RangeError异常。如果传入的参数不是数值，则创建一个长度为1的数组，传入的参数即为数组的第一个元素。</p><h5 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h5><p>每个元素列会有个单独的Length索引值，JavaScript 数组的索引值（index）从0开始，即数组第一个元素的索引值为0。最后一个元素的索引值等于该数组的长度减1（Array.length -1）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length-<span class="number">1</span>]) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="gt-方法"><a href="#gt-方法" class="headerlink" title="&gt;方法"></a>&gt;方法</h2><h4 id="Mutator-方法"><a href="#Mutator-方法" class="headerlink" title="Mutator 方法"></a>Mutator 方法</h4><p>这些方法可以改变数组自身:</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p>移除数组的最后一个元素，返回值是被删除的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.pop()</span><br></pre></td></tr></table></figure><h6 id="javascript-代码示例："><a href="#javascript-代码示例：" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>在数组的末尾添加一个或者多个元素，返回值是新的数组的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.push(element1, element2, ..., elementN)</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>必需。向数组添加的第一个元素。</td></tr><tr><td>arguments[1]</td><td>可选。向数组添加的第二个元素。</td></tr><tr><td>arguments[n]</td><td>可选。可添加若干个元素</td></tr></tbody></table><h6 id="javascript-代码示例：-1"><a href="#javascript-代码示例：-1" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.push(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [2, 3, 4, 0]</span></span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个，也就是数组的索引发生了变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.reverse()</span><br></pre></td></tr></table></figure><h6 id="javascript-代码示例：-2"><a href="#javascript-代码示例：-2" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p>删除数组的第一个元素，返回值是删除的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.shift()</span><br></pre></td></tr></table></figure><h6 id="javascript-代码示例：-3"><a href="#javascript-代码示例：-3" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [3, 4]</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>对数组中的元素进行排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.sort()</span><br></pre></td></tr></table></figure><h6 id="javascript-代码示例：-4"><a href="#javascript-代码示例：-4" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">99</span>, <span class="number">67</span>, <span class="number">100</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [0, 1, 100, 11, 67, 99]</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>添加或删除数组中的一个或多个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.splice(index, length, element1, element2, ..., elementN)</span><br></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>必需。从数组的哪一位开始修改内容。如果超出了数组的长度，则自动从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位。</td></tr><tr><td>arguments[1]</td><td>必需。整数，表示要移除的数组元素的个数。如果 howmany 是 0，则不移除元素。这种情况下，至少应添加一个新元素。</td></tr><tr><td>arguments[2]</td><td>可选。要添加进数组的元素。如果不指定，则 splice 只删除数组元素。</td></tr><tr><td>arguments[N]</td><td>可选。要添加进数组的元素。如果不指定，则 splice 只删除数组元素。</td></tr></tbody></table><h6 id="javascript-代码示例：-5"><a href="#javascript-代码示例：-5" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">99</span>, <span class="number">67</span>, <span class="number">100</span>];</span><br><span class="line">arr.splice(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [0, 1, 100, 11, 67, 99]</span></span><br><span class="line">arr.splice(<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [1, 11, 0, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><p>添加一个或者多个元素在数组的开头，返回值是新的数组的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.unshift(element1, element2, ..., elementN)</span><br></pre></td></tr></table></figure><h5 id="-2"><a href="#-2" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>必需。向数组添加的第一个元素。</td></tr><tr><td>arguments[1]</td><td>可选。向数组添加的第二个元素。</td></tr><tr><td>arguments[n]</td><td>可选。可添加若干个元素</td></tr></tbody></table><h6 id="javascript-代码示例：-6"><a href="#javascript-代码示例：-6" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.unshift(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [0, 1, 5, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="Accessor-方法"><a href="#Accessor-方法" class="headerlink" title="Accessor 方法"></a>Accessor 方法</h2><p>这些过程不改变数组自身:</p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>返回一个包含此数组和其他数组和/或值的结合的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.concat(Array1, Array2, ..., ArrayN )</span><br></pre></td></tr></table></figure><h5 id="-3"><a href="#-3" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>可选。向数组合并的第一个数组。</td></tr><tr><td>arguments[1]</td><td>可选。向数组合并的第二个数组。</td></tr><tr><td>arguments[n]</td><td>可选。可添加若干个数组</td></tr></tbody></table><h6 id="javascript-代码示例示例："><a href="#javascript-代码示例示例：" class="headerlink" title="javascript 代码示例示例："></a>javascript 代码示例示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr3) <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br><span class="line"><span class="keyword">var</span> arr4 = arr2.concat(arr3);</span><br><span class="line"><span class="built_in">console</span>.log(arr4) <span class="comment">//[1, 2, 3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><p>返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.indexOf(searchElement,fromIndex)</span><br></pre></td></tr></table></figure><h5 id="-4"><a href="#-4" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>必需。位于数组中的元素。</td></tr><tr><td>arguments[1]</td><td>可选。默认值: 0 (即在整个数组中查找指定元素)</td></tr></tbody></table><h6 id="javascript-代码示例示例：-1"><a href="#javascript-代码示例示例：-1" class="headerlink" title="javascript 代码示例示例："></a>javascript 代码示例示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> index1 = arr.indexOf(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index1); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> index2 = arr.indexOf(<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index2); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> index3 = arr.indexOf(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index3); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> index4 = arr.indexOf(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index4); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>将所有的数组元素连接成一个字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.join(string)</span><br></pre></td></tr></table></figure><h5 id="-5"><a href="#-5" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>可选。于指定连接每个数组元素的分隔符。</td></tr></tbody></table><h6 id="javascript-代码示例：-7"><a href="#javascript-代码示例：-7" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str1 = arr.join();</span><br><span class="line"><span class="built_in">console</span>.log(str1)  <span class="comment">// &#x27;a,b,c,b&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = arr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str2)  <span class="comment">// &#x27;abcb&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = arr.join(<span class="string">&#x27; + &#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str3)  <span class="comment">// &#x27;a + b + c + b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h4><p>返回在数组中搜索到的与给定参数相等的元素的最后（最大）索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.lastIndexOf(searchElement,fromIndex)</span><br></pre></td></tr></table></figure><h5 id="-6"><a href="#-6" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>必需。位于数组中的元素。</td></tr><tr><td>arguments[1]</td><td>可选。默认值: arr.length - 1] (从此位置开始逆向查找)</td></tr></tbody></table><h6 id="javascript-代码示例示例：-2"><a href="#javascript-代码示例示例：-2" class="headerlink" title="javascript 代码示例示例："></a>javascript 代码示例示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> index1 = arr.lastIndexOf(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index1); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> index2 = arr.lastIndexOf(<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index2); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> index3 = arr.lastIndexOf(<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index3); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> index4 = arr.lastIndexOf(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index4); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>返回数组中的一段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.slice(begin,end)</span><br></pre></td></tr></table></figure><h5 id="-7"><a href="#-7" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arguments[0]</td><td>可选。从该索引处开始提取原数组中的元素（如果省略 arguments[0]从0开始，如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取）</td></tr><tr><td>arguments[1]</td><td>可选。在该索引处结束提取原数组元素（从0开始，slice会提取原数组中索引不包含到arguments[1]）</td></tr></tbody></table><h6 id="javascript-代码示例示例：-3"><a href="#javascript-代码示例示例：-3" class="headerlink" title="javascript 代码示例示例："></a>javascript 代码示例示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.slice();</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = arr.slice(-<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [&quot;c&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr.slice(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [&quot;c&quot;]</span></span><br><span class="line"><span class="keyword">var</span> arr4 = arr.slice(-<span class="number">3</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [&quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>返回代表该数组及其元素的字符,重写Object.toString 过程.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.toString()</span><br></pre></td></tr></table></figure><h6 id="javascript-代码示例：-8"><a href="#javascript-代码示例：-8" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str1 = arr.toString();</span><br><span class="line"><span class="built_in">console</span>.log(str1)  <span class="comment">// &#x27;a,b,c,b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h4><p>返回 Array 对象的原始值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.valueOf()</span><br></pre></td></tr></table></figure><h6 id="javascript-代码示例：-9"><a href="#javascript-代码示例：-9" class="headerlink" title="javascript 代码示例："></a>javascript 代码示例：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str1 = arr.valueOf();</span><br><span class="line"><span class="built_in">console</span>.log(str1)  <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下用户操作指南</title>
      <link href="/2018/03/linux-user-guide/"/>
      <url>/2018/03/linux-user-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下用户操作指南"><a href="#Linux下用户操作指南" class="headerlink" title="Linux下用户操作指南"></a>Linux下用户操作指南</h1><blockquote><p>最近捋到腾讯云2000代金券羊毛，买了腾讯云的香港主机，安装了 Debian 系统，发现Linux用户要自己配置，就写一篇文章记录下学习的用户命令以及Debian新建用户不能sudo的问题解决方法</p></blockquote><h2 id="组操作"><a href="#组操作" class="headerlink" title="组操作"></a>组操作</h2><h3 id="1，创建组"><a href="#1，创建组" class="headerlink" title="1，创建组"></a>1，创建组</h3><p>增加一个test组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd  testGroup</span><br></pre></td></tr></table></figure><h3 id="2，修改组"><a href="#2，修改组" class="headerlink" title="2，修改组"></a>2，修改组</h3><p>将testGroup组的重命名成testGroup2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n testGroup2 testGroup</span><br></pre></td></tr></table></figure><h3 id="3，删除组"><a href="#3，删除组" class="headerlink" title="3，删除组"></a>3，删除组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel testGroup2</span><br></pre></td></tr></table></figure><h3 id="4，查看组"><a href="#4，查看组" class="headerlink" title="4，查看组"></a>4，查看组</h3><ul><li><p>查看当前登录用户所在的组 <code>groups</code></p></li><li><p>查看所有组 <code>cat /etc/group</code></p></li><li><p>有的linux系统没有/etc/group文件的，这个时候看下面的这个方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd |awk -F [:] <span class="string">&#x27;&#123;print $4&#125;&#x27;</span> |sort|uniq | getent group |awk -F [:] <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里用到一个命令是getent,可以通过组ID来查找组信息,如果这个命令没有的话,那就很难查找,系统中所有的组了.</p></li></ul><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><h3 id="1、增加用户"><a href="#1、增加用户" class="headerlink" title="1、增加用户"></a>1、增加用户</h3><ul><li><p>查看useradd帮助信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">div-mac:~ div$ useradd --<span class="built_in">help</span></span><br><span class="line">Usage: useradd [options] LOGIN</span><br><span class="line">Options:</span><br><span class="line"> -b, --base-dir BASE_DIR       设置基本路径作为用户的登录目录</span><br><span class="line"> -c, --comment COMMENT         对用户的注释</span><br><span class="line"> -d, --home-dir HOME_DIR       设置用户的登录目录</span><br><span class="line"> -D, --defaults                改变设置</span><br><span class="line"> -e, --expiredate EXPIRE_DATE  设置用户的有效期</span><br><span class="line"> -f, --inactive INACTIVE       用户过期后，让密码无效</span><br><span class="line"> -g, --gid GROUP               使用户只属于某个组</span><br><span class="line"> -G, --groups GROUPS           使用户加入某个组</span><br><span class="line"> -h, --<span class="built_in">help</span>                    帮助</span><br><span class="line"> -k, --skel SKEL_DIR           指定其他的skel目录</span><br><span class="line"> -K, --key KEY=VALUE           覆盖 /etc/login.defs 配置文件</span><br><span class="line"> -m, --create-home             自动创建登录目录</span><br><span class="line"> -l,                           不把用户加入到lastlog文件中</span><br><span class="line"> -M,                           不自动创建登录目录</span><br><span class="line"> -r,                           建立系统账号</span><br><span class="line"> -o, --non-unique              允许用户拥有相同的UID</span><br><span class="line"> -p, --password PASSWORD       为新用户使用加密密码</span><br><span class="line"> -s, --shell SHELL             登录时候的shell</span><br><span class="line"> -u, --uid UID                 为新用户指定一个UID</span><br><span class="line"> -Z, --selinux-user SEUSER     use a specific SEUSER <span class="keyword">for</span> the SELinux user mapping</span><br></pre></td></tr></table></figure></li><li><p>增加用户test，有一点要注意的，useradd增加一个用户后，不要忘了给他设置密码，不然不能登录的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d <span class="string">&#x27;/home/test&#x27;</span> -s <span class="string">&#x27;/bin/bash&#x27;</span> -g testGroup <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2、修改用户"><a href="#2、修改用户" class="headerlink" title="2、修改用户"></a>2、修改用户</h3><ul><li>将test用户的登录目录改成/home/test，并加入testGroup组，注意这里是大G。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -d <span class="string">&#x27;/home/test&#x27;</span> -s <span class="string">&#x27;/bin/bash&#x27;</span> -g testGroup <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li>将用户test加入到testGroup组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a <span class="built_in">test</span> testGroup</span><br></pre></td></tr></table></figure></li><li>将用户test从testGroup组中移出<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -d <span class="built_in">test</span> testGroup</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、删除用户"><a href="#3、删除用户" class="headerlink" title="3、删除用户"></a>3、删除用户</h3><ul><li>将test用户删除<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4、查看用户"><a href="#4、查看用户" class="headerlink" title="4、查看用户"></a>4、查看用户</h3><ul><li>查看当前登录用户<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w</span><br><span class="line">who</span><br></pre></td></tr></table></figure></li><li>查看自己的用户名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure></li><li>查看单个用户信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">finger [username]</span><br><span class="line">id [username]</span><br></pre></td></tr></table></figure></li><li>查看用户登录记录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看登录成功的用户记录</span></span><br><span class="line">last </span><br><span class="line"><span class="comment"># 查看登录不成功的用户记录</span></span><br><span class="line">lastb </span><br></pre></td></tr></table></figure></li><li>查看所有用户<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cut -d : -f 1 /etc/passwd</span><br><span class="line">cat /etc/passwd |awk -F \: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="安装好Debian后还不能使用sudo"><a href="#安装好Debian后还不能使用sudo" class="headerlink" title="安装好Debian后还不能使用sudo"></a>安装好Debian后还不能使用sudo</h2><ul><li>如果没有安装sudo，则在root用户下 <code>apt-get install sudo</code></li><li>在root设置sudoers配制文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +w /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure></li><li>添加一行并保存<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># username是你的用户名</span></span><br><span class="line">username  ALL=(ALL) ALL</span><br><span class="line"><span class="comment"># 如果sudo时不想输入密码，可以把上句改成：</span></span><br><span class="line">username  ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure></li><li>更改sudoers文件权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 0440 /etc/sudoers</span><br></pre></td></tr></table></figure></li><li>退出root</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux用户 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信短链接打开支付宝领红包</title>
      <link href="/2018/01/wechat-short-link-open-alipay/"/>
      <url>/2018/01/wechat-short-link-open-alipay/</url>
      
        <content type="html"><![CDATA[<h1 id="微信短链接打开支付宝领红包"><a href="#微信短链接打开支付宝领红包" class="headerlink" title="微信短链接打开支付宝领红包"></a>微信短链接打开支付宝领红包</h1><blockquote><p>今天朋友在微信给我发来一个短连接 <a href="http://t.cn/RHu4yXj">http://t.cn/RHu4yXj</a>，在微信打开之后，直接跳转到支付宝领红包页面，感觉非常新奇，决定研究下源码。</p></blockquote><h2 id="首先解析短链接"><a href="#首先解析短链接" class="headerlink" title="首先解析短链接"></a>首先解析短链接</h2><p><a href="http://t.cn/RHu4yXj">http://t.cn/RHu4yXj</a> ==&gt; <a href="https://ie34.com/wx_zfb.html">https://ie34.com/wx_zfb.html</a></p><h2 id="取出源码"><a href="#取出源码" class="headerlink" title="取出源码"></a>取出源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://i.alipayobjects.com/common/favicon/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://i.alipayobjects.com/common/favicon/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>正在打开支付宝，请稍候……<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> url1 = <span class="string">&quot;https://qr.alipay.com/c1x09214odvs9va2cyg7vd2&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> url2 = <span class="string">&quot;https://qr.alipay.com/c1x09214odvs9va2cyg7vd2&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">is_weixin</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="regexp">/MicroMessenger/i</span>.test(navigator.userAgent)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">is_android</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (ua.match(<span class="regexp">/(Android|SymbianOS)/i</span>)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">is_ios</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="regexp">/iphone|ipad|ipod/</span>.test(ua)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">android_auto_jump</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      WeixinJSBridge.invoke(<span class="string">&quot;jumpToInstallUrl&quot;</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.close();</span></span><br><span class="line"><span class="javascript">      WeixinJSBridge.call(<span class="string">&quot;closeWindow&quot;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">ios_auto_jump</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (url1 != <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          location.href = url1</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.close();</span></span><br><span class="line"><span class="javascript">          WeixinJSBridge.call(<span class="string">&quot;closeWindow&quot;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">onAutoinit</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (is_android()) &#123;</span></span><br><span class="line"><span class="javascript">          android_auto_jump();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (is_ios()) &#123;</span></span><br><span class="line"><span class="javascript">          ios_auto_jump();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (is_weixin()) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">&quot;undefined&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.addEventListener(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, onAutoinit, <span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.attachEvent(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, onAutoinit);</span></span><br><span class="line"><span class="javascript">              <span class="built_in">document</span>.attachEvent(<span class="string">&quot;onWeixinJSBridgeReady&quot;</span>, onAutoinit)</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          onAutoinit()</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (url2 != <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          location.href = url2</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.close()</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析一下代码"><a href="#分析一下代码" class="headerlink" title="分析一下代码"></a>分析一下代码</h2><p>实现方式: 首先判断了是不是在微信里，如果是在微信里再判断<code>WeixinJSBridge</code>是否注册, 注册过直接调用代码，没注册还是需要注册一下，紧接着判断安卓和ios平台调用不同方法。如果不是微信则直接跳转 url。</p><p>从代码实现方式看，用<code>WeixinJSBridge</code>做了层跳板，绕过 webview，直接用 native 代码跳转url。</p><p>这里有个地方我不明白，微信和支付宝正在支付领域争的你死我活，应该是不会那么轻易通过url 跳转到支付宝的。</p><p>于是我请教了 ios 同学，他也同样很疑惑，他做了个实验，通过代码直接跳转<a href="https://qr.alipay.com/c1x09214odvs9va2cyg7vd2">https://qr.alipay.com/c1x09214odvs9va2cyg7vd2</a>，发现是可以直接跳转到支付宝并自动领红包的。</p><p>有这一重大发现，我就想试试能不能跳到淘宝客链接，于是找了个淘宝客的链接<a href="https://wx.loukx.com/wx_tz.html">https://wx.loukx.com/wx_tz.html</a>，结果是失败了。</p><h2 id="目前的已知问题"><a href="#目前的已知问题" class="headerlink" title="目前的已知问题"></a>目前的已知问题</h2><p>1、目前已知只有<code>qr.alipay.com</code>可以打开，淘宝客链接无法跳转</p><p>2、ios 11.2.1无法正常跳转到支付宝</p><p>3、此代码有可能是微信 native bug，有随时被封的可能</p><p>4、qq会默认跳转到 webview，无法正常打开支付宝（在想办法解决）</p><h2 id="上传支付宝红包二维码自动生成跳转链接"><a href="#上传支付宝红包二维码自动生成跳转链接" class="headerlink" title="上传支付宝红包二维码自动生成跳转链接"></a>上传支付宝红包二维码自动生成跳转链接</h2><p><a href="https://ie34.com/short-link">https://ie34.com/short-link</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 薅羊毛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 抢红包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Cheat Sheet 中文版</title>
      <link href="/2017/12/git-cheat-sheet-cn/"/>
      <url>/2017/12/git-cheat-sheet-cn/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-Cheat-Sheet-中文版"><a href="#Git-Cheat-Sheet-中文版" class="headerlink" title="Git Cheat Sheet 中文版"></a>Git Cheat Sheet 中文版</h1><blockquote><p>经常要用到git命令，但是又记不全，在网上找到一个项目<a href="https://github.com/flyhigher139/Git-Cheat-Sheet">flyhigher139</a>，做了些精简，方便速查！</p></blockquote><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h2><h4 id="列出当前配置："><a href="#列出当前配置：" class="headerlink" title="列出当前配置："></a>列出当前配置：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h4 id="列出repository配置："><a href="#列出repository配置：" class="headerlink" title="列出repository配置："></a>列出repository配置：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --local --list</span><br></pre></td></tr></table></figure><h4 id="列出全局配置："><a href="#列出全局配置：" class="headerlink" title="列出全局配置："></a>列出全局配置：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --list</span><br></pre></td></tr></table></figure><h4 id="列出系统配置："><a href="#列出系统配置：" class="headerlink" title="列出系统配置："></a>列出系统配置：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --system --list</span><br></pre></td></tr></table></figure><h4 id="设置用户名："><a href="#设置用户名：" class="headerlink" title="设置用户名："></a>设置用户名：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “[firstname lastname]”</span><br></pre></td></tr></table></figure><h4 id="设置用户邮箱："><a href="#设置用户邮箱：" class="headerlink" title="设置用户邮箱："></a>设置用户邮箱：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email “[valid-email]”</span><br></pre></td></tr></table></figure><h4 id="设置git命令输出为彩色："><a href="#设置git命令输出为彩色：" class="headerlink" title="设置git命令输出为彩色："></a>设置git命令输出为彩色：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure><h4 id="设置git使用的文本编辑器设："><a href="#设置git使用的文本编辑器设：" class="headerlink" title="设置git使用的文本编辑器设："></a>设置git使用的文本编辑器设：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor vi</span><br></pre></td></tr></table></figure><hr><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><h4 id="Repository配置对应的配置文件路径-–local-："><a href="#Repository配置对应的配置文件路径-–local-：" class="headerlink" title="Repository配置对应的配置文件路径[–local]："></a>Repository配置对应的配置文件路径[–local]：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;repo&gt;/.git/config</span><br></pre></td></tr></table></figure><h4 id="用户全局配置对应的配置文件路径-–global-："><a href="#用户全局配置对应的配置文件路径-–global-：" class="headerlink" title="用户全局配置对应的配置文件路径[–global]："></a>用户全局配置对应的配置文件路径[–global]：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.gitconfig</span><br></pre></td></tr></table></figure><h4 id="系统配置对应的配置文件路径-–local-："><a href="#系统配置对应的配置文件路径-–local-：" class="headerlink" title="系统配置对应的配置文件路径[–local]："></a>系统配置对应的配置文件路径[–local]：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/gitconfig</span><br></pre></td></tr></table></figure><hr><h2 id="3-创建"><a href="#3-创建" class="headerlink" title="3.创建"></a>3.创建</h2><h4 id="复制一个已创建的仓库"><a href="#复制一个已创建的仓库" class="headerlink" title="复制一个已创建的仓库:"></a>复制一个已创建的仓库:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 SSH</span></span><br><span class="line">$ git <span class="built_in">clone</span> ssh://user@domain.com/repo.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 HTTP</span></span><br><span class="line">$ git <span class="built_in">clone</span> http://domain.com/user/repo.git</span><br></pre></td></tr></table></figure><h4 id="创建一个新的本地仓库"><a href="#创建一个新的本地仓库" class="headerlink" title="创建一个新的本地仓库:"></a>创建一个新的本地仓库:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><hr><h2 id="4-本地修改"><a href="#4-本地修改" class="headerlink" title="4.本地修改"></a>4.本地修改</h2><h4 id="显示工作路径下已修改的文件："><a href="#显示工作路径下已修改的文件：" class="headerlink" title="显示工作路径下已修改的文件："></a>显示工作路径下已修改的文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h4 id="显示与上次提交版本文件的不同："><a href="#显示与上次提交版本文件的不同：" class="headerlink" title="显示与上次提交版本文件的不同："></a>显示与上次提交版本文件的不同：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h4 id="把当前所有修改添加到下次提交中："><a href="#把当前所有修改添加到下次提交中：" class="headerlink" title="把当前所有修改添加到下次提交中："></a>把当前所有修改添加到下次提交中：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h4 id="把对某个文件的修改添加到下次提交中："><a href="#把对某个文件的修改添加到下次提交中：" class="headerlink" title="把对某个文件的修改添加到下次提交中："></a>把对某个文件的修改添加到下次提交中：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -p &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="提交本地的所有修改："><a href="#提交本地的所有修改：" class="headerlink" title="提交本地的所有修改："></a>提交本地的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure><h4 id="提交之前已标记的变化："><a href="#提交之前已标记的变化：" class="headerlink" title="提交之前已标记的变化："></a>提交之前已标记的变化：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><h4 id="附加消息提交："><a href="#附加消息提交：" class="headerlink" title="附加消息提交："></a>附加消息提交：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &#x27;message here&#x27;</span><br></pre></td></tr></table></figure><h4 id="提交，并将提交时间设置为之前的某个日期"><a href="#提交，并将提交时间设置为之前的某个日期" class="headerlink" title="提交，并将提交时间设置为之前的某个日期:"></a>提交，并将提交时间设置为之前的某个日期:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --date=&quot;`date --date=&#x27;n day ago&#x27;`&quot; -am &quot;Commit Message&quot;</span><br></pre></td></tr></table></figure><h4 id="修改上次提交"><a href="#修改上次提交" class="headerlink" title="修改上次提交"></a>修改上次提交</h4><p><em><sub>请勿修改已发布的提交记录!</sub></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><h4 id="修改上次提交的committer-date："><a href="#修改上次提交的committer-date：" class="headerlink" title="修改上次提交的committer date："></a>修改上次提交的committer date：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=&quot;date&quot; git commit --amend</span><br></pre></td></tr></table></figure><h4 id="修改上次提交的author-date："><a href="#修改上次提交的author-date：" class="headerlink" title="修改上次提交的author date："></a>修改上次提交的author date：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --date=&quot;date&quot;</span><br></pre></td></tr></table></figure><h4 id="把当前分支中未提交的修改移动到其他分支："><a href="#把当前分支中未提交的修改移动到其他分支：" class="headerlink" title="把当前分支中未提交的修改移动到其他分支："></a>把当前分支中未提交的修改移动到其他分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout branch2</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h4 id="将-stashed-changes-应用到当前分支："><a href="#将-stashed-changes-应用到当前分支：" class="headerlink" title="将 stashed changes 应用到当前分支："></a>将 stashed changes 应用到当前分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure><h4 id="删除最新一次的-stashed-changes："><a href="#删除最新一次的-stashed-changes：" class="headerlink" title="删除最新一次的 stashed changes："></a>删除最新一次的 stashed changes：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure><hr><h2 id="5-搜索"><a href="#5-搜索" class="headerlink" title="5.搜索"></a>5.搜索</h2><h4 id="从当前目录的所有文件中查找文本内容："><a href="#从当前目录的所有文件中查找文本内容：" class="headerlink" title="从当前目录的所有文件中查找文本内容："></a>从当前目录的所有文件中查找文本内容：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git grep &quot;Hello&quot;</span><br></pre></td></tr></table></figure><h4 id="在某一版本中搜索文本："><a href="#在某一版本中搜索文本：" class="headerlink" title="在某一版本中搜索文本："></a>在某一版本中搜索文本：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git grep &quot;Hello&quot; v2.5</span><br></pre></td></tr></table></figure><hr><h2 id="6-提交历史"><a href="#6-提交历史" class="headerlink" title="6.提交历史"></a>6.提交历史</h2><h4 id="从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）："><a href="#从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）：" class="headerlink" title="从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）："></a>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><h4 id="显示所有提交（仅显示提交的hash和message）："><a href="#显示所有提交（仅显示提交的hash和message）：" class="headerlink" title="显示所有提交（仅显示提交的hash和message）："></a>显示所有提交（仅显示提交的hash和message）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br></pre></td></tr></table></figure><h4 id="显示某个用户的所有提交："><a href="#显示某个用户的所有提交：" class="headerlink" title="显示某个用户的所有提交："></a>显示某个用户的所有提交：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --author=&quot;username&quot;</span><br></pre></td></tr></table></figure><h4 id="显示某个文件的所有修改："><a href="#显示某个文件的所有修改：" class="headerlink" title="显示某个文件的所有修改："></a>显示某个文件的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集："><a href="#仅显示远端-lt-remote-master-gt-分支与远端-lt-origin-master-gt-分支提交记录的差集：" class="headerlink" title="仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集："></a>仅显示远端&lt;remote/master&gt;分支与远端&lt;origin/master&gt;分支提交记录的差集：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline &lt;origin/master&gt;..&lt;remote/master&gt; --left-right</span><br></pre></td></tr></table></figure><h4 id="谁，在什么时间，修改了文件的什么内容："><a href="#谁，在什么时间，修改了文件的什么内容：" class="headerlink" title="谁，在什么时间，修改了文件的什么内容："></a>谁，在什么时间，修改了文件的什么内容：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="显示reflog："><a href="#显示reflog：" class="headerlink" title="显示reflog："></a>显示reflog：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog show</span><br></pre></td></tr></table></figure><h4 id="删除reflog："><a href="#删除reflog：" class="headerlink" title="删除reflog："></a>删除reflog：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog delete</span><br></pre></td></tr></table></figure><hr><h2 id="7-分支与标签"><a href="#7-分支与标签" class="headerlink" title="7.分支与标签"></a>7.分支与标签</h2><h4 id="列出所有的分支："><a href="#列出所有的分支：" class="headerlink" title="列出所有的分支："></a>列出所有的分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h4 id="列出所有的远端分支："><a href="#列出所有的远端分支：" class="headerlink" title="列出所有的远端分支："></a>列出所有的远端分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><h4 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支:"></a>创建并切换到新分支:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="基于当前分支创建新分支："><a href="#基于当前分支创建新分支：" class="headerlink" title="基于当前分支创建新分支："></a>基于当前分支创建新分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure><h4 id="基于远程分支创建新的可追溯的分支："><a href="#基于远程分支创建新的可追溯的分支：" class="headerlink" title="基于远程分支创建新的可追溯的分支："></a>基于远程分支创建新的可追溯的分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt;</span><br></pre></td></tr></table></figure><h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支:"></a>删除本地分支:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="强制删除一个本地分支："><a href="#强制删除一个本地分支：" class="headerlink" title="强制删除一个本地分支："></a>强制删除一个本地分支：<br></h4><p><em><sub>将会丢失未合并的修改！</sub></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="给当前版本打标签："><a href="#给当前版本打标签：" class="headerlink" title="给当前版本打标签："></a>给当前版本打标签：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h4 id="给当前版本打标签并附加消息："><a href="#给当前版本打标签并附加消息：" class="headerlink" title="给当前版本打标签并附加消息："></a>给当前版本打标签并附加消息：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="8-更新与发布"><a href="#8-更新与发布" class="headerlink" title="8.更新与发布"></a>8.更新与发布</h2><h4 id="列出当前配置的远程端："><a href="#列出当前配置的远程端：" class="headerlink" title="列出当前配置的远程端："></a>列出当前配置的远程端：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h4 id="显示远程端的信息："><a href="#显示远程端的信息：" class="headerlink" title="显示远程端的信息："></a>显示远程端的信息：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure><h4 id="添加新的远程端："><a href="#添加新的远程端：" class="headerlink" title="添加新的远程端："></a>添加新的远程端：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h4 id="下载远程端版本，但不合并到HEAD中："><a href="#下载远程端版本，但不合并到HEAD中：" class="headerlink" title="下载远程端版本，但不合并到HEAD中："></a>下载远程端版本，但不合并到HEAD中：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure><h4 id="下载远程端版本，并自动与HEAD版本合并："><a href="#下载远程端版本，并自动与HEAD版本合并：" class="headerlink" title="下载远程端版本，并自动与HEAD版本合并："></a>下载远程端版本，并自动与HEAD版本合并：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote pull &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h4 id="将远程端版本合并到本地版本中："><a href="#将远程端版本合并到本地版本中：" class="headerlink" title="将远程端版本合并到本地版本中："></a>将远程端版本合并到本地版本中：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><h4 id="以rebase方式将远端分支与本地合并："><a href="#以rebase方式将远端分支与本地合并：" class="headerlink" title="以rebase方式将远端分支与本地合并："></a>以rebase方式将远端分支与本地合并：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="将本地版本发布到远程端："><a href="#将本地版本发布到远程端：" class="headerlink" title="将本地版本发布到远程端："></a>将本地版本发布到远程端：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push remote &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="删除远程端分支："><a href="#删除远程端分支：" class="headerlink" title="删除远程端分支："></a>删除远程端分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)</span><br><span class="line">or</span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)</span><br></pre></td></tr></table></figure><h4 id="发布标签"><a href="#发布标签" class="headerlink" title="发布标签:"></a>发布标签:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure><hr><h2 id="9-合并与重置-Rebase"><a href="#9-合并与重置-Rebase" class="headerlink" title="9.合并与重置(Rebase)"></a>9.合并与重置(Rebase)</h2><h4 id="将分支合并到当前HEAD中："><a href="#将分支合并到当前HEAD中：" class="headerlink" title="将分支合并到当前HEAD中："></a>将分支合并到当前HEAD中：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="将当前HEAD版本重置到分支中"><a href="#将当前HEAD版本重置到分支中" class="headerlink" title="将当前HEAD版本重置到分支中:"></a>将当前HEAD版本重置到分支中:</h4><p><em><sub>请勿重置已发布的提交!</sub></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure><h4 id="退出重置"><a href="#退出重置" class="headerlink" title="退出重置:"></a>退出重置:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --abort</span><br></pre></td></tr></table></figure><h4 id="解决冲突后继续重置："><a href="#解决冲突后继续重置：" class="headerlink" title="解决冲突后继续重置："></a>解决冲突后继续重置：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure><h4 id="使用配置好的merge-tool-解决冲突："><a href="#使用配置好的merge-tool-解决冲突：" class="headerlink" title="使用配置好的merge tool 解决冲突："></a>使用配置好的merge tool 解决冲突：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mergetool</span><br></pre></td></tr></table></figure><h4 id="在编辑器中手动解决冲突后，标记文件为已解决冲突："><a href="#在编辑器中手动解决冲突后，标记文件为已解决冲突：" class="headerlink" title="在编辑器中手动解决冲突后，标记文件为已解决冲突："></a>在编辑器中手动解决冲突后，标记文件为<code>已解决冲突</code>：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure><h4 id="合并提交："><a href="#合并提交：" class="headerlink" title="合并提交："></a>合并提交：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i &lt;commit-just-before-first&gt;</span><br></pre></td></tr></table></figure><p>把上面的内容替换为下面的内容：</p><p>原内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line">pick &lt;commit_id2&gt;</span><br><span class="line">pick &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line">squash &lt;commit_id2&gt;</span><br><span class="line">squash &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="10-撤销"><a href="#10-撤销" class="headerlink" title="10.撤销"></a>10.撤销</h2><h4 id="放弃工作目录下的所有修改："><a href="#放弃工作目录下的所有修改：" class="headerlink" title="放弃工作目录下的所有修改："></a>放弃工作目录下的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD</span><br></pre></td></tr></table></figure><h4 id="移除缓存区的所有文件（i-e-撤销上次git-add）"><a href="#移除缓存区的所有文件（i-e-撤销上次git-add）" class="headerlink" title="移除缓存区的所有文件（i.e. 撤销上次git add）:"></a>移除缓存区的所有文件（i.e. 撤销上次<code>git add</code>）:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD</span><br></pre></td></tr></table></figure><h4 id="放弃某个文件的所有本地修改："><a href="#放弃某个文件的所有本地修改：" class="headerlink" title="放弃某个文件的所有本地修改："></a>放弃某个文件的所有本地修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="重置一个提交（通过创建一个截然不同的新提交）"><a href="#重置一个提交（通过创建一个截然不同的新提交）" class="headerlink" title="重置一个提交（通过创建一个截然不同的新提交）"></a>重置一个提交（通过创建一个截然不同的新提交）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure><h4 id="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："><a href="#将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：" class="headerlink" title="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："></a>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure><h4 id="用远端分支强制覆盖本地分支："><a href="#用远端分支强制覆盖本地分支：" class="headerlink" title="用远端分支强制覆盖本地分支："></a>用远端分支强制覆盖本地分支：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;remote/branch&gt; e.g., upstream/master, origin/my-feature</span><br></pre></td></tr></table></figure><h4 id="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："><a href="#将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："></a>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure><h4 id="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："><a href="#将HEAD重置到上一次提交的版本，并保留未提交的本地修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："></a>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --keep &lt;commit&gt;</span><br></pre></td></tr></table></figure><h4 id="删除添加-gitignore文件前错误提交的文件："><a href="#删除添加-gitignore文件前错误提交的文件：" class="headerlink" title="删除添加.gitignore文件前错误提交的文件："></a>删除添加<code>.gitignore</code>文件前错误提交的文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -r --cached .</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;remove xyz file&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript语言精粹</title>
      <link href="/2017/12/JavaScript-the-good-parts/"/>
      <url>/2017/12/JavaScript-the-good-parts/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript语言精粹"><a href="#JavaScript语言精粹" class="headerlink" title="JavaScript语言精粹"></a>JavaScript语言精粹</h1><blockquote><p>这篇文章算是对《JavaScript语言精粹》的一个笔记，这本书对JavaScript中的精华比较深入，作者的目的是让大家知道js是一门很牛逼的的动态编程语言</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>约定</strong>：</p><ul><li><strong>=&gt;</strong> 表示参考相关文章或书籍;</li><li><strong>JS</strong> JavaScript的缩写。</li></ul><p>本书专注于JavaScript的精华部分，同时会偶尔警告要去避免的糟粕部分。作者提炼出的JavaScript精华子集，更可靠，更易读，更易于维护。</p><p>本书的目的是揭示JavaScript中的精华，让大家知道它是一门杰出的动态编程语言。</p><p><a href="http://javascript.crockford.com/javascript.html">JavaScript：世界上最被误解的语言</a></p><h3 id="第1章-精华"><a href="#第1章-精华" class="headerlink" title="第1章 精华"></a>第1章 精华</h3><ul><li><p><strong>为什么要使用JavaScript语言</strong></p><ol><li>你没有选择，JavaScript是唯一一门所有浏览器都可以识别的语言。</li><li>JavaScript有缺陷，但它真的很优秀。轻量级又富有表现力，一旦熟练掌握就能体会到函数式编程的乐趣。</li></ol></li><li><p><strong>分析JavaScript</strong></p></li></ul><p><strong>JavaScript优秀的思想：</strong> 函数，弱类型，动态对象，对象字面量。</p><p><strong>JavaScript糟糕的思想：</strong> 基于全局变量的编程模型。</p><p><strong>函数：</strong> 基于词法来划分作用域，而不是动态划分作用域 =&gt;《JavaScript权威指南》第5章<code>8.8.1 词法作用域</code>。</p><p><strong>弱类型：</strong> 强类型允许编译器在编译时检测错误。事实证明，强类型并不会让你的测试工作变得轻松。弱类型是自由的，不需要建立复杂的类层次，也不用做强制类型转换。</p><p><strong>对象字面量：</strong> 通过列出对象的组成部分，它们就能简单地被创建出来。JSON的灵感来源于此（作者是JSON的创立者）。</p><p><strong>全局变量：</strong> JavaScript依赖于全局变量来进行连接。所有编译单元的所有顶级变量被撮合到一个被称为全局对象(the global object)的公共命名空间中。全局变量是魔鬼，而它们在JavaScript中却是基础，非常糟糕！</p><h3 id="第2章-语法"><a href="#第2章-语法" class="headerlink" title="第2章 语法"></a>第2章 语法</h3><ul><li><strong>空白</strong></li></ul><p>空白可能表现为被格式化的字符或注释的形式。空白通常没有意义，但有时候必须要用它来分隔字符序列，否则它们就会被合并成一个符号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="built_in">this</span>; <span class="comment">// var和this之间的空格不能移除，其他的空格都可以移除</span></span><br></pre></td></tr></table></figure><ul><li><strong>注释</strong>：</li></ul><p>JavaScript提供两种注释形式，块注释和行注释。注释应该被优先用来提高程序的可读性。<br>注释一定要精确地描述代码,没有用的注释比没有注释更糟糕!</p><p><code>块注释：/* */</code>，由于这些字符可能出现在正则表达式字面量里，所以不建议使用块注释。</p><p><code>行注释：//</code>，建议使用行注释替代块注释。</p><ul><li><strong>标识符</strong></li></ul><p>标识符由一个字母开头（JS规范中还允许以下划线<code>_</code>和美元符<code>$</code>开头），其后可选择性地加上一个或多个字母，数字或下划线。</p><p>标识符不能使用的保留字：<code>abstract，boolean，break，byte，case，catch，char，class，const，continue，debugger，default，delete，do，double，else，enum，export，extends，false，final，finally，float，for，function，goto，if，implements，import，in，instanceof，int，interface，long，native，new，null，package，private，protected，public，return，short，static，supper，switch，synchronized，this，throw，throws，transient，true，try，typeof，var，volatile，void，while，with</code>。</p><p>该列表中不包括一些本应该被保留而没有保留的字，诸如<code>undefined</code>、<code>NaN</code>和<code>Infinity</code>。</p><p>JS不允许使用保留字来命名变量或参数。更糟糕的是，JS不允许在对象字面量中，或者用点运算符提取对象属性时，使用保留字作为对象的属性名。</p><p>标识符被用于语句，变量，参数，属性名，运算符和标记。</p><ul><li><strong>数字</strong></li></ul><p>JS只有一个数字类型，在内部被表示为64位的浮点数，和Java的double数字类型一样。与其他大多数编程语言不同的是，它没有分离出整数类型，所以1和1.0的值相同。这避免了短整型的溢出问题和一大堆因数字类型导致的错误。</p><p>数字字面量有指数部分，则这个字面量的值等于<code>e</code>之前的数字与<code>10</code>的<code>e</code>之后数字的次方相乘。<code>100=1e2</code>。</p><p><strong>负数：</strong> 前置运算符<code>-</code>加数字。<code>-100</code>。</p><p><strong>NaN：</strong> 一个数值，表示不能产生正常运算结果。<code>NaN</code>不等于任何值，包括它自己。可以使用函数<code>isNaN(number)</code>来检测<code>NaN</code>。</p><p><strong>Infinity：</strong> 表示所有大于<code>1.79769313486231570e+308</code>的值。</p><p>数字拥有方法，JS中的Math对象包含一套作用于数字的方法。<code>Math.floor(number)</code>可以将一个数字转换为一个整数。</p><ul><li><strong>字符串</strong></li></ul><p>字符串字面量可以被包在一对单引号或双引号中，可能包含0个或多个字符。<code>\</code>(反斜杠)是转义字符。JS被创建的时候，Unicode是一个16位的字符集，所以JS中的所有字符都是16位的。</p><p>JS没有字符类型。要表示一个字符，只需创建仅包含一个字符的字符串即可。</p><p>转义字符：用于把正常情况下不被允许的字符插入到字符串中，比如反斜线，引号和控制符。<code>\u</code>约定用来指定数字字符编码。<code>&quot;A&quot; == &quot;\u0041&quot;</code>。</p><p>字符串是不可变的，可以通过length属性获取长度，通过+连接其他字符串。两个包含完全相同的字符且字符顺序也相同的字符串被认为是相同的字符串，<code>&#39;c&#39; + &#39;a&#39; + &#39;t&#39; === &#39;cat&#39;</code>。</p><p>字符串有相应的方法，比如<code>&#39;cat&#39;.toUpperCase() === &#39;CAT&#39;</code>。</p><ul><li><strong>语句</strong></li></ul><p><strong>var：</strong> var语句用于函数内部，则定义的是这个函数的私有变量。</p><p><strong>label：</strong> <code>swith</code>，<code>while</code>，<code>for</code>和<code>do</code>语句允许有一个可选的前置标签（这里解释一下，前置标签应该是代码块），它配合<code>break</code>语句来使用。</p><p><strong>语句执行顺序：</strong> 通常按照从上到下的顺序执行，JS可以通过条件语句（<code>if</code>和<code>switch</code>），循环语句（<code>while</code>，<code>for</code>和<code>do</code>），强制跳转语句（<code>break</code>，<code>return</code>和<code>throw</code>）和函数调用来改变执行序列。</p><p><strong>代码块：</strong> 包在一对花括号中的一组语句。JS中的代码块不会创建新的作用域，因此变量应该定义在函数的头部，而不是在代码块中。</p><p><strong>JS的假值：</strong> <code>false</code>，<code>null</code>，<code>undefined</code>，空字符串<code>&#39; &#39;</code>，数字<code>0</code>，数字<code>NaN</code>，其他所有的值都被当做真，包括<code>true</code>，<br>字符串”false”，以及所有的对象。</p><p>JS中的语句，比如<code>if，switch，while，for，for in，do，try catch，throw</code>，<code>return</code>（没有指定返回表达式，则返回<code>undefined</code>），<code>break</code>，和Java中的语义相同。JS不允许在<code>return</code>关键字和表达式之间换行，也不允许在<code>break</code>关键字和标签之间换行。</p><ul><li><strong>表达式</strong></li></ul><p><strong>表达式：</strong> 最简单的表达式是字面量值（比如字符串或数字），变量，内置的值<code>true，false，null，undefined，NaN和Infinity</code>，以<code>new</code>开头的调用表达式，以<code>delete</code>开头的属性提取表达式，包在圆括号中的表达式，以一个前置运算符作为前导的表达式，或者表达式后面跟着：</p><ol><li>一个逻辑运算符与另一个表达式</li><li>三元运算符**?<code>后面跟着另一个表达式，然后接一个：** </code>，再然后接第3个表达式</li><li>一个函数调用</li><li>一个属性提取表达式</li></ol><p><strong>运算符优先级：</strong> 下表中排在越上面的优先级越高，结合性越强。圆括号可以改变正常情况下的优先级。</p><table><thead><tr><th>运算符</th><th align="right">说明</th></tr></thead><tbody><tr><td><code>()</code></td><td align="right">调用函数</td></tr><tr><td><code>.</code> <code>[]</code></td><td align="right">提取属性</td></tr><tr><td><code>delete</code> <code>new</code> <code>typeof</code> <code>+</code> <code>-</code> <code>!</code></td><td align="right">一元运算符</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code></td><td align="right">乘法，除法，求余</td></tr><tr><td><code>+</code> <code>-</code></td><td align="right">加法/连接，减法</td></tr><tr><td><code>&gt;=</code> <code>&lt;=</code> <code>&gt;</code> <code>&lt;</code></td><td align="right">不等式运算符</td></tr><tr><td><code>===</code> <code>!==</code></td><td align="right">等式运算符</td></tr><tr><td><code>&amp;&amp;</code></td><td align="right">逻辑与</td></tr><tr><td>&#166;&#166;</td><td align="right">逻辑或</td></tr><tr><td><code>true ? lable1 : lable2</code></td><td align="right">三元运算符</td></tr></tbody></table><p><strong>typeof：</strong> typeof运算符产生的值有<code>number</code>，<code>string</code>，<code>boolean</code>，<code>undefined</code>，<code>function</code>和<code>object</code>。如果运算符是一个数组或<code>null</code>，则结果是<code>object</code>，其实不应该是这样的！（作者意思是应该为<code>array</code>或<code>null</code>）。</p><p><strong>函数调用运算符：</strong> 函数调用引发函数的执行，函数调用运算符是跟随在函数名后面的一对圆括号。圆括号中可能包含传递给这个函数的参数。</p><p><strong>属性存取表达式：</strong> 用于获取或设置一个对象或数组的属性和元素。</p><ul><li><strong>字面量</strong></li></ul><p><strong>字面量(literal)：</strong> 包括<code>number</code>字面量，<code>string</code>字面量，<code>object</code>字面量，<code>array</code>字面量，<code>function</code>，<code>regexp</code>字面量（正则表达式）。</p><p><strong>对象字面量：</strong> 一种可以方便地按指定规格创建新对象的表示法。属性名可以是标识符或字符串，这些名字被当作字面量名而不是变量名来对待，所以对象的属性名在编译时才能知道。属性的值就是表达式。</p><p><strong>数组字面量：</strong> 一种可以方便地按指定规格创建新数组的表示法。</p><ul><li><strong>函数</strong></li></ul><p><strong>函数字面量：</strong> 定义函数值，可以指定可选的名字，用于递归地调用自己。可以指定参数列表，函数主体包括变量定义和语句。</p><h3 id="第3章-对象"><a href="#第3章-对象" class="headerlink" title="第3章 对象"></a>第3章 对象</h3><p><strong>简单数据类型：</strong> JS的简单数据类型包括<code>数字</code>，<code>字符串</code>，<code>布尔值</code>，<code>null</code>和<code>undefined</code>。这些类型虽然拥有方法，但它们是不可变的，所以不能称为对象。</p><p><strong>对象：</strong> JS中的对象是可变的键控集合（keyed collections）。在JS中，数组，函数，正则表达式都是对象。</p><p>对象是属性的容器，其中每个属性都拥有名字和值。属性的名字可以是空字符串在内的任意字符串。属性值可以是除<code>undefined</code>以外的任何值。JS里的对象是无类型的，且允许对象继承和嵌套。</p><ul><li><strong>对象字面量</strong></li></ul><p>对象字面量：一个对象字面量就是包围在一对花括号中的零或多个<code>名/值</code>对，它可以方便的创建新对象值。对象字面量可以出现在任何允许表达式出现的地方。如果属性名是一个合法的JS标识符且不是保留字，则并不强制要求用引号括住属性名。JS的标识符包含连接符<code>-</code>是不合法的，但允许包含下划线<code>_</code>。</p><ul><li><strong>检索</strong></li></ul><p><strong>检索对象：</strong> 可以使用<code>.</code>或<code>[]</code>检索对象，优先考虑使用<code>.</code>表示法，因为它更紧凑且可读性更好。如果字符串表达式不是合法的JS标识符，则必须使用<code>[]</code>来检索对象。</p><p>检索一个不存在的成员属性的值将返回<code>undefined</code>，可以使用<code>||</code>运算符填充默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> middle = stooge[<span class="string">&quot;middle-name&quot;</span>] || <span class="string">&quot;(none)&quot;</span> ;</span><br></pre></td></tr></table></figure><p>尝试从<code>undefined</code>的成员属性中取值将导致<code>TypeError</code>异常，可以通过<code>&amp;&amp;</code>运算符避免错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flight.equipment <span class="comment">//undefined</span></span><br><span class="line">flight.equipment.model <span class="comment">//throw &#x27;TypeError&#x27;</span></span><br><span class="line">flight.equipment &amp;&amp; flight.equipment.model <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><ul><li><strong>更新</strong></li></ul><p>更新对象：对象的值可以通过赋值语句来更新。如果属性值已经存在于对象里，则这个属性的值会被替换，否则该属性会被扩充到对象中。</p><ul><li><strong>引用</strong></li></ul><p>对象引用：对象通过引用来传递，它们永远不会被复制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a,b,c引用不同的空对象</span></span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;,</span><br><span class="line">    b=&#123;&#125;,</span><br><span class="line">    c=&#123;&#125;;</span><br><span class="line"><span class="comment">//a,b,c引用相同的空对象</span></span><br><span class="line">a=b=c=&#123;&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>原型</strong></li></ul><p><strong>原型：</strong> 每个对象都连接到一个原型对象，并且它可以从中继承属性。所有通过对象字面量创建的对象都连接到<code>Ojbect.prototype</code>，它是JS中的标配对象。</p><p><strong>原型选择：</strong> 当创建一个新对象时，可以选择某个对象作为它的原型，JS提供的实现机制杂乱而复杂，其实可以被明显地简化。</p><p><strong>原型选择简化方法：</strong> 为Object增加一个<code>create</code>方法，这个方法创建一个使用原对象作为其原型的新对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Object</span>.create !== <span class="string">&#x27;function&#x27;</span>)&#123; <span class="comment">//书中代码为Object.beget,印刷错误？</span></span><br><span class="line">    <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">      F.prototype = o;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> another_stooge = <span class="built_in">Object</span>.create(stooge);</span><br></pre></td></tr></table></figure><p><strong>原型连接与委托机制：</strong> 原型连接在更新时不起作用，当对某个对象做出改变时，不会触及该对象的原型。原型连接只在检索值的时候才被用到。如果尝试获取对象中不存在的属性值，则JS会试着从原型对象中获取该属性值。如果原型对象也没有该属性，则继续从原型对象的原型中寻找，依此类推，直到到达终点<code>Object.prototype</code>。如果仍旧找不到，则返回<code>undefined</code>。这个过程就是委托。</p><p>原型关系是一种动态的关系。如果向原型中添加一个新的属性，则该属性会立即对所有基于该原型创建的对象可见。</p><ul><li><strong>反射</strong></li></ul><p><strong>反射：</strong> 检查对象并确定对象的属性。typeof操作符可以方便的确定属性的类型。</p><p><strong>处理不需要的属性：</strong> 当你想让对象在运行时动态获自身信息时，关注更多的是数据，这时应该让你的程序做检查并丢弃掉值为函数的属性。使用<code>hasOwnProperty</code>方法可以检查对象是否拥有独有的属性，如果有则返回<code>true</code>，它不会检查原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flight.hasOwnProperty(<span class="string">&#x27;number&#x27;</span>)       <span class="comment">//true</span></span><br><span class="line">flight.hasOwnProperty(<span class="string">&#x27;constructor&#x27;</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li><strong>枚举</strong></li></ul><p><strong>for in：</strong> 可用来遍历一个对象中的所有属性名。该枚举过程将会列出所有的属性-包括函数和原型中的属性，这些一般都需要过滤掉。最常用的过滤器是<code>hasOwnProperty</code>方法，及使用<code>typeof</code>排除函数。<code>for in</code>遍历，<br>属性名出现的顺序是不确定的。如果想要确保属性以特定的顺序出现，则创建一个数组，将属性以正确的顺序放入，使用<code>for</code>获取它们的值。</p><ul><li><strong>删除</strong></li></ul><p><strong>delete运算符：</strong> 用于删除对象的属性。如果对象包含该属性，则该属性会被移除。它不会触及原型中的任何对象。删除对象的属性可能会让来自原型链中的属性透现出来。</p><ul><li><strong>减少全局变量污染</strong></li></ul><p><strong>JS的全局变量：</strong> JS可以很随意地定义全局变量来容纳你的应用的所有资源。遗憾的是，全局变量会削弱程序的灵活性，应该避免使用。</p><p><strong>最小化全局变量：</strong> 为你的应用只创建一个唯一的全局变量！（后面会介绍另一种有效减少全局污染的方法：闭包）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;; <span class="comment">//命名空间，整个应用的容器</span></span><br><span class="line">MYAPP.stooge=&#123;</span><br><span class="line">  <span class="string">&quot;first-name&quot;</span>:<span class="string">&quot;Joe&quot;</span>,</span><br><span class="line">  <span class="string">&quot;last-name&quot;</span>:<span class="string">&quot;Howard&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第4章-函数"><a href="#第4章-函数" class="headerlink" title="第4章 函数"></a>第4章 函数</h3><p>JS设计最出色的就是它的函数的实现，几乎接近于完美！</p><p><strong>函数：</strong> 函数包含一组语句，它们是JS的基础模块单元，用于代码复用，信息隐藏和组合调用。函数用于指定对象的行为。一般来说，编程就是将一组需求分解为一组函数与数据结构的技能。</p><ul><li><strong>函数对象</strong></li></ul><p><strong>函数对象：</strong> JS中的函数就是对象。对象是<code>名/值</code>对的集合并拥有一个连到原型对象的隐藏连接。对象字面量产生的对象连接到<code>Object.prototype</code>。函数对象连接到<code>Function.prototype</code>（该原型对象本身连接到<code>Object.prototype</code>）。每个函数在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码（类似于句柄）。</p><ul><li><strong>函数字面量</strong></li></ul><p><strong>函数字面量：</strong> 包括4个部分，<code>function</code> + 函数名（可以省略，匿名函数）+ <code>(参数列表)</code> + <code>&#123;语句&#125;</code>。函数对象是通过函数字面量来创建的。函数字面量可以出现在任何允许表达式出现的地方。</p><p><strong>闭包：</strong> 函数可以被定义在其他函数中。一个内部函数除了可以访问自己的参数和变量，同时它也能自由访问父函数的参数和变量。通过函数字面量创建的函数对象包含一个连到外部上下文的连接。这被成为闭包（closure）。它是JS强大表现力的来源。</p><ul><li><strong>调用</strong></li></ul><p><strong>函数调用：</strong> 调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形参，每个函数还接收两个附加的参数：this和arguments。</p><p><strong>this与调用模式：</strong> 参数this的值取决于调用的模式。在JS中，一共有4种调用模式：方法调用模式，函数调用模式，构造器调用模式和apply调用模式。这些模式在如何初始化关键参数this上存在差异。</p><p><strong>调用运算符：</strong> 调用运算符是跟在任何产生一个函数值的表达式之后的一对圆括号。圆括号内包含参数列表。实际参数<code>arguments</code>个数与形式参数<code>parameters</code>个数不匹配时，不会导致运行时错误。如果实参过多，则超出的参数值会被忽略。如果实参过少，缺失的值会被替换为<code>undefined</code>。对参数值不会进行类型检查：任何类型的值都可以被传递给任何参数。</p><ul><li><strong>方法调用模式</strong></li></ul><p><strong>方法：</strong> 当一个函数被保存为对象的一个属性时，我们称之为方法。当方法被调用时，this被绑定到该对象。如果调用表达式包含一个提取属性的动作<code>.</code>或<code>[]</code>，那它就是被当作一个方法来调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; <span class="comment">//创建myObj对象，有一个value属性和一个increment方法.</span></span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span>(<span class="params">inc</span>)</span>&#123; <span class="comment">//increment方法接受一个可选的参数。如果该参数不是数字，则默认使用1.</span></span><br><span class="line">    <span class="built_in">this</span>.value += <span class="keyword">typeof</span> inc === <span class="string">&#x27;number&#x27;</span> ? inc : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObj.increment();</span><br><span class="line"><span class="built_in">document</span>.writeln(myObj.value) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">myObj.increment();</span><br><span class="line"><span class="built_in">document</span>.writeln(myObj.value) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>方法可以使用this访问自己所属的对象，所以它能从对象中取值或对对象进行修改。this到对象的绑定发生在调用的时候，这样的延迟绑定使得函数可以高度复用this。</p><p><strong>公共方法：</strong> 通过this可取得它们所属对象的上下文的方法称为公共方法。</p><ul><li><strong>函数调用模式</strong></li></ul><p><strong>函数调用：</strong> 当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。以此模式调用函数时，this被绑定到全局对象。这是语言设计的一个错误！如果设计正确，那么当内部函数被调用时，this应该仍然绑定到外部函数的this变量。这个错误设计的后果是方法不能利用内部函数来帮助它工作，因为内部函数的this被绑定了错误的值，所以不能共享该方法对对象的访问权。</p><p><strong>解决方案：</strong> 在外部方法中定义一个变量that，并赋值为this，内部函数可以通过that访问this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myObj.double = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//给myObj增加一个double方法</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>; <span class="comment">//解决方法</span></span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//double方法内部的函数</span></span><br><span class="line">        that.value = add(that.value,that.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    helper();   <span class="comment">//以函数的形式调用helper</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObj.double(); <span class="comment">//以方法的形式调用double</span></span><br><span class="line"><span class="built_in">document</span>.writeln(myObj.value); <span class="comment">//6</span></span><br></pre></td></tr></table></figure><ul><li><strong>构造器调用模式</strong></li></ul><p>JS是一门基于原型继承的语言，对象可以直接从其他对象继承属性。该语言是无类型的。</p><p><strong>构造器函数：</strong> 函数创建的目的是结合new前缀来调用，那它就被称为构造器函数。按照约定，它们保存在以大写格式命名的变量里。</p><p><strong>构造器函数缺点：</strong> 如果调用构造器函数时，没有在前面加上<code>new</code>，可能会产生非常糟糕的事情，即没有编译时警告，也没有运行时警告，所以约定非常重要。不推荐使用这种形式的构造器函数。（下一章有更好的替代方式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Quo = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123; <span class="comment">//创建一个名为Quo的构造器函数，它创建一个带有status属性的对象。</span></span><br><span class="line">    <span class="built_in">this</span>.status = str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Quo的所有实例提供一个get_status的公共方法</span></span><br><span class="line">Quo.prototype.get_status = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.status;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造一个Quo实例</span></span><br><span class="line"><span class="keyword">var</span> myQuo = <span class="keyword">new</span> Quo(<span class="string">&quot;confused&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.writeln(myQuo.get_status()); <span class="comment">//打印显示&quot;confused&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Apply调用模式</strong></li></ul><p>JS是一门函数式的面向对象编程语言，所以函数可以拥有方法。</p><p><strong>apply方法：</strong> <code>apply</code>方法允许我们构建一个参数数组传递给调用函数，同时允许我们选择this的值。<code>apply</code>方法接收两个参数，第1个是要绑定给this的值，第2个是一个参数数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建一个包含两个数字的数组，并将它们相加</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = add.apply(<span class="literal">null</span>,array); <span class="comment">//sum=7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个包含status成员的对象</span></span><br><span class="line"><span class="keyword">var</span> statusObject = &#123;</span><br><span class="line">  <span class="attr">status</span>:<span class="string">&#x27;A-OK&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//statusObject并没有继承自Qup.prototype，但我们可以在statusObject上调用get_status方法，</span></span><br><span class="line"><span class="comment">//尽管statusObject并没有一个名为get_status的方法。</span></span><br><span class="line"><span class="keyword">var</span> status = Quo.prototype.get_status.apply(statusObject); <span class="comment">//status=&#x27;A-OK&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>参数</strong></li></ul><p><strong>arguments：</strong> 函数调用时会隐式传递<code>arguments</code>数组。函数通过此参数能访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形参的多余参数。利用该特性可以编写不需要指定参个数的函数，不过不是特别有用。</p><p><code>arguments</code>的语言设计错误：<code>arguments</code>并不是一个真正的数组。它只是一个<code>类似数组(array-like)</code>的对象。<code>arguments</code>拥有一个<code>length</code>属性，但它没有任何数组的方法。</p><ul><li><strong>返回</strong></li></ul><p><strong>正常返回：</strong> 函数从第一个语句开始执行，并在遇到关闭函数体的<code>&#125;</code>时结束。然后把控制权交还给调用该函数的程序。</p><p><strong>return：</strong> <code>return</code>语句可用来使函数提前返回。当<code>return</code>被执行时，函数立即返回而不再执行余下的语句。</p><p>一个函数总会返回一个值。如果没有指定返回值，则返回<code>undefined</code>。如果函数调用时在前面加上<code>new</code>前缀，且返回值不是一个对象，则返回<code>this</code>（该新对象）。</p><ul><li><strong>异常</strong></li></ul><p><strong>throw语句：</strong> <code>throw</code>中断函数的执行。它应该抛出一个<code>exception对象</code>（自定义对象），该对象包含一个用来识别异常类型的<code>name</code>属性和一个描述性的<code>message</code>属性，还可以添加其他属性。</p><p><strong>try catch：</strong> 一个<code>try</code>语句只会有一个捕获所有异常的<code>catch</code>代码块（跟Java异常机制不同）。</p><ul><li><strong>扩充类型的功能</strong></li></ul><p>通过给<code>Object.prototype</code>添加方法，可以让该方法对所有对象可用; 通过给<code>Function.prototype</code>增加方法，<br>可以使该方法对所有函数可用。由于JS原型继承的动态本质，新的方法立刻被赋予到所有的对象实例上，即使对象实例是在方法增加之前创建的。</p><p>功能扩充实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为Function.prototype增加method方法，方便以后创建新的方法</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name,func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.prototype[name])&#123; <span class="comment">//没有该方法时才添加</span></span><br><span class="line">        <span class="built_in">this</span>.prototype[name] = func;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为Number.prototype增加一个integer方法，用于提取数字中的整数部分</span></span><br><span class="line"><span class="built_in">Number</span>.method(<span class="string">&#x27;integer&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>[<span class="built_in">this</span>&lt;<span class="number">0</span> ? <span class="string">&#x27;ceil&#x27;</span> : <span class="string">&#x27;floor&#x27;</span>] (<span class="built_in">this</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为String添加移除字符串首尾空白的方法</span></span><br><span class="line"><span class="built_in">String</span>.method(<span class="string">&#x27;trim&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>递归</strong></li></ul><p><strong>递归函数：</strong> 直接或间接地调用自身的函数。</p><p><strong>汉诺塔问题：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hanoi = <span class="function"><span class="keyword">function</span>(<span class="params">disc,src,aux,dst</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(disc &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      hanoi(disc-<span class="number">1</span>,src,dst,aux);</span><br><span class="line">      <span class="built_in">document</span>.writeln(<span class="string">&#x27;Move disc &#x27;</span>+disc+<span class="string">&#x27; from &#x27;</span>+src+<span class="string">&#x27; to &#x27;</span>+dst);</span><br><span class="line">      hanoi(disc-<span class="number">1</span>,aux,src,dst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">&#x27;Src&#x27;</span>,<span class="string">&#x27;Aux&#x27;</span>,<span class="string">&#x27;Dst&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>递归函数操作树形结构：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义walk_the_DOM函数，它从某个指定的节点开始，按HTML源码中的顺序访问该树的每个节点。</span></span><br><span class="line"><span class="comment">//它会调用传入的函数，并依次传递每个节点给它。walk_the_DOM调用自身去处理每个子节点。</span></span><br><span class="line"><span class="keyword">var</span> walk_the_DOM = <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">node,func</span>)</span>&#123;</span><br><span class="line">    func(node);</span><br><span class="line">    node = node.firstChild;</span><br><span class="line">    <span class="keyword">while</span>(node)&#123;</span><br><span class="line">      walk(node,func);</span><br><span class="line">      node = node.nextSibling;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义getElementsByAttribute函数，它以一个属性名称字符串和一个可选的匹配值作为参数，调用</span></span><br><span class="line"><span class="comment">//walk_the_DOM，传递一个用来查找节点属性名的函数作为参数。匹配的节点累加到结果数组中。</span></span><br><span class="line"><span class="keyword">var</span> getElementsByAttribute = <span class="function"><span class="keyword">function</span>(<span class="params">att,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> results = [];</span><br><span class="line">    walk_the_DOM(<span class="built_in">document</span>.body, <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> actual = node.nodeType === <span class="number">1</span> &amp;&amp; node.getAttribute(attr);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> actual === <span class="string">&#x27;string&#x27;</span> &amp;&amp; (actual === value || <span class="keyword">typeof</span> value !== <span class="string">&#x27;string&#x27;</span>))&#123;</span><br><span class="line">              results.push(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>尾递归优化：</strong> 一种在函数的最后执行递归调用语句的特殊形式的递归。这意味着如果一个函数返回自身递归调用的结果，那么调用的过程会被替换为一个循环，它可以显著提高速度。But，JS当前没有提供尾递归优化。深度递归的函数可能会因为堆栈溢出而运行失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个带尾递归的函数（返回自身调用结果），JS没对这种形式的递归做优化。</span></span><br><span class="line"><span class="keyword">var</span> factorial = <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">i,a</span>)</span>&#123;</span><br><span class="line">    a = a || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> factorial(i-<span class="number">1</span>, a*i);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.writenln(factorial(<span class="number">4</span>)); <span class="comment">//24</span></span><br></pre></td></tr></table></figure><ul><li><strong>作用域</strong></li></ul><p><strong>作用域：</strong> 作用域控制变量和参数的可见性及生命周期。For us，作用域减少了名称冲突，并提供了自动内存管理。</p><p><strong>JS作用域：</strong> <strong>不支持块级作用域</strong>,支持函数作用域。定义在函数中的参数和变量在函数外部不可见，而在函数内部任何位置定义的变量，在该函数内部任何地方都可见。由于JS缺少块级作用域，所以不建议延迟声明变量，最好的做法是在函数体的顶部声明函数中可能用到的所有变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">7</span>, c = <span class="number">11</span>;</span><br><span class="line">        <span class="comment">//此时，a为3, b为7, c为11</span></span><br><span class="line">        a += b + c;</span><br><span class="line">        <span class="comment">//此时，a为21, b为7, c为11</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//此时，a为3, b为5, 而c还没定义</span></span><br><span class="line">    bar();</span><br><span class="line">    <span class="comment">//此时，a为21, b为5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>闭包</strong></li></ul><p>作用域的好处是内部函数可以访问定义它们的外部函数的参数和变量。当内部函数拥有比它的外部函数更长的生命周期时，内部函数引用的外部函数变量不会被释放（Java中一般会引起内存泄漏，而JS闭包恰好利用该特性）。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个myObj对象，把匿名函数调用结果赋值给它。</span></span><br><span class="line"><span class="keyword">var</span> myObj = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">0</span>;<span class="comment">//由于函数作用域，外部对value的操作只能基于return的对象的两个方法。</span></span><br><span class="line">  <span class="comment">//该匿名函数返回一个包含两个方法的对象，并且这些方法继续享有访问value变量的特权。</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span>(<span class="params">inc</span>)</span>&#123;</span><br><span class="line">      value += <span class="keyword">typeof</span> inc === <span class="string">&#x27;number&#x27;</span> ? inc : <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getValue</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p><strong>重构Quo构造器：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将status作为私有属性，提供对应的getter方法(原版本直接可以访问status，提供getter没意义，还需要显示new)。</span></span><br><span class="line"><span class="keyword">var</span> quo = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">get_status</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myQuo = quo(<span class="string">&quot;amazed&quot;</span>);<span class="comment">//由于不需要加上new，所以名字没有首字母大写</span></span><br><span class="line"><span class="built_in">document</span>.writeln(myQuo.get_status());</span><br></pre></td></tr></table></figure><p>注：当调用<code>quo</code>时，它返回一个包含<code>get_status</code>方法的新对象。该对象的一个引用保存在<code>myQuo</code>中。即使<code>quo</code>已经返回，但<code>get_status</code>方法仍然享有访问<code>quo</code>对象的<code>status</code>属性的特权。<code>get_status</code>方法并不是访问该参数的一个副本，而是参数本身。<strong>因为该函数可以访问它被创建时所处的上下文环境，这被称为闭包。</strong></p><p><strong>加深理解：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//糟糕的例子</span></span><br><span class="line"><span class="comment">//构造一个用于显示节点序号的函数，但由于用错误的方式给数组中的节点设置事件处理函数，而造成每次点击总是显示节点的数目</span></span><br><span class="line"><span class="keyword">var</span> add_the_handlers = <span class="function"><span class="keyword">function</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;nodes.length; i+=<span class="number">1</span>)&#123;</span><br><span class="line">        nodes[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            alert(i);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改良后的例子</span></span><br><span class="line"><span class="keyword">var</span> add_the_handlers = <span class="function"><span class="keyword">function</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            alert(i);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;nodes.length; i+=<span class="number">1</span>)&#123;</span><br><span class="line">        nodes[i].onclick = helper(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：避免在循环中创建函数，它可能只会带来无谓的计算，还会引起混淆。建议先在循环之外创建一个辅助函数，让辅助函数返回一个绑定当前i值的函数，这样就不会导致混淆。</p><ul><li><strong>回调</strong></li></ul><p><strong>回调：</strong> 函数使得对不连续事件的处理变得更容易，因为我们可以注册回调函数，以异步的方式处理请求。</p><ul><li><strong>C/S请求响应模式对比</strong></li></ul><p><strong>同步方式：</strong> 网络上的同步请求会导致客户端进入假死状态，特别是网络传输或服务器很慢时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request = prepare_the_request();</span><br><span class="line">response = send_request_synchronously(request);</span><br><span class="line">display(response);</span><br></pre></td></tr></table></figure><p><strong>异步方式：</strong> 发起异步请求，提供一个当服务器响应到达时随即触发的回调函数。异步函数立即返回，这样客户端就不会阻塞。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request = prepare_the_request();</span><br><span class="line">send_request_asynchronously(request,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    display(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>模块</strong></li></ul><p><strong>模块：</strong> 为了屏蔽JS全局变量的使用，我们可以使用函数和闭包来构造模块。模块是一个提供接口却隐藏状态与实现的函数或对象。</p><p><strong>模块模式：</strong> 模块模式利用了函数作用域和闭包来创建对象与私有成员的关联。在下面示例中，只有<code>deentityify</code>方法有权访问字符实体表这个数据对象。</p><p><strong>模块模式的一般形式：</strong> 一个定义了私有变量和函数的函数; 利用闭包创建可以访问私有变量和函数的特权函数; 最后返回这个特权函数，或把它们保存到一个可访问的地方。</p><p><strong>模块模式好处：</strong> 使用模块模式可以摒弃全局变量的使用。模块模式促进信息隐藏和其他优秀的设计实践，比如单例模式，利于应用程序的封装。模块模式也可以用来产生安全的对象，比如示例2中用来产生序列号的对象。</p><p><strong>模块示例：</strong> 为<code>String</code>增加<code>deentityify</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找字符串中的HTML字符实体并把它们替换为对应的字符。</span></span><br><span class="line"><span class="built_in">String</span>.method(<span class="string">&#x27;deentityify&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//字符实体表。它映射字符实体的名字到对应的字符。把该信息放到全局变量不合适，</span></span><br><span class="line"><span class="comment">//定义在函数的内部会带来运行时的损耗（每次执行此函数，该字面量都会被求值一次）。</span></span><br><span class="line"><span class="keyword">var</span> entity = &#123;</span><br><span class="line">    <span class="attr">quot</span>: <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">    <span class="attr">lt</span>: <span class="string">&#x27;&lt;&#x27;</span>,</span><br><span class="line">    <span class="attr">gt</span>: <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//返回deentityify方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//这才是deentityify方法。它调用字符串的replace方法，查找&#x27;&amp;&#x27;开头和&#x27;;&#x27;结束的子字符串。</span></span><br><span class="line"><span class="comment">//如果这些字符可以在实体表中找到，则将其替换为映射表中的值。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/&amp;([^&amp;;]+);/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = entity[b];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> r === <span class="string">&#x27;string&#x27;</span> ? r : a ;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">&#x27;&amp;lt;&amp;quot;&amp;gt&#x27;</span>.deentityify()); <span class="comment">//&lt;&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模块示例2：</strong> 产生序列号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> serial_marker = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prefix = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> seq = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">set_prefix</span>: <span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">          prefix = <span class="built_in">String</span>(p);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">set_seq</span>: <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">          seq = s;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">gensym</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> result = prefix + seq;</span><br><span class="line">          seq += <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//虽然seqer可变，且可以替换它的方法，但替换后的方法依然不能访问私有成员。</span></span><br><span class="line"><span class="keyword">var</span> seqer = serial_marker();</span><br><span class="line">seqer.set_prefix(<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">seqer.set_seq(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> unique = seqer.gensym(); <span class="comment">//unique=&#x27;Q1000&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>级联</strong></li></ul><p><strong>级联：</strong> 在单独一条语句中依次调用同一个对象的多个方法，关键是返回this而不是undefined。JQuery等JS框架常使用级联简化编程。级联技术可以产生极富表现力的接口，并保持单个接口的简单性。</p><ul><li><strong>柯里化</strong></li></ul><p><strong>柯里化：</strong> 也称局部套用，是把多参数函数转换为一系列单参数函数并进行调用的技术。柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。</p><p><strong>柯里化示例：</strong> curry</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//curry方法创建一个保存原始函数和要被套用的参数的闭包来工作。它返回另一个函数，该函数被调用时，</span></span><br><span class="line"><span class="comment">//会返回调用原始函数的结果，并传递调用curry时的参数加上当时调用的参数。</span></span><br><span class="line"><span class="built_in">Function</span>.method(<span class="string">&#x27;curry&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>, that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//Wrong! 本意使用Array的concat方法连接两个数组，但arguments不是真正的数组，它没有concat方法。</span></span><br><span class="line">      <span class="keyword">return</span> that.apply(<span class="literal">null</span>, args.concat(<span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//修正版：对两个arguments应用数组的slice方法，产生拥有concat方法的常规数组。</span></span><br><span class="line"><span class="built_in">Function</span>.method(<span class="string">&#x27;curry&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">      args = slice.apply(<span class="built_in">arguments</span>); <span class="comment">//arguments:传给原方法的参数</span></span><br><span class="line">      that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> that.apply(<span class="literal">null</span>, args.concat(slice.apply(<span class="built_in">arguments</span>)));<span class="comment">//arguments:传递给curry的参数</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>记忆</strong></li></ul><p><strong>记忆：</strong> 函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算，这种优化被称为记忆。JS的对象和数组能很方便的实现这种优化。</p><p><strong>带记忆功能的函数：</strong> memoizer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//memoizer取得一个初始的memo数组和formula函数，返回一个管理memo存储和调用formula的recur函数。</span></span><br><span class="line"><span class="comment">//把这个recur函数和它的参数传递给formula函数。</span></span><br><span class="line"><span class="keyword">var</span> memoizer = <span class="function"><span class="keyword">function</span>(<span class="params">memo, formula</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> recur = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = memo[n];</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> result !== <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">          result = formula(recur, n);</span><br><span class="line">          memo[n] = result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> recur;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//应用memoizer产生可记忆的阶乘函数</span></span><br><span class="line"><span class="keyword">var</span> factorial = memoizer([<span class="number">1</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span>(<span class="params">recur, n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * recur(n-<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="第5章-继承"><a href="#第5章-继承" class="headerlink" title="第5章 继承"></a>第5章 继承</h3><p><strong>继承的好处：</strong> 代码重用; 引入类型系统的规范，程序员无需做显式类型转换。</p><p><strong>JS的继承：</strong> JS是一门弱类型语言，从不需要类型转换。对于JS对象来说，重要的是它能做什么，而不是它从哪里来，它是什么（鸭式辩型）。JS基于原型的特性，意味着对象直接从其他对象继承，而不像基于类的语言。下面是JS常用的继承模式。</p><ul><li><strong>伪类</strong></li></ul><p><strong>原型与伪类：</strong> JS的原型存在诸多矛盾，它的某些复杂的语法看起来就像那些基于类的语言，这些语法问题掩盖了它的原型机制。它不能直接从其他对象继承，反而插入了一个多余的间接层：通过构造器函数产生对象。</p><p>当一个函数对象被创建时，Function构造器产生的函数对象会运行类似如下的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.prototype = &#123;<span class="attr">constructor</span>:<span class="built_in">this</span>&#125;;</span><br></pre></td></tr></table></figure><p>新函数对象被赋予一个prototype属性，它的值是一个包含constructor属性且属性值为该新函数的对象。这个prototype对象是存放继承特征的地方。由于JS语言没有提供确定构造器函数的方法（不像Java），所以每个函数都会得到一个prototype对象。constructor属性没什么用，重要的是prototype对象。</p><p>当采用构造器调用模式，即用new前缀去调用一个函数时，函数执行的方式会被修改。如果new运算符是一个方法而不是一个运算符，它可能会像这样执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.method(<span class="string">&#x27;new&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//创建一个继承构造器函数原型对象的新对象</span></span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">Object</span>.create(<span class="built_in">this</span>.prototype);</span><br><span class="line">  <span class="comment">//调用构造器函数，绑定-this-到新对象上</span></span><br><span class="line">  <span class="keyword">var</span> other = <span class="built_in">this</span>.apply(that, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">//如果它的返回值不是一个对象，就返回该新对象。</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> other === <span class="string">&#x27;object&#x27;</span> &amp;&amp; other) || that;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>伪类之伪：</strong> 伪类本意是想向面向对象靠拢，但它看起来格格不入。没有私有环境，所有的属性都是公开的，无法访问<code>super</code>（父类）的方法。更糟糕的是，使用构造器如果忘记加new前缀，那么this将不会绑定到新对象上，而是绑定到全局对象上。这样不但没有扩充新对象，反而破坏了全局变量环境。出现这种情况事，既没有编译时错误，也没有运行时警告。</p><p><strong>放弃伪类：</strong> 与其时刻担心忘记加new前缀，不如根本就不使用new（即使有构造器函数命名首字母大写的约定）。借鉴类的表示法可能误导程序员去编写过于深入与复杂的层次结构。许多复杂类层次结构产生原因是因为静态类型检查的约束，而JS完全摆脱了那些约束。在基于类的语言中，类继承是代码重用的唯一方式（当然还有组合），而JS有更多且更好的选择。所以放弃使用伪类，坚持JS的本色！</p><ul><li><strong>对象说明符</strong></li></ul><p><strong>对象说明符：</strong> 使用对象说明符来描述要构建的对象规格说明，而不是传一大串参数，这样可以避免参数顺序的问题，又能和JSON配合。</p><ul><li><strong>原型</strong></li></ul><p><strong>原型，从构造有用对象开始：</strong> 在一个纯粹的原型模式中，我们会摒弃类，转而专注于对象。基于原型的继承比基于类的继承在概念上更为简单：一个新对象可以继承一个旧对象的属性。通过构造一个有用的对象，接着构造更多类似的对象，这就可以完全避免把一个应用拆解成一系列嵌套抽象类的分类过程。</p><p><strong>差异化继承：</strong> 通过定制一个新的对象，我们指明它与所基于的基本对象的区别。</p><ul><li><strong>函数化</strong></li></ul><p><strong>函数化：</strong> 前面几种继承模式的一个弱点是没法保护隐私。对象的所有属性都是可见的。我们无法得到私有变量和私有函数。不要试图通过<strong>伪装私有（pretend privacy）</strong>来实现私有属性的保护（给私有属性起个怪模怪样的名字，并希望其他使用代码的用户假装看不到这些奇怪的成员，掩耳盗铃！），应该使用模块模式来完成该效果！</p><p>函数化，从构造一个生成对象的函数开始：</p><ol><li>创建一个新对象。构造方式很多，比如构造一个对象字面量，或者new+构造器函数，或者调用任意一个会返回对象的函数。</li><li>有选择地定义私有实例变量和方法。这些就是函数中通过var语句定义的普通变量。</li><li>给这个新对象扩充方法。这些方法拥有特权去访问变量，以及在第2步中通过var语句定义的变量。</li><li>返回这个新对象。</li></ol><p>伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spec对象包含构造器需要构造新实例的所有信息。</span></span><br><span class="line"><span class="keyword">var</span> <span class="title">constructor</span> = <span class="title">function</span>(<span class="params">spec, my</span>)&#123;</span><br><span class="line">    <span class="comment">//声明该对象私有的实例变量和方法</span></span><br><span class="line">    <span class="keyword">var</span> that, 其他私有变量实例;</span><br><span class="line">    <span class="comment">//my为继承链中的构造器提供秘密共享的容器,可选</span></span><br><span class="line">    my = my || &#123;&#125;;</span><br><span class="line">    <span class="comment">//把共享的变量和函数添加到my中;</span></span><br><span class="line">    my.member = value;</span><br><span class="line">    .....</span><br><span class="line">    <span class="comment">//构造新对象并赋值给that</span></span><br><span class="line">    that = 一个新对象;</span><br><span class="line">    <span class="comment">//扩充that，添加组成该对象接口的特权方法</span></span><br><span class="line">    <span class="keyword">var</span> methodical = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;;</span><br><span class="line">    that.methodical = methodical;</span><br><span class="line">    <span class="comment">//返回that</span></span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mammal = <span class="function"><span class="keyword">function</span>(<span class="params">spec</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = &#123;&#125;;</span><br><span class="line">    that.get_name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> spec.name;</span><br><span class="line">    &#125;;</span><br><span class="line">    that.says = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> spec.saying || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myMammal = mammal(&#123;<span class="attr">name</span>: <span class="string">&#x27;Herb&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>父类方法：</strong> 函数化模式给我们提供处理父类方法的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个superior方法，它取得一个方法名并返回调用那个方法的函数。该函数会调用原来的方法。</span></span><br><span class="line"><span class="built_in">Object</span>.method(<span class="string">&#x27;superior&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>, method = that[name];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method.apply(that, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>函数化模式优点：</strong> 函数化模式有很大的灵活性。相比伪类模式，它不仅带来的工作更少，还让我们得到更好的封装和信息隐藏，以及访问父类方法的能力。如果对象的所有状态都是私有的，那就可以保证对象的完整性不被破坏。如果使用函数化样式创建一个对象，并且该对象的所有方法都不使用this或that，那该对象就是持久性的。一个持久性对象就是一个简单功能函数的集合。一个持久性的对象不会被入侵。访问一个持久性的对象时，除非有方法授权，否则攻击者不能访问对象的内部状态。</p><ul><li><strong>部件</strong></li></ul><p>一套部件组装出对象。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个给任何对象添加简单事件处理特性的函数。</span></span><br><span class="line"><span class="comment">//它会给对象添加一个on方法，一个fire方法和一个私有的事件注册对象。</span></span><br><span class="line"><span class="keyword">var</span> eventuality = <span class="function"><span class="keyword">function</span>(<span class="params">that</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> registry = &#123;&#125;;</span><br><span class="line">   <span class="comment">//在一个对象上触发事件。该事件可以是一个包含事件名称的字符串，或一个拥有包含事件名称的</span></span><br><span class="line">   <span class="comment">//type属性的对象。通过&#x27;on&#x27;方法注册的事件处理程序中匹配事件名称的函数将被调用。</span></span><br><span class="line">   that.fire = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> array, func, handler, i, type = <span class="keyword">typeof</span> event === <span class="string">&#x27;string&#x27;</span> ? event : event.type;</span><br><span class="line">      <span class="comment">//如果这个事件存在一组事件处理程序，则遍历它们并按顺序依次执行。</span></span><br><span class="line">      <span class="keyword">if</span>(registry.hasOwnProperty(type))&#123;</span><br><span class="line">          array = registry[type];</span><br><span class="line">          <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;array.length; i += <span class="number">1</span>)&#123;</span><br><span class="line">              handler = array[i];</span><br><span class="line">              <span class="comment">//每个处理程序包含一个方法和一组可选的参数。</span></span><br><span class="line">              <span class="comment">//如果该方法是一个字符串形式的名字，那么就寻找该函数。</span></span><br><span class="line">              func = handler.method;</span><br><span class="line">              <span class="keyword">if</span>(<span class="keyword">typeof</span> func === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">                  func = <span class="built_in">this</span>[func];</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//调用一个处理程序。如果该条目包含参数，那么传递它们过去，否则，传递该事件对象。</span></span><br><span class="line">              func.apply(<span class="built_in">this</span>, handler.parameters || [event]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"><span class="comment">//注册一个事件。构造一条处理程序条目，并将它插入到处理程序数组中，如果不存在该类型的事件，则构造一个。</span></span><br><span class="line">    that.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, method, parameters</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> handler = &#123;</span><br><span class="line">            <span class="attr">method</span> : method,</span><br><span class="line">            <span class="attr">parameters</span> : parameters</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(registry.hasOwnProperty(type))&#123;</span><br><span class="line">            registry[type].push(handler);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            registry[type] = [handler];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> that;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第6章-数组"><a href="#第6章-数组" class="headerlink" title="第6章 数组"></a>第6章 数组</h3><p><strong>数组：</strong> 一段线性分配的内存，通过整数计算偏移并访问其中的元素。数组是一种性能出色的数据结构。不幸的，JS没有提供这样的结构。</p><p><strong>JS数组：</strong> JS提供一种拥有一些<code>类数组（array-like）</code>特性的对象。它把数组的下标转变为字符串，用其作为属性。它明显比一个真正的数组慢，但使用起来更方便。属性的检索和更新的方式与对象一模一样，只不过多一个可以用整数作为属性名的特性。</p><ul><li><strong>数组字面量</strong></li></ul><p><strong>数组字面量：</strong> 数组字面量提供一种非常方便地创建新数组的表示法。JS数组允许混合类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty = [];</span><br><span class="line"><span class="comment">//数组的第一个值将获得属性名&#x27;0&#x27;，第二个值将获得属性名&#x27;1&#x27;，依次类推:</span></span><br><span class="line"><span class="keyword">var</span> numbers = [</span><br><span class="line"><span class="string">&#x27;zero&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;six&#x27;</span>, <span class="string">&#x27;seven&#x27;</span>, <span class="string">&#x27;eight&#x27;</span>, <span class="string">&#x27;nine&#x27;</span>, <span class="string">&#x27;ten&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">empty[<span class="number">1</span>]; <span class="comment">//undefined</span></span><br><span class="line">numbers[<span class="number">1</span>]; <span class="comment">//&#x27;one&#x27;</span></span><br><span class="line"></span><br><span class="line">empty.length; <span class="comment">//0</span></span><br><span class="line">numbers.length; <span class="comment">//10</span></span><br></pre></td></tr></table></figure><ul><li><strong>长度</strong></li></ul><p><strong>JS数组长度：</strong> JS数组的length没有上界，如果你用大于或等于当前length的数字作为下标来存储一个元素，那么lengt值会被增大以容纳新元素，不会发生数组越界错误。</p><p>注意：<strong>length属性的值是这个数组最大整数属性名加上1，不一定等于数组里属性的个数!</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [];</span><br><span class="line">myArray.length; <span class="comment">//0</span></span><br><span class="line">myArray[<span class="number">10000</span>] = <span class="literal">true</span>;</span><br><span class="line">myArray.length; <span class="comment">//10001</span></span><br></pre></td></tr></table></figure><p>[]后置下标运算符：[]后置下表运算符把它所含的表达式转换成一个字符串，如果该表达式有toString方法，就使用方法的值。这个字符串将被用作属性名。如果这个字符串看起来像一个大于等于这个数组当前length且小于2^32-1的正整数，那么这个数组的length将会被重新设置为新的下标加1。可以直接设置length的值，设置更大的length不会给数组分配更多的空间，但把length设小将导致所有下标大于等于length的属性被删除。</p><ul><li><strong>删除</strong></li></ul><p><strong>删除：</strong> 由于JS数组是对象，所以delete运算符可以用来从数组中移除元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除之后数组会留下一个空洞，除非移动每个数组的元素</span></span><br><span class="line"><span class="keyword">delete</span> numbers[<span class="number">2</span>];<span class="comment">//numbers 是[&#x27;zero&#x27;, &#x27;one&#x27;, undefined, &#x27;three&#x27;...]</span></span><br></pre></td></tr></table></figure><p>splice方法：如果即想删除元素又不想留下空洞，可以使用splice方法。由于需要移除和重新插入，splice对于大型数组来说可能效率不高。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第1个参数是数组中的一个序号，第2个参数是要删除的元素个数。</span></span><br><span class="line"><span class="comment">//任何额外的参数都会在序号那个点的位置被插入到数组中。</span></span><br><span class="line">numbers.splice(<span class="number">2</span>, <span class="number">1</span>);<span class="comment">//numbers 是[&#x27;zero&#x27;, &#x27;one&#x27;, &#x27;three&#x27;...]</span></span><br></pre></td></tr></table></figure><ul><li><strong>枚举</strong></li></ul><p><strong>for in：</strong> 由于JS数组其实就是对象，所以可以用for in语句来遍历一个数组的所有属性。遗憾的是，for in无法保证属性的顺序，而大多数要遍历数组的场合都期望按照阿拉伯数字顺序产生元素。此外，可能从原型中得到意外属性的问题依旧存在。</p><p><strong>for循环：</strong> 常规的for语句可以避免for in语句的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;arrays.length; i+=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.writeln(arrays[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>容易混淆的地方</strong></li></ul><p><strong>对象与数组的选择：</strong> 当属性名是小而连续的整数时，你应该使用数组。否则，使用对象。JS本身对数组和对象的区别是混乱的。typeof运算符报告数组的类型是’object’，这没有任何意义。</p><p><strong>如何区别对象和数组：</strong> is_array（JS没有提供相应机制）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此方法不能识别从不同的窗口(window)或帧(frame)里构造的数组。</span></span><br><span class="line"><span class="keyword">var</span> is_array = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value.constructor === <span class="built_in">Array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//better</span></span><br><span class="line"><span class="keyword">var</span> is_array = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.apply(value) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>方法</strong></li></ul><p><strong>Array.prototype：</strong> 可以通过<code>Array.prototype</code>给数组扩充方法。</p><ul><li><strong>指定初始值</strong></li></ul><p>JS数组通常不会预置值。如果你用[]得到一个新数组，它将是空的。如果你访问一个不存在的元素，得到的值则是undefined。JS应该提供为数组指定初始值的方法，但我们可以弥补这个疏忽：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.dim = <span class="function"><span class="keyword">function</span>(<span class="params">dimension, initial</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = [], i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;dimension; i++)&#123;</span><br><span class="line">      a[i] = initial;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建一个包含10个0的数组</span></span><br><span class="line"><span class="keyword">var</span> myArray = <span class="built_in">Array</span>.dim(<span class="number">10</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>多维数组：</strong> JS没有多为数组，但就像大多数类C语言一样，它支持元素为数组的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> matrix = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">];</span><br><span class="line">matrix[<span class="number">2</span>][<span class="number">1</span>]; <span class="comment">//7</span></span><br><span class="line"><span class="comment">//注意：Array.dim(n, [])在这里不能工作，如果使用它，每个元素都指向同一个数组的引用，后果不堪设想。</span></span><br></pre></td></tr></table></figure><p><strong>初始化多维数组：</strong> 一个空的矩阵每个单元都会拥有一个初始值undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.matrix = <span class="function"><span class="keyword">function</span>(<span class="params">m, n, initial</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a, i, j, mat=[];<span class="comment">//由于JS变量作用域问题，将变量在函数体最前面声明。</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">      a = [];</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">        a[j] = initial;</span><br><span class="line">      &#125;</span><br><span class="line">      mat[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mat;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造一个用0填充的4X4矩阵</span></span><br><span class="line"><span class="keyword">var</span> myMatrix = <span class="built_in">Array</span>.matrix(<span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">document</span>.writeln(myMatrix[<span class="number">3</span>][<span class="number">3</span>]); <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h3 id="第7章-正则表达式"><a href="#第7章-正则表达式" class="headerlink" title="第7章 正则表达式"></a>第7章 正则表达式</h3><p><strong>正则表达式：</strong> 一门简单语言的语法规范，它应用在一些方法中，对字符串中的信息实现查找，替换和提取操作。JS中，正则表达式相较于等效的字符串处理有着显著的性能优势。JS正则表达式不支持注释和空白。</p><ul><li><strong>一个例子</strong></li></ul><p><strong>匹配URL：</strong> parse_url</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parse_url = <span class="regexp">/^(?:([A-Za-z]+):)?(\/&#123;0,3&#125;)([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/</span>;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://www.ora.com:80/goodparts?q#fragement&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = parse_url.exec(url);</span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;scheme&#x27;</span>, <span class="string">&#x27;slash&#x27;</span>, <span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;port&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;hash&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> blanks = <span class="string">&#x27;    &#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;names.length; i++)&#123;</span><br><span class="line">    <span class="built_in">document</span>.writeln(names[i] + <span class="string">&#x27;:&#x27;</span> + blanks.substring(names[i].length), result[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="attr">url</span>: http:<span class="comment">//www.ora.com:80/goodparts?q#fragement</span></span><br><span class="line">scheme: http</span><br><span class="line"><span class="attr">slash</span>: <span class="comment">//</span></span><br><span class="line">host: www.ora.com</span><br><span class="line"><span class="attr">port</span>: <span class="number">80</span></span><br><span class="line"><span class="attr">path</span>: goodsparts</span><br><span class="line"><span class="attr">query</span>: q</span><br><span class="line"><span class="attr">hash</span>: fragment</span><br></pre></td></tr></table></figure><ul><li><strong>结构</strong></li></ul><p><strong>创建RegExp对象的两个方法：</strong> 正则表达式字面量（优先考虑）和使用RegExp构造器。</p><p><strong>正则表达式字面量：</strong> 正则表达式字面量被包围在一对斜杠中，这多少有点令人迷惑，因为斜杠也被用作除法运算符和注释符。</p><p><strong>正则表达式标识：</strong></p><table><thead><tr><th>标识</th><th align="right">含义</th></tr></thead><tbody><tr><td>g</td><td align="right">全局的(匹配多次;不同的方法对g标识的处理各不相同)</td></tr><tr><td>i</td><td align="right">大小写不敏感（忽略字符大小写）</td></tr><tr><td>m</td><td align="right">多行（^和$能匹配行结束符）</td></tr></tbody></table><p>RegExp构造器：使用RegExp构造器创建正则表达式时需要注意双写反斜杠以及对引号进行转义。RegExp构造器适用于必须在运行时动态生成正则的情形。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个匹配JS字符串的正则</span></span><br><span class="line"><span class="keyword">var</span> my_regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\&quot;(?:\\\\.|[^\\\\\\\&quot;])*\&quot;&quot;</span>,<span class="string">&#x27;g&#x27;</span>);</span><br></pre></td></tr></table></figure><p>RegExp对象的属性：</p><table><thead><tr><th>属性</th><th align="right">用法</th></tr></thead><tbody><tr><td>global</td><td align="right">如果标识g被使用，值为true</td></tr><tr><td>ignoreCase</td><td align="right">如果标识i被使用，值为true</td></tr><tr><td>lastIndex</td><td align="right">下一次exec匹配开始的索引，初始值为0</td></tr><tr><td>multiline</td><td align="right">如果标识m被使用，值为true</td></tr><tr><td>source</td><td align="right">正则表达式源码文本</td></tr></tbody></table><p>正则对象共享问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_a_matcher</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/a/gi</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = marke_a_matcher();</span><br><span class="line"><span class="keyword">var</span> y = make_a_matcher();</span><br><span class="line"><span class="comment">//当心！x和y是相同的对象！</span></span><br><span class="line">x.lastIndex = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">document</span>.writeln(y.lastIndex); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ul><li><strong>元素</strong></li></ul><p><strong>正则表达式分支：</strong> 一个正则表达式分支包含一个或多个正则表达式序列。这些序列被<code>|</code>字符分割。如果这些序列中的任何一项符合匹配条件，那这个选择就被匹配。它尝试按顺序依次匹配这些序列项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配in，不会匹配int，因为in已被成功匹配</span></span><br><span class="line"><span class="string">&quot;into&quot;</span>.match(<span class="regexp">/in|int/</span>);</span><br></pre></td></tr></table></figure><p><strong>正则表达式序列：</strong> 一个正则表达式序列包含一个或多个正则表达式因子。每个因子能选择是否跟随一个量词，这个量词决定着这个因子被允许出现的次数。如果没有指定这个量词，那么该因子只会被匹配一次。</p><p><strong>正则表达式因子：</strong> 一个正则表达式因子可以是一个字符，一个由圆括号包围的组，一个字符类，或一个转义序列。除了控制字符和特殊字符以外，所有的字符都会被按照字面处理：<code>\ / [ ] &#123; &#125; ? + * | . ^ $</code> (如果希望这些字符按字面去匹配，需要用\前缀对其进行转义)。一个未被转义的.会匹配除行结束符以外的任何字符。当lastIndex属性值为0时，一个未转义的^会匹配文本的开始。当指定了m标识时，它也能匹配行结束符。一个未转义的$将匹配文本的结束。当指定了m标识时，它也能匹配行结束符。</p><p><strong>正则表达式转义：</strong></p><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td><code>\f</code></td><td>换页符</td></tr><tr><td><code>\n</code></td><td>换行符</td></tr><tr><td><code>\r</code></td><td>回车符</td></tr><tr><td><code>\t</code></td><td>制表符(tab)</td></tr><tr><td><code>\u</code></td><td>unicode字符表示的十六进制常量。</td></tr><tr><td><code>\d</code></td><td>匹配一个数字，<code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>表示与<code>\d</code>其相反，<code>[^0-9]</code></td></tr><tr><td><code>\s</code></td><td>等同于<code>[\f\n\r\t\u000B\0020\u00A0\u2028\u2029]</code>，这是<code>unicode</code>空白符的一个不完全子集</td></tr><tr><td><code>\S</code></td><td>表示与<code>\s</code>其相反的：<code>[^\f\n\r\t\u000B\0020\u00A0\u2028\u2029]</code></td></tr><tr><td><code>\w</code></td><td>等同于<code>[0-9A-Z_a-z]</code></td></tr><tr><td><code>\W</code></td><td>表示与<code>\w</code>其相反的：<code>[^0-9A-Z_a-z]</code>，<code>\W</code>本意是希望表示出现在话语中的字符。遗憾的是，它所定义的类实际上对任何真正的语言来说都不起作用。如果你需要匹配信件一类的文本，你必须指定自己的类。</td></tr><tr><td><code>\b</code></td><td>字边界标识，它能方便的对文本的字边界进行匹配。遗憾的是，它使用<code>\w</code>去寻找字边界，所以它对多语言应用来说是完全无用的。这并不是一个好的特性。</td></tr><tr><td><code>\1</code></td><td>指向分组1所捕获到的文本的一个引用，所以它能被再次匹配。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于搜索文本中重复的单词,该单词的后面跟着一个或多个空白，然后再跟着与它相同的单词。</span></span><br><span class="line"><span class="keyword">var</span> doubled_words = <span class="regexp">/([A-Za-z\u00C0-\u1FFF\u2800-\uFFFD]+)\s+\1/gi</span>;</span><br></pre></td></tr></table></figure><p><strong>分组：</strong></p><ol><li>捕获型：一个捕获型分组是一个被包围在圆括号中的正则表达式分支。任何匹配这个分组的字符都会被捕获。每个捕获型分组都被指定了一个数字。在正则表达式中第一个捕获（的是分组1,第二个捕获（的是分组2。</li><li>非捕获型：非捕获型分组有一个(?:前缀。非捕获型分组仅做简单的匹配，并不会捕获所匹配的文本。这会带来微弱的性能优势。非捕获型分组不会干扰捕获型分组的编号。</li><li>向前正向匹配（positive lookahead）：向前正向匹配分组有一个(?=前缀。类似于非捕获型分组，但在这个组匹配后，文本会倒回到它开始的地方，实际上并不匹配任何东西。这不是一个好的特性。</li><li>向前负向匹配（negative lookahead）：向前负向匹配分组有一个(?!前缀。类似于向前正向匹配，但只有当它匹配失败时它才继续向前进行匹配。这不是一个好的特性。</li></ol><p><strong>正则表达式字符集（RegExp Class）：</strong> 正则表达式字符集是一种指定一组字符的便利方式。例如，如果想匹配一个元音字母，可以写做(?:a|e|i|o|u)，但更方便方法应该是写成一个类[aeiou]。类提供另外两个便利。第1个是能够指定字符范围，比如[a-z]。另一个方便之处是类的求反。如果[后的第一个字符是^，那么这个类会排除这些特殊字符，比如[^a-z]会匹配任何一个非小写字母的字符。</p><p><strong>正则表达式字符转义（RegExp Class Escape）：</strong> 在字符类中需要转义的特殊字符<code>- / [ \ ] ^</code></p><p><strong>正则表达式量词：</strong> 正则表达式因子可以用一个正则表达式量词后缀来决定这个因子应该被匹配的次数。包围在一个花括号中的一个数字表示这个因子应该被匹配的次数。<code>？</code>等同于<code>&#123;0,1&#125;</code>，<code>*</code>等同于<code>&#123;0,&#125;</code>，<code>+</code>等同于<code>&#123;1,&#125;</code>。如果只有一个量词，表示趋向于进行贪婪性匹配，即匹配尽可能多的副本直至达到上限。如果这个量词附加一个后缀?，则表示趋向于进行非贪婪匹配，即只匹配必要的副本。一般情况下最好坚持使用贪婪匹配。</p><h3 id="第8章-方法"><a href="#第8章-方法" class="headerlink" title="第8章 方法"></a>第8章 方法</h3><ul><li><strong>Array</strong></li></ul><p><strong>array.concat(item…)：</strong>  concat方法产生一个新数组，它包含一份array的浅复制（shallow copy）并把一个或多个参数item附加在其后。如果参数item是一个数组，那么它的每个元素都会被分别添加。功能和<code>array.push(item...)</code>类似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> c = a.concat(b, <span class="literal">true</span>);<span class="comment">// c=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, true];</span></span><br></pre></td></tr></table></figure><p><strong>array.join(separator)：</strong> join方法把一个array中的每个元素构造成一个字符串，并用separator分隔符把它们连接在一起。默认的separator是逗号’,’。可以使用空白字符串作为separator实现无间隔的连接。对于连接大量的字符串片段，将它们放到一个数组中并用join方法连接通常比+元素运算符连接效率高。（注：<strong>现在多数浏览器对+运算符连接字符串做了特别优化，性能已显著高于Array.join()，多数情况下，建议连接字符串首选+运算符</strong>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">a.push(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> c = a.join(<span class="string">&#x27; &#x27;</span>); <span class="comment">//c = &#x27;abcd&#x27;;</span></span><br></pre></td></tr></table></figure><p><strong>array.pop()：</strong> pop方法移除array中的最后一个元素并返回该元素。如果array是empty，它会返回undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> c = a.pop(); <span class="comment">//c = &#x27;c&#x27;, a = [&#x27;a&#x27;, &#x27;b&#x27;];</span></span><br><span class="line"><span class="comment">//pop的一种实现方式</span></span><br><span class="line"><span class="built_in">Array</span>.method(<span class="string">&#x27;pop&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.splice(<span class="built_in">this</span>.length - <span class="number">1</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>array.push(item…)：</strong> push方法把一个或多个参数item附加到一个数组的尾部。和concat方法不同的是，它会修改array，如果参数item是一个数组，它会把参数数组作为单个元素整个添加到数组中，并返回这个array的新长度值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> c = a.push(b, <span class="literal">true</span>); <span class="comment">// a=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;], true] , c=5。</span></span><br><span class="line"><span class="comment">//push可以这样实现</span></span><br><span class="line"><span class="built_in">Array</span>.method(<span class="string">&#x27;push&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.splice.apply(<span class="built_in">this</span>,</span><br><span class="line">        [<span class="built_in">this</span>.length, <span class="number">0</span>].concat(<span class="built_in">Array</span>.prototype.splice.apply(<span class="built_in">arguments</span>)));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>array.reverse()：</strong> reverse方法反转array里的元素的顺序，并返回array本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.reverse();<span class="comment">//a=b=[&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>array.shift()：</strong> shift方法移除数组array中的第1个元素并返回该元素。如果这个数组array是空的，则返回undefined。shift通常比pop慢得多：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> c = a.shift(); <span class="comment">//a=[&#x27;b&#x27;, &#x27;c&#x27;], c=&#x27;a&#x27;</span></span><br><span class="line"><span class="comment">//shift可以这样实现</span></span><br><span class="line"><span class="built_in">Array</span>.method(<span class="string">&#x27;shift&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.splice(<span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>array.slice(star, end)：</strong> slice方法对array中的一段做浅复制。end参数可选，默认是array.length。如果两个参数中的任何一个是负数，array.length会和它们相加，试图让它们变成非负数。如果start大于等于array.length，得到的结果是一个新的空数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">//b=[&#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> c = a.slice(<span class="number">1</span>); <span class="comment">//c=[&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> d = a.slice(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//d=[&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>array.sort(comparefn)：</strong> sort方法对array中的内容进行排序。它不能正确地给一组数字排序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS的默认比较函数把要被排序的元素都视为字符串。</span></span><br><span class="line"><span class="keyword">var</span> n = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>];</span><br><span class="line">n.sort(); <span class="comment">//n=[15, 16, 23, 4, 42, 8]</span></span><br><span class="line"><span class="comment">//自定义比较函数：相等返回0, 第1个参数排列在前面则返回一个负数，否则返回一个正数</span></span><br><span class="line">n.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;); <span class="comment">// n=[4, 8, 15, 16, 23, 42];</span></span><br><span class="line"><span class="comment">//如果想使排序适用范围更广，需要判断元素类型。</span></span><br></pre></td></tr></table></figure><p><strong>array.splice(start, deleteCount, item…)：</strong> splice方法从array中移除一个或多个元素，并用新的item替换它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//splice主要用于从一个数组中删除元素</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> r = a.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;ache&#x27;</span>, <span class="string">&#x27;bug&#x27;</span>);</span><br><span class="line"><span class="comment">//a = [&#x27;a&#x27;, &#x27;ache&#x27;, &#x27;bug&#x27;, &#x27;c&#x27;], r = [&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>array.unshift(item…)：</strong> unshift方法像push方法一样，用于把元素添加到数组中，但它是把item插入到array的开始部分而不是尾部。它返回array的新length。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> r = a.unshift(<span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line"><span class="comment">//a=[&#x27;?&#x27;, &#x27;@&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;] , r=5</span></span><br></pre></td></tr></table></figure><ul><li><strong>Function</strong></li></ul><p><strong>function.apply(thisArg, argArray)：</strong>  apply方法调用function，传递一个会被绑定到this上的对象和一个可选的数组作为参数。apply方法被用在apply调用模式中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bnd:返回一个函数，调用这个函数就像调用那个对象的一个方法</span></span><br><span class="line"><span class="built_in">Function</span>.method(<span class="string">&#x27;bind&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">that</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> method = <span class="built_in">this</span>,</span><br><span class="line">      slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">      args = slice.apply(<span class="built_in">arguments</span>, [<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method.apply(that, args.concat(slice.apply(<span class="built_in">arguments</span>, [<span class="number">0</span>])));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> x = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">&#125;.bind(&#123;<span class="attr">value</span>: <span class="number">666</span>&#125;);</span><br><span class="line">alert(x()); <span class="comment">//666</span></span><br></pre></td></tr></table></figure><ul><li><strong>Number</strong></li></ul><p><strong>number.toExponential(fractionDigits)：</strong>  把number转换成一个指数形式的字符串。可选参数fractionDigits控制其小数点后的数字位数，值必须在0~20。</p><p><strong>number.toFixed(fractionDigits)：</strong>  把number转换为一个十进制数形式的字符串。可选参数fractionDigits控制其小数点后的数字位数，值必须在0～20,默认为0。</p><p><strong>number.toPrecision(precision)：</strong>  把number转换为一个十进制数形式的字符串。可选参数precision控制数字的精度，值必须在0～21。</p><p><strong>number.toString(radix)：</strong>  把number转换为一个字符串。可选参数radix控制基数，值必须在2～36，默认为10。通常情况下，number.toString()可以简单地写为String(number);</p><ul><li><strong>Object</strong></li></ul><p><strong>object.hasOwnProperty(name)：</strong>  如果这个object包含一个名为name的属性，那么hasOwnProperty方法返回true。原型链中的同名属性不会被检查，当name为”hasOwnProperty”时不起作用，返回false。</p><ul><li><strong>RegExp</strong></li></ul><p><strong>regexp.exec(string)：</strong> 如果成功匹配regexp和字符串string，则返回一个数组。数组中下标为0的元素将包含正则表达式regexp匹配的子字符串。下标为1的元素是分组1捕获的文本，下标为2的元素是分组2捕获的文本，依次类推。如果匹配失败，则返回null。</p><p><strong>exec循环调用：</strong> 如果regexp带有一个g标识（全局标识），那么查找将从regexp.lastIndex（初始值为0）位置开始。如果匹配成功，那regexp.lastIndex将被设置为该匹配后第一个字符的位置。不成功的匹配将设置regexp.lastIndex为0。这允许你通过循环exec去查询一个匹配模式在一个字符串中发生了几次。需要注意的是，如果你提前退出了循环，再次进入这个循环前必须把regexp.lastIndex重置为0。而且，^因子仅匹配regexp.lastIndex为0的情况。</p><p><strong>regexp.test(string)：</strong>  如果regexp匹配string，则返回true; 否则，返回false。不要对这个方法使用g标识。</p><ul><li><strong>String</strong></li></ul><p>参考JS String API! 使用类似Java String。</p><h3 id="第9章-代码风格"><a href="#第9章-代码风格" class="headerlink" title="第9章 代码风格"></a>第9章 代码风格</h3><ul><li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html">Google JavaScript 代码风格指南</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md">Google JSON 风格指南</a></li><li><a href="https://github.com/geekplux/coffeescript-style-guide">CoffeeScript 编码风格指南</a></li></ul><h3 id="第10章-优美的特性"><a href="#第10章-优美的特性" class="headerlink" title="第10章 优美的特性"></a>第10章 优美的特性</h3><ul><li>函数是顶级对象</li><li>基于原型继承的动态对象</li><li>对象字面量和数组字面量</li></ul><h3 id="附录A-毒瘤"><a href="#附录A-毒瘤" class="headerlink" title="附录A 毒瘤"></a>附录A 毒瘤</h3><ul><li><p>全局变量</p><ol><li>在任何函数之外通过var声明的变量。</li><li>直接给全局对象添加一个属性，比如web浏览器的全局对象window。</li><li>直接使用未经声明的变量，这被称为隐式的全局变量：foo = value;</li></ol></li><li><p>作用域</p></li></ul><p>JS没有提供块级作用域：代码块中声明的变量在包含此代码块的函数的任何位置都是可见的。最好在每个函数的开头部分声明所有变量。</p><ul><li>自动插入分号</li></ul><p>JS自动修复机制：通过自动插入分号来修正有缺损的程序。但是，它可能会掩盖更为严重的错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果return语句返回一个值，这个值表达式的开始部分必须和return位于同一行。</span></span><br><span class="line"><span class="keyword">return</span>  <span class="comment">//自动插入分号会让它返回undefined</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">status</span> : <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  <span class="attr">status</span> : <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>保留字</p></li><li><p>Unicode</p></li><li><p>typeof</p><p><code>typeof</code>不能区分<code>null</code>和对象，<code>typeof null</code> 返回的是<code>object</code>。</p></li><li><p>parseInt</p></li></ul><p>parseInt是一个把字符串转换为整数的函数。它遇到非数字时会停止解析，<code>parseInt(&quot;16&quot;)</code>和<code>parseInt(&quot;16 tons&quot;)</code>产生的结果相同。如果该字符串第1个字符是0,那么该字符串会基于八进制而不是十进制来求值。在八进制中，8和9不是数字，所以<code>parseInt(&quot;08&quot;)</code>和<code>parseInt(&quot;09&quot;)</code>结果都是0。这个错误会导致程序解析日期和时间时出现问题。幸运的是，parseInt可以接受一个基数作为参数，<code>parseInt(&quot;08&quot;,10)</code>结果为8，建议加上基数参数。</p><ul><li>+</li></ul><p>+运算符可以用于加法运算或字符串连接，具体如何执行取决于参数的类型。如果想使用+做加法运算，需确保两个运算数都是整数。</p><ul><li>浮点数</li></ul><p>二进制的浮点数不能正确地处理十进制的小数，因此0.1+0.2不等于0.3。不过，浮点数中的整数运算是精确的，小数可以通过指定精度来避免错误。常见的货币转换，可以先将元乘以100转换为分，然后用分进行计算，最后再除以100转换为元。</p><ul><li>NaN</li></ul><p><code>NaN</code>是IEEE754中定义的一个特殊的数量值，用于表示不是一个数字，尽管<code>typeof NaN === &#39;number&#39;</code>返回true。</p><p><strong>判断数字和NaN：</strong> typeof不能辨别<code>NaN</code>和数字，而且<code>NaN</code>也不等于它自己。如果需要区分数字和<code>NaN</code>，可以使用JS的<code>isNaN</code>函数。</p><p><strong>判断数字：</strong> 判断一个值是否可用作数字的最佳方法是使用<code>isFinite</code>函数，它会筛选掉<code>NaN</code>和<code>Infinity</code>。遗憾的是，<code>isFinite</code>会试图把运算数转换为一个数字，所以如果值事实上不是一个数字，它就不是一个好的测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义isNumber函数</span></span><br><span class="line"><span class="keyword">var</span> isNumber = <span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="built_in">isFinite</span>(value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>伪数组</li><li>假值</li><li>hasOwnProperty</li></ul><p><code>hasOwnProperty</code>是方法而不是运算符，这就有<code>hasOwnProperty</code>被其他函数甚至一个非函数的值替换的危险!</p><ul><li>对象</li></ul><h3 id="附录B-糟粕"><a href="#附录B-糟粕" class="headerlink" title="附录B 糟粕"></a>附录B 糟粕</h3><ul><li>==</li><li>with语句</li><li>eval</li><li>continue语句</li><li>swith穿越</li><li>缺少块的语句</li><li>++ –</li><li>位运算符</li><li>function语句对比function表达式</li><li>类型的包装对象</li><li>new</li><li>void</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh 内网穿透</title>
      <link href="/2017/10/ssh-intranet-penetration/"/>
      <url>/2017/10/ssh-intranet-penetration/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh-内网穿透"><a href="#ssh-内网穿透" class="headerlink" title="ssh 内网穿透"></a>ssh 内网穿透</h1><blockquote><p>网上的大部分 ssh 内网穿透文章都写的比较官方，对于初学者的我来说晦涩难懂，在踩了很多坑之后，决心写篇简单易懂的文章介绍下 ssh 内网穿透</p></blockquote><h2 id="实际状况"><a href="#实际状况" class="headerlink" title="实际状况"></a>实际状况</h2><table><thead><tr><th>机器号</th><th>IP</th><th>用户名</th><th>备注</th></tr></thead><tbody><tr><td>A</td><td>192.168.1.1</td><td>usr_a</td><td>我的电脑，在局域网中，可以访问 B</td></tr><tr><td>B</td><td>8.8.8.8</td><td>usr_b</td><td>代理服务器，在外网中</td></tr></tbody></table><h2 id="SSH-参数解释"><a href="#SSH-参数解释" class="headerlink" title="SSH 参数解释"></a>SSH 参数解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-f 后台运行</span><br><span class="line">-C 允许压缩数据</span><br><span class="line">-N 不执行任何命令</span><br><span class="line">-R 将端口绑定到远程服务器，反向代理</span><br><span class="line">-L 将端口绑定到本地客户端，正向代理</span><br></pre></td></tr></table></figure><h2 id="用ssh做正向连接"><a href="#用ssh做正向连接" class="headerlink" title="用ssh做正向连接"></a>用ssh做正向连接</h2><p>啥叫正向连接？就是client连上server，然后把server能访问的机器地址和端口（当然也包括server自己）镜像到client的端口上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNL [客户端IP或省略]:[客户端端口]:[服务器能访问的IP]:[服务器能访问的IP的端口] [登陆服务器的用户名@服务器IP] -p [服务器ssh服务端口（默认22）]</span><br></pre></td></tr></table></figure><p>举例说明：<br>你的本机A，可以ssh到服务器B，将本机A的8080端口映射到服务器B的80端口的http服务，那么可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNL 192.168.1.1:8080:8.8.8.8:80 usr_b@8.8.8.8</span><br></pre></td></tr></table></figure><h2 id="用ssh做反向连接"><a href="#用ssh做反向连接" class="headerlink" title="用ssh做反向连接"></a>用ssh做反向连接</h2><p>啥叫反向连接？就是client连上server，然后把client能访问的机器地址和端口（也包括client自己）镜像到server的端口上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNR [服务器IP或省略]:[服务器端口]:[客户端侧能访问的IP]:[客户端侧能访问的IP的端口] [登陆服务器的用户名@服务器IP] -p [服务器ssh服务端口（默认22）]</span><br></pre></td></tr></table></figure><p>举例说明：<br>你的本机A，你可以ssh到外网某台服务器B，如果你想让外网所有的能访问服务器B的IP都能访问你的的http服务，那么可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCNR 8.8.8.8:8080:192.168.1.1:80 usr_b@8.8.8.8</span><br></pre></td></tr></table></figure><h2 id="用ssh做socks代理"><a href="#用ssh做socks代理" class="headerlink" title="用ssh做socks代理"></a>用ssh做socks代理</h2><p>假设你内网里某台机器可以上网，但是你不能上网，如果你有ssh到那台机器的权限，那么就可以利用ssh方式建立一个代理socks5，通过代理来上网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh --fCND [本地IP或省略]:[本地端口] [登陆服务器的用户名@服务器IP] -p [服务器ssh服务端口（默认22）]</span><br></pre></td></tr></table></figure><p>举例说明：<br>你的本机A，可以ssh到服务器B，这样你就可以通过服务器B来上网：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fCND 192.168.1.1:8080 usr_b@8.8.8.8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机网页实现分享到微信和微博</title>
      <link href="/2017/10/h5-share-app/"/>
      <url>/2017/10/h5-share-app/</url>
      
        <content type="html"><![CDATA[<h1 id="手机网页实现分享到微信和微博"><a href="#手机网页实现分享到微信和微博" class="headerlink" title="手机网页实现分享到微信和微博"></a>手机网页实现分享到微信和微博</h1><blockquote><p>手机网页分享到微信和微博的见解。</p></blockquote><p>目前来说只能借助第三方应用的分享接口来调用，主要原因是各app闭环，限制 URL Scheme接口。不过在web越来越火，javascript已经超神的今天，网页调用app是大势所趋，</p><h5 id="看这个：Facebook-推出-App-Links-开发者工具意在解决什么问题？-应用（软件）"><a href="#看这个：Facebook-推出-App-Links-开发者工具意在解决什么问题？-应用（软件）" class="headerlink" title="看这个：Facebook 推出 App Links 开发者工具意在解决什么问题？ - 应用（软件）"></a>看这个：<a href="http://www.zhihu.com/question/23609812">Facebook 推出 App Links 开发者工具意在解决什么问题？ - 应用（软件）</a></h5><h5 id="google也已经有动作了："><a href="#google也已经有动作了：" class="headerlink" title="google也已经有动作了："></a>google也已经有动作了：</h5><p><img src="/static/img/h5-share-app/001.jpg" alt="App Links"><br>我等骚年只能期待标准早日确定啦！<br>另外uc浏览器下分享请移步：<a href="http://www.zhihu.com/question/24577266/answer/41498951?group_id=564848166613225472">HTML5网页端如何调用手机浏览器分享功能？ - Div wang 的回答</a></p><h5 id="这是代码实现"><a href="#这是代码实现" class="headerlink" title="这是代码实现"></a>这是代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 39yst.com：uc分享*/</span></span><br><span class="line"><span class="keyword">var</span> weixinShareBtn<span class="comment">//微信分享按钮，默认隐藏</span></span><br><span class="line"><span class="keyword">var</span> weixin;<span class="comment">//新建微信分享方法</span></span><br><span class="line"><span class="keyword">var</span> Browser=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Browser.ios=<span class="regexp">/iphone/</span>.test(Browser.userAgent); <span class="comment">//判断ios系统</span></span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/UCBrowser/gi</span>.test(navigator.userAgent))&#123;  <span class="comment">//判断uc浏览器</span></span><br><span class="line">    weixinShareBtn.style.display = <span class="string">&#x27;block&#x27;</span>;   <span class="comment">//微信分享按钮</span></span><br><span class="line">    weixin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                      <span class="comment">//微信分享方法</span></span><br><span class="line">        <span class="keyword">var</span> title = shareData.desc;</span><br><span class="line">        <span class="keyword">var</span> img = shareData.imgUrl;</span><br><span class="line">        <span class="keyword">var</span> url = location.href+(location.search?<span class="string">&quot;&amp;&quot;</span>:<span class="string">&quot;?&quot;</span>)+<span class="string">&quot;uc_39yst&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(Browser.ios)&#123;</span><br><span class="line">            ucbrowser.web_share(title, img, url, <span class="string">&#x27;kWeixinFriend&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;@39yst&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ucweb.startRequest(<span class="string">&quot;shell.page_share&quot;</span>,[title,img,url,<span class="string">&#x27;WechatTimeline&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>])</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// gaevent(&#x27;event&#x27;,&#x27;uc_share&#x27;,Browser.ios?&#x27;ios&#x27;:&#x27;android&#x27;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5 </tag>
            
            <tag> 分享到微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个攻城狮的经验总结</title>
      <link href="/2017/10/siege-lion-experience/"/>
      <url>/2017/10/siege-lion-experience/</url>
      
        <content type="html"><![CDATA[<h1 id="一个攻城狮的经验总结"><a href="#一个攻城狮的经验总结" class="headerlink" title="一个攻城狮的经验总结"></a>一个攻城狮的经验总结</h1><blockquote><p>总结在北京这两年多来，自己从一个只会切图美工，成长到现在 能独立完成一个网站前端的感想。</p></blockquote><p>&emsp;&emsp;今天正式把我弟弟理发店会员系统上线了，自己一个人做了一整个项目，感觉棒棒哒！😄从数据库设计到后台开发再到前端展现，感觉短短半个月真的学到了好多。然后有个想法总结下自己一直以来的学习思路。</p><p>&emsp;&emsp;从我学历上就能看出来我其实并不是一个很爱学习的人，但是我经常和朋友说我自己是如何自己学习到深夜12点以后的。这不是我在吹牛逼，我刚到北京那会确实每周都会有5天左右学习到12点之后。那时候自己学习能力并不好，学程序主要靠视频，看视频的时候经常走神，看一会视频就觉得累了，然后看电影刷豆瓣，每每到了10点钟的时候自己就回突然觉醒：我靠，今天还没学东西呢！😂</p><p>&emsp;&emsp;到这不得不说一个最我影响很大的软件－－知乎。可以说我那五个月没天坚持下来的动力都是“深夜食堂”的文章（现在叫深夜惊奇，知乎日报每天最后一个栏目）。当我第一次看到“深夜食堂”的时候就像一个人走在沙漠的突发发现前方有一大片绿洲。一个精神匮乏的人需要用阅读来充实自己，我就是在每天10点之后看完“深夜食堂”之后突然就有动力去学习了（此处不是广告）。</p><p>&emsp;&emsp;就是这样我坚持了5个月，期间有立兴哥的指导，进步算是神速了。公司又是百度外包，经常出入百度大厦内，也接触了很多高大上的东西。最后还有老板这个神坑加持，在他的压榨下，我还做力两次产品经理，一次商务，一次销售😂</p><p>&emsp;&emsp;随后的时候事情发生了转变，我追随立兴哥跳槽到了39，完成了我到北京月薪一万的目标。紧接着一个月后立兴哥又去了聚美，39就只有我一个开发js的前端，算是正式开始自己的自学之路了。</p><p>&emsp;&emsp;刚到39的时候我开始写一个类似jquery的框架，命名为Yscript，目前这个项目还在我的github上：<a href="https://github.com/div-wang/Yscript">Yscript</a>。说实在的这个项目难度其实挺大的，我5个月前还不会用jquery，5个月后就开始自己仿造了。Yscript开发用了一个月，刚开始一直是百度一些别人的代码，看一些jquery的源码解读视频和文章，无奈自己基础太差，是在是不能理解其中妙处。在立兴哥的推荐下我买了第一本书－－《javascript高级程序设计》</p><p>&emsp;&emsp;那一个月我早晚上下班会做3小时地铁，我就用这3个小时狂补基础知识，期间还掺杂的看了些视频。终于皇天不负有心人，我把Yscript第一版做出来了，最终用在3个项目上。也是开发这次Yscript我认识到读书比视频要可靠好多，当你模糊的几得这个功能点的时候，你翻阅视频可能需要来回拖动，有时候网速不好还会卡顿，所以很难找到它。书就不一样啊，它有目录，可以随时翻阅，不受网速限制。</p><p>&emsp;&emsp;程序员圈子一直有一句名言：内事不懂问百度，外事不懂问谷歌。在开发Yscript的时候我算是真正感受的搜索引擎对学习的帮助。当时我用度娘搜索jquery源码解读，开到结果那瞬间自己开心的几乎要跳起来。（请原谅我的无知吧）互联网发展如此迅速离不开互联网自由的精神，如果你会翻墙用google，喜欢浏览github上的源码，没事去stackoverflow浏览问题，有问题会先site:zhihu.com，那你几乎很少碰到解决不了的技术问题了。</p><p>&emsp;&emsp;在39以后的日子里，因为业务需要我自学了seajs和php，seajs用在了两个项目上。php了解一些基础知识，算是会写接口会套页面。其实还接触了nodejs，nodejs是seajs打包用环境，当时并没有太刻意去学习nodejs，因为当时被seajs明显没有bug给唬住了，就一直觉得这就是前端最牛逼的东西（too young too naive）。去年5月份的时候我去了杭州，见到了玉伯，他亲口说seajs项目不再维护了。</p><p>&emsp;&emsp;也是去年5月份我从39离职，和朋友一起做海底捞的外包项目，那4个月算是比较痛苦的日子，因为些特殊的原因，海底捞拖了3个月的项目款，有两周我只花了100块钱。但是技术上的进步还是可以的，从杭州回来我就开始研究react和angular，最后还是把重心放在了nodejs上。买了本深入浅出nodejs，看了一遍，算是深入了解一下。项目吃紧的时候我开始做java的开发工作，对java算是有个初步的了解。在海底捞结清了项目款之后，我加入了朋友的创业公司，也就是我现在所在的公司。在新公司学了angular，这次因为有java的基础学的特别快，angular的有很多地方都是借鉴的java。因为公司业务还搞了一段时间shell自动化。</p><p>&emsp;&emsp;总结在北京这两年多来，自己从一个只会切图美工，成长到现在能独立完成一个网站的前端。善用搜索引擎：尤其是google（<a href="http://blog.div-wang.com/2015/10/hosts-to-google.html">hosts翻墙上google</a>），学点高级的搜索技巧，我一般搜索问题时都会site:zhihu.com或一些前端社区v2ex；经常浏览github的源码，借鉴别人的经验；最后就是看书：读书可以增长自己的知识储备，在遇到问题之后可以让自己更快的解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hosts翻墙上google</title>
      <link href="/2017/10/hosts-to-google/"/>
      <url>/2017/10/hosts-to-google/</url>
      
        <content type="html"><![CDATA[<h1 id="hosts翻墙上google"><a href="#hosts翻墙上google" class="headerlink" title="hosts翻墙上google"></a>hosts翻墙上google</h1><blockquote><p>天朝的网络大家都懂的，有个万恶的墙一直在阻止攻城狮们翻山越岭。而对于用惯免费的我们来说，VPN代理是收费的，下面教大家一个免费翻墙的方法－hosts翻墙。</p></blockquote><p>天朝的网络大家都懂的，有个万恶的墙一直在阻止程序猿们翻山越岭。而对于用惯免费的我们来说，VPN代理是收费的，下面教大家一个免费翻墙的方法－hosts翻墙</p><h2 id="下载hosts"><a href="#下载hosts" class="headerlink" title="下载hosts"></a>下载hosts</h2><p>首先是下载一个可以翻墙的hosts文件：<a href="#">https://pan.baidu.com/s/1dFN40Yt</a></p><p>这个hosts以前是Github上一个项目<a href="https://github.com/huhamhire/huhamhire-hosts">huhamhire</a>在维护，目前<a href="https://github.com/huhamhire/huhamhire-hosts">huhamhire</a>项目已经停止更新，原因你懂得！</p><h2 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h2><h4 id="windows"><a href="#windows" class="headerlink" title="windows:"></a>windows:</h4><ul><li>打开<code>C:\Windows\System32\drivers\etc</code>文件夹，</li><li>直接将下载好的文件替换掉原有hosts文件</li></ul><h4 id="linux"><a href="#linux" class="headerlink" title="linux:"></a>linux:</h4><ul><li>将下载的文件用文本编辑器打开，（推荐<code>sublime text</code>）；</li><li>全选代码，复制出来；</li><li>在终端输入 <code>sudo vi/etc/hosts</code> 粘贴代码；</li><li>按esc 输入<code>:wq</code>保存;(如果保存代码出错，输入<code>:wq!</code>强制保存)</li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h2><p>hosts翻墙亲测可以上<code>google</code>、<code>facebook</code>、<code>twitter</code>、<code>youtube香港</code>、<code>wikipedia</code></p><h4 id="2017-10-08-更新"><a href="#2017-10-08-更新" class="headerlink" title="2017-10-08 更新"></a>2017-10-08 更新</h4><p>由于IP库可用IP已剩很少，加上防火#墙封@#锁技术升级！建议自备梯子，不要过于依赖于hosts来上网。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hosts </tag>
            
            <tag> google </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp-sass安装报错解决方法</title>
      <link href="/2017/10/gulp-sass-install/"/>
      <url>/2017/10/gulp-sass-install/</url>
      
        <content type="html"><![CDATA[<h1 id="gulp-sass安装报错解决方法"><a href="#gulp-sass安装报错解决方法" class="headerlink" title="gulp-sass安装报错解决方法"></a>gulp-sass安装报错解决方法</h1><blockquote><p>gulp-sass报错解决方案</p></blockquote><h3 id="首先是下载项目"><a href="#首先是下载项目" class="headerlink" title="首先是下载项目"></a>首先是下载项目</h3><p><code>git clone https://github.com/div-wang/div-wang.github.io.git</code></p><h3 id="然后进入项目目录"><a href="#然后进入项目目录" class="headerlink" title="然后进入项目目录"></a>然后进入项目目录</h3><p><code>cd div-wang.github.io</code></p><h3 id="安装node依赖插件"><a href="#安装node依赖插件" class="headerlink" title="安装node依赖插件"></a>安装node依赖插件</h3><p><code>npm install</code></p><h3 id="如果报错请执行"><a href="#如果报错请执行" class="headerlink" title="如果报错请执行"></a>如果报错请执行</h3><p><code>npm cache clean</code><br><code>npm install gulp-sass</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> css </tag>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于工作和学习的主动性</title>
      <link href="/2017/10/learning-initiative/"/>
      <url>/2017/10/learning-initiative/</url>
      
        <content type="html"><![CDATA[<h1 id="关于工作和学习的主动性"><a href="#关于工作和学习的主动性" class="headerlink" title="关于工作和学习的主动性"></a>关于工作和学习的主动性</h1><blockquote><p>人的惰性是天性，但是你想改变时绝对能战胜它，所以下定决心去改变，并不自我激励，剩下的只是时间问题。</p></blockquote><p>&emsp;&emsp;今天和同事聊天，提到关于主动学习的话题。他谈起以前的公司管理松散，养成了比较懒散的习惯，为还此做了自我批评。小伙还是很nice的。关于主动学习这个事，我觉得自己还是有一些经验的，在这里分享一下。</p><h3 id="一本杂志-－-vista看天下"><a href="#一本杂志-－-vista看天下" class="headerlink" title="一本杂志 － vista看天下"></a>一本杂志 － <a href="http://www.vistastory.com/">vista看天下</a></h3><p>&emsp;&emsp;这本杂志是我高三开始看的，初中时我就特别迷恋网络小说，那时候看网络小说可以说是废寝忘食，我看的也比较杂：修真、奇幻、魔幻、yy、网游几乎都有涉猎。直到高三的时候，突然意识马上要高考了，网络小说是精神毒品，我得把网络小说戒掉。我起初尝试了直接’戒毒‘，但是没能成功。高三的生活异常枯燥，习惯了网络小说这个精神毒品戒掉大脑在这个过程异常痛苦。当时想着直接戒不掉不如间接的戒，我约了一块看书的小伙伴们，和他们商讨了一番’戒毒‘的事情，最终大家都觉得看杂志是个好方法，于是约定没人每个大周（两周）买3本杂志，一共12本，大家互相换着看。</p><p>&emsp;&emsp;我们学校有个小的报社，卖各种报纸和过期杂志（过期杂志的便宜，vista一本3块，比正常便宜7块）。起初我们买的比较多的是漫画，意林，读者文摘什么的。我当时涉猎比较广，在看到新杂志不免为之动容，就买了一份《vista看天下》，从此结下不解之源。一开始最中意《vista看天下》对政治的解读，作为一个信息封闭的小县城的普通高中生，在互联网不发达的时候看到一篇篇犀利的评论，瞬间感觉整个世界观都颠覆了。《vista看天下》就这么一致陪我到高考，虽然高考成绩并不理想，但是我戒掉了网络小说，建立了一个模糊的世界观，并在我工作以后发挥了很大作用。</p><p>&emsp;&emsp;我从高三开始一直坚持看《vista看天下》到14年，经历的从看纸质的过期期刊到有安卓手机之后用杂志软件准最新的电子期刊，再到微信的崛起，关注他们的订阅号。这么多年的陪伴知道一个软件的出现－－知乎日报</p><h3 id="一个软件-－-知乎日报-每天3-次，每次7-分钟"><a href="#一个软件-－-知乎日报-每天3-次，每次7-分钟" class="headerlink" title="一个软件 － 知乎日报- 每天3 次，每次7 分钟"></a>一个软件 － <a href="https://www.zhihu.com/">知乎日报- 每天3 次，每次7 分钟</a></h3><p>&emsp;&emsp;知乎是我13年的时候注册的，当时的我刚毕业，面临人生的选择手足无措，也并没有在意知乎到底能做什么。在郑州一年朝八晚六的生活让我养成了一个懒散的毛病，上班不主动完成工作，下班不主动学习，工作之余每天就呆在出租房看电影，睡觉，偶尔看看小说（人及其无聊的时候就犯老毛病）。14年的时候，我痛定思变，决定北漂。那时候我有个目标，就是做程序员，但是做什么一直在犹豫不决。当时前端还没有现在这么火，我大学同学做java，向我推荐java;我在郑州的同事做.net,给我说做.net的前景；也从网上认识了一些人，说php是宇宙第一语言。而我呢，当时是个只会切图的小马仔，jquery写个动画效果我都不会。</p><p>&emsp;&emsp;在北京工作第一个周末我就加班到12点，那时候我才认识到以前懒散不会主动学习的自己可能在这个城市真的混不下去。而我也是很幸运，遇到了立兴哥，他教我如何去学习程序知识以快速应对工作。为了能在北京站住脚，我开始’努力‘的学习。那个时候的我每天几乎是学到12点，但是这个学习很有水分的，我懒散的性格造成我学习主动性特别差，立兴个让我看一份视频，我基本上是看不到一个小时就感觉好困、好累然后去做其他事情或者睡觉。你可能会迷茫我这是怎么学习到十二点的？答案是：知乎日报。</p><p>&emsp;&emsp;知乎日报以前又个栏目叫做－深夜食堂（现在改名－小事，推荐的文章质量已经不如以前），每天在10点左右的时候会推送一篇文章，十点的时候我就会看下这篇文章。不得不说那时候的《深夜食堂》文章质量真的很棒，每篇文章一个故事，故事贵在真实，有励志也有负能量，有爱情也有分别，有温馨也有悲惨的人生。那时的我每每看过之后就能在心里给你打气：王广辉，你看看别人的故事多么精彩，你还在这犹豫什么。然后爬起来开始学习。</p><p>&emsp;&emsp;我的js基础就是这么学出来的，也是这种自我激励，让我慢慢改掉了懒散的毛病，开始主动学习。</p><h3 id="如何让主动学习成为一种习惯"><a href="#如何让主动学习成为一种习惯" class="headerlink" title="如何让主动学习成为一种习惯"></a>如何让主动学习成为一种习惯</h3><p>&emsp;&emsp;小时候的我主动学习的能力并不好，而且还特别玻璃心。小学四年级的时候因为贪玩，不完成作业，最后被老师叫家长，可能是羞耻心的作用，我用不到三个月把我的成绩从中流瞬间提升到前5名，现在想想的我潜力还真是害怕。后来因为一次去县里考试老师没有选中我，我的玻璃心就碎了一地，从此就再也没有好好学习过，成绩一直在中下游徘徊。</p><p>&emsp;&emsp;长大之后其实也是这样，我们可能最开始学习的动力不一样，但是都会遇到一些挫折或者某些变故而停止主动去学习，如何让主动学习成为一种习惯呢？<br>这里只说下我的看法:</p><ul><li>自我意志的激励<br>  像我一样直接找到一个方式自己给自己喝鸡汤，并保持这种状态就是一种很好的激励。</li><li>物质激励<br>  学习很枯燥，但是学习上的进步能带来物质上的回报就不一样了。这是最能体现价值的地方，也是最有效的。</li><li>周围人的激励<br>  当你决定做一个公众号，运营一两个月有好几百粉丝的增长；你跑步成绩一直在进步，别人都很崇拜你；当你要减肥，周围人都给你正面的回应；这些周围人的激励能潜移默化的提高你的主动性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim常用操作命令</title>
      <link href="/2017/10/vim-common-commands/"/>
      <url>/2017/10/vim-common-commands/</url>
      
        <content type="html"><![CDATA[<h1 id="vim常用操作命令"><a href="#vim常用操作命令" class="headerlink" title="vim常用操作命令"></a>vim常用操作命令</h1><blockquote><p>vi 是 unix/linux 下极为普遍的一种文本编辑器. 记录一些比较常用的命令</p></blockquote><h2 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h2><table><thead><tr><th>命令</th><th>操作详情</th></tr></thead><tbody><tr><td><code>x,X</code></td><td><code>x</code>为向后删除一个字符，<code>X</code>为先前删除一个字符</td></tr><tr><td><code>nx</code></td><td>向后删除n个字符</td></tr><tr><td><code>dd</code></td><td>删除当前行</td></tr><tr><td><code>D</code></td><td>删除当前行所有字符，试成为空行</td></tr><tr><td><code>ndd</code></td><td>删除光标所在行的向下<code>n</code>列</td></tr><tr><td><code>d1G</code></td><td>删除光标所在行到第一行的所有数据</td></tr><tr><td><code>dG</code></td><td>删除光标所在行到最后一行的所有数据</td></tr><tr><td><code>yy</code></td><td>复制光标所在行</td></tr><tr><td><code>y1G</code></td><td>复制光标所在行到第一行的所有数据</td></tr><tr><td><code>yG</code></td><td>复制光标所在行到最后一行的所有数据</td></tr><tr><td><code>ynj</code></td><td>复制光标所在行向下<code>n+1</code>行</td></tr><tr><td><code>dnj</code></td><td>删除光标所在行向下<code>n+1</code>行</td></tr><tr><td><code>p,P</code></td><td><code>p</code>为复制的数据粘贴在光标的下一行，<code>P</code>为复制的数据粘贴在光标的上一行</td></tr><tr><td><code>J</code></td><td>将光标所在行与下一行的数据结合成一行</td></tr><tr><td><code>u</code></td><td>命令取消最近一次的操作，可以使用多次来恢复原有的操作</td></tr><tr><td><code>U</code></td><td>取消所有操作</td></tr><tr><td><code>h</code></td><td>光标向左移一个字符</td></tr><tr><td><code>j</code></td><td>光标向下移一个字符</td></tr><tr><td><code>k</code></td><td>光标向上移一个字符</td></tr><tr><td><code>l</code></td><td>光标向右移一个字符</td></tr><tr><td><code>Ctrl+f</code></td><td>屏幕向下翻一页</td></tr><tr><td><code>Ctrl+b</code></td><td>屏幕向上翻一页</td></tr><tr><td><code>Ctrl+d</code></td><td>屏幕向下翻半页</td></tr><tr><td><code>Ctrl+u</code></td><td>屏幕向上翻半页</td></tr><tr><td><code>0</code></td><td>光标移动到当前行的第一个字符</td></tr><tr><td><code>$</code></td><td>光标移动到当前行的最后一个字符</td></tr><tr><td><code>H</code></td><td>光标移动到当前屏幕最上方的那一行的第一个非空字符</td></tr><tr><td><code>M</code></td><td>光标移动到当前屏幕最中间那一行的第一个非空字符</td></tr><tr><td><code>L</code></td><td>光标移动到当前屏幕最下方的那一行的第一个非空字符</td></tr><tr><td><code>GG</code></td><td>光标移动到该文章第一行的第一个非空字符</td></tr><tr><td><code>G</code></td><td>光标移动到该文章最后一行的第一个非空字符</td></tr><tr><td><code>nG</code></td><td>光标移动到该文章第n行的第一个非空字符</td></tr><tr><td><code>/word</code></td><td>在光标之后查找word字符串</td></tr><tr><td><code>?word</code></td><td>在光标之前查找word字符串</td></tr></tbody></table><h2 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h2><table><thead><tr><th>命令</th><th>操作详情</th></tr></thead><tbody><tr><td><code>:s/word1/word2/g</code></td><td>在光标当前行查找word1，并替换成word2</td></tr><tr><td><code>:n1,n2s/word1/word2/g</code></td><td>在第n1行与第n2行之间查找word1，并替换成word2</td></tr><tr><td><code>:%s/word1/word2/g</code></td><td>整个文章查找word1，并替换成word2</td></tr><tr><td><code>:w</code></td><td>将编辑的数据保存到硬盘文件中</td></tr><tr><td><code>:w [filename]</code></td><td>将编辑后的数据保存到硬盘的另一个文件中</td></tr><tr><td><code>:r [filename]</code></td><td>在编辑数据时，读入另一个文件中的数据，即将filename文件中的内容加到光标所在行下一行</td></tr><tr><td><code>:wq或:x</code></td><td>保存并退出</td></tr><tr><td><code>:q</code></td><td>退出，适用于未修改的文件</td></tr><tr><td><code>:q!</code></td><td>强制退出，适用于修改文件后不保存退出</td></tr><tr><td><code>:set nu</code></td><td>显示行号</td></tr><tr><td><code>:set nonu</code></td><td>取消行号</td></tr><tr><td><code>:n1,n2 w [filename]</code></td><td>将n1到n2行的内容保存到名为filename的文件中</td></tr></tbody></table><h2 id="编辑模式命令"><a href="#编辑模式命令" class="headerlink" title="编辑模式命令"></a>编辑模式命令</h2><table><thead><tr><th>命令</th><th>操作详情</th></tr></thead><tbody><tr><td><code>i,I</code></td><td><code>i</code>为在当前光标所在处插入输入的文字，<code>I</code>为在光标所在行第一个非空字符插入输入的文字</td></tr><tr><td><code>a,A</code></td><td><code>a</code>为在当前光标所在处下一个字符插入输入的文字，<code>A</code>为在光标所在行最后一个字符的下一个字符处插入输入的文字</td></tr><tr><td><code>o,O</code></td><td><code>o</code>为在光标所在行的下一行行首开始插入字符，<code>O</code>为在光标所在行的上一行行首开始插入字符</td></tr><tr><td><code>r,R</code></td><td><code>r</code>为替换光标所在那一个字符，<code>R</code>为一直替换光标所指的文字，直到退出</td></tr><tr><td><code>Esc</code></td><td>退出，回到一般模式</td></tr></tbody></table><h2 id="js命令说明"><a href="#js命令说明" class="headerlink" title="js命令说明"></a>js命令说明</h2><blockquote><p>ctrl+s是一个古老的shell控制键，在输入ctrl+q就可以恢复了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First Level</span></span><br><span class="line">i → Insert mode. Type ESC to <span class="keyword">return</span> to Normal mode.</span><br><span class="line">x → Delete the char under the cursor</span><br><span class="line">:wq → Save and Quit (:w save, :q quit)</span><br><span class="line">dd → Delete (and copy) the current line</span><br><span class="line">p → Paste</span><br><span class="line"><span class="attr">Recommended</span>:</span><br><span class="line"></span><br><span class="line">hjkl (highly recommended but not mandatory) → basic cursor move (←↓↑→). Hint: j looks like a down arrow.</span><br><span class="line">:help &lt;command&gt; → Show help about &lt;command&gt;. You can use :help without a &lt;command&gt; to get general help.</span><br><span class="line"></span><br><span class="line"><span class="comment">// Second Level</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Insert mode variations: ***/</span></span><br><span class="line"></span><br><span class="line">a → insert after the cursor</span><br><span class="line">o → insert a <span class="keyword">new</span> line after the current one</span><br><span class="line">O → insert a <span class="keyword">new</span> line before the current one</span><br><span class="line">cw → replace <span class="keyword">from</span> the cursor to the end <span class="keyword">of</span> the word</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Basic moves ***/</span></span><br><span class="line"><span class="number">0</span> → go to the first column(number zero)</span><br><span class="line">^ → go to the first non-blank character <span class="keyword">of</span> the line</span><br><span class="line">$ → go to the end <span class="keyword">of</span> line</span><br><span class="line">g_ → go to the last non-blank character <span class="keyword">of</span> line</span><br><span class="line">/pattern → search <span class="keyword">for</span> pattern</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Copy/Paste ***/</span></span><br><span class="line">P → paste before, remember p is paste after current position.</span><br><span class="line">yy → copy the current line, easier but equivalent to ddP</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Undo/Redo ***/</span></span><br><span class="line">u → undo</span><br><span class="line">&lt;C-r&gt; → redo</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Load/Save/Quit/Change File (Buffer) ***/</span></span><br><span class="line">:e &lt;path/to/file&gt; → open</span><br><span class="line">:w → save</span><br><span class="line">:saveas &lt;path/to/file&gt; → save to &lt;path/to/file&gt;</span><br><span class="line">:x, ZZ or :wq → save and quit (:x only save <span class="keyword">if</span> necessary)</span><br><span class="line">:q! → quit without saving, <span class="attr">also</span>: :qa! to quit even <span class="keyword">if</span> there are modified hidden buffers.</span><br><span class="line">:bn (resp. :bp) → show next (resp. previous) file (buffer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3rd Level – Better. Stronger. Faster.</span></span><br><span class="line"><span class="comment">/*** Vim Command (normal Model)-help you to repeat ***/</span></span><br><span class="line">2dd → will <span class="keyword">delete</span> <span class="number">2</span> lines</span><br><span class="line">3p → will paste the text <span class="number">3</span> times</span><br><span class="line">100idesu [ESC] → will write “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu”</span><br><span class="line">. → Just after the last command will write again the <span class="number">100</span> “desu”.</span><br><span class="line"><span class="number">3.</span> → Will write <span class="number">3</span> “desu” (and not <span class="number">300</span>, how clever).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Vim Command (normal Model)-how to move efficiently with vim ***/</span></span><br><span class="line">NG → Go to line N</span><br><span class="line">gg → shortcut <span class="keyword">for</span> 1G - go to the start <span class="keyword">of</span> the file</span><br><span class="line">G → Go to last line</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** Vim Command (normal Model)-how to move word move efficiently with vim ***/</span></span><br><span class="line"></span><br><span class="line">w → go to the start <span class="keyword">of</span> the following word,</span><br><span class="line">e → go to the end <span class="keyword">of</span> <span class="built_in">this</span> word.</span><br><span class="line">By <span class="keyword">default</span>, words are composed <span class="keyword">of</span> letters and the underscore character. Let’s call a WORD a group <span class="keyword">of</span> letter separated by blank characters. If you want to consider WORDS, then just use uppercase characters:</span><br><span class="line"></span><br><span class="line">W → go to the start <span class="keyword">of</span> the following WORD,</span><br><span class="line">E → go to the end <span class="keyword">of</span> <span class="built_in">this</span> WORD.</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** /Pattern find Next by #(*) or find ( then % to next ) ***/</span></span><br><span class="line">% : Go to the corresponding (, &#123;, [.</span><br><span class="line">* (resp. #) : go to next (resp. previous) occurrence <span class="keyword">of</span> the word under the cursor</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** &lt;start position&gt;&lt;command&gt;&lt;end position&gt; ***/</span></span><br><span class="line"></span><br><span class="line">For example : 0y$ means</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> → go to the beginning <span class="keyword">of</span> <span class="built_in">this</span> line</span><br><span class="line">y → yank <span class="keyword">from</span> here</span><br><span class="line">$ → up to the end <span class="keyword">of</span> <span class="built_in">this</span> line</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tip with postition-comand-position</span></span><br><span class="line">But what was <span class="literal">true</span> <span class="keyword">for</span> y (yank), is also <span class="literal">true</span> <span class="keyword">for</span> d (<span class="keyword">delete</span>), v (visual select), gU (uppercase), gu (lowercase), etc…</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Git远程分支和本地分支统一的问题</title>
      <link href="/2017/10/git-remote-branch/"/>
      <url>/2017/10/git-remote-branch/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Git远程分支和本地分支统一的问题"><a href="#关于Git远程分支和本地分支统一的问题" class="headerlink" title="关于Git远程分支和本地分支统一的问题"></a>关于Git远程分支和本地分支统一的问题</h1><blockquote><p>公司项目使用gitlab搭建，每次新功能开发总会新建分支，开发完成合并到master上之后，远程分支会删掉，但是本地缓存总是清不掉。google一下操作步骤，发篇文章记录一下。</p></blockquote><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>fetch之后删除掉没有与远程分支对应的本地分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h3 id="查看本地缓存的远程分支："><a href="#查看本地缓存的远程分支：" class="headerlink" title="查看本地缓存的远程分支："></a>查看本地缓存的远程分支：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h3 id="查看本地缓存的远程分支删除不是否已经删除："><a href="#查看本地缓存的远程分支删除不是否已经删除：" class="headerlink" title="查看本地缓存的远程分支删除不是否已经删除："></a>查看本地缓存的远程分支删除不是否已经删除：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h3 id="本地删除远程分支的方法"><a href="#本地删除远程分支的方法" class="headerlink" title="本地删除远程分支的方法"></a>本地删除远程分支的方法</h3><h5 id="推送一个空分支到远程分支，其实就相当于删除远程分支："><a href="#推送一个空分支到远程分支，其实就相当于删除远程分支：" class="headerlink" title="推送一个空分支到远程分支，其实就相当于删除远程分支："></a>推送一个空分支到远程分支，其实就相当于删除远程分支：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;branchName&gt;</span><br></pre></td></tr></table></figure><h5 id="可以使用-delete语法删除远程分支："><a href="#可以使用-delete语法删除远程分支：" class="headerlink" title="可以使用--delete语法删除远程分支："></a>可以使用<code>--delete</code>语法删除远程分支：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;branchName&gt;</span><br></pre></td></tr></table></figure><h3 id="重命名远程分支："><a href="#重命名远程分支：" class="headerlink" title="重命名远程分支："></a>重命名远程分支：</h3><p>其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p><p>1、删除远程分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>2、重命名本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;branchName&gt; &lt;branchName2&gt;</span><br></pre></td></tr></table></figure><p>3、提交到远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branchName2&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 开机自动启动</title>
      <link href="/2017/10/ubuntu-boot-automatically-starts/"/>
      <url>/2017/10/ubuntu-boot-automatically-starts/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu-开机自动启动"><a href="#ubuntu-开机自动启动" class="headerlink" title="ubuntu 开机自动启动"></a>ubuntu 开机自动启动</h1><blockquote><p>最近尝试自动化，遇到很多坑，今天写写ubuntu自动启动的问题。</p></blockquote><p>先从坑一ubuntu init系统程序说起吧。init初始化系统的工具，init的启动首先要知道系统的时的默认运行级别，有文章说是位于<code>/etc/inittab</code>,但是我在亚马逊EC2 (Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-66-generic x86_64)上并没有找到这个文件。我是google了好久找到的<code>runlevel</code>    命令:</p><p><img src="/static/img/ubuntu-boot/001.jpg" alt="001"></p><p>知道默认运行级别就好办啦。根据级别<code>N 5</code>，找到<code>/etc/rc5.d/</code>，这里就是系统默认启动的程序目录。</p><p><img src="/static/img/ubuntu-boot/002.jpg" alt="002"></p><p>这里说一下，ubuntu有8个启动级别，是0-6和S。分别对应<code>/etc/rcN.d/</code> 8个文件夹。</p><p>然而，你以为找到<code>/etc/rcN.d/</code>目录久找到脚本啦，too young too simple。<code>/etc/rcN.d/</code>目录下的所有文件只是‘软连接’。😯<br>执行<code>ls -lh /etc/rc5.d/</code> 命令:</p><p><img src="/static/img/ubuntu-boot/003.jpg" alt="003"></p><p>自动启动需要的所有脚本都在<code>/etc/init.d/</code>文件夹里。<code>/etc/rcN.d/</code>只是控制启动关闭的软连接，文件夹下所有程序文件名的格式为： <code>S/K + NN + NAME</code>。系统进入默认运行级别时，init会杀掉所有以K开头的程序，启动以S开头的程序，按照NN的大小，从低到高开始启动/停止程序。NAME则是程序的名字，也是启动之后进程的名字。如果想详细了解init系统可以参： <a href="http://monklof.com/post/14/">总结 - Linux初始化过程（init系统）</a></p><p>init在<code>/etc/rcN.d/</code>脚本执行完成后，所有的系统服务此时已经执行成功，之后会找<code>/etc/rc.local</code>脚本文件，我的理解这个脚本文件是用户自己启动的程序。所以，马上配置<code>/etc/rc.local</code>，重启系统。</p><p><img src="/static/img/ubuntu-boot/004.jpg" alt="004"></p><p>然而并没有等到欣喜的启动成功。</p><p>再了解了init系统程序之后我知道我的所有配置都是对的，但是，我的脚本还是启动不了。这个就很尴尬啦，既然还不对那肯定是出错啦，看看系统启动日志好了。然而万万没想到，系统启动日志也是个坑。我google查到的文章都把系统启动日志写成<code>/var/log/boot.log</code>，wtf，我在我的机器上怎么都找不到它。不知道是不是EC2的问题，还没查证。万般无奈之下，我只能去<code>/var/log/</code>里一个个log找。终于发现一个名字很符合的文件：</p><p><img src="/static/img/ubuntu-boot/005.jpg" alt="005"></p><p>打开一看果然是启动日志，查看日志分析，找到了一处nginx报错：</p><p><img src="/static/img/ubuntu-boot/006.jpg" alt="006"></p><p>这个错误很明显，是要输入密码，于是google查了一下，原来nginx是需要配置没有密码的key。对比脚本，猜测应该是我的再次执行nginx，导致<code>/etc/rc.local</code>报错，下面的shell都没有执行。于是注释掉nginx和jenkins，nginx的key换成不用输入密码的。</p><p><img src="/static/img/ubuntu-boot/007.jpg" alt="007"></p><p><code>sudo reboot</code> 脚本启动成功。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> apt-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 合并多个 Commit</title>
      <link href="/2017/10/git-commits-merge/"/>
      <url>/2017/10/git-commits-merge/</url>
      
        <content type="html"><![CDATA[<h1 id="git-合并多个-Commit"><a href="#git-合并多个-Commit" class="headerlink" title="git 合并多个 Commit"></a>git 合并多个 Commit</h1><blockquote><p>在使用 Git 作为版本控制的时候，我们可能会由于各种各样的原因提交了许多临时的 commit，而这些 commit 拼接起来才是完整的任务。那么我们为了保证Master主分支上提交注释的可读性，需要在本地分支Push远程server之前合并你自己的多次提交注释日志，原则上3条以上就需要合并。</p></blockquote><h2 id="指定合并commit"><a href="#指定合并commit" class="headerlink" title="指定合并commit"></a>指定合并commit</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>最近提交commit指定数量的合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p><img src="/static/img/git-commits-merge/002.png" alt="002"><br><code>HEAD~3</code>中的3指的是合并最近3次commit</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>指定的commit hash，hash之前的提交合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="/static/img/git-commits-merge/001.png" alt="001"><br>获取不需要合并的 commit 的 hash 值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i b09ce93e4bb</span><br></pre></td></tr></table></figure><p><img src="/static/img/git-commits-merge/002.png" alt="002"></p><h2 id="合并commit"><a href="#合并commit" class="headerlink" title="合并commit"></a>合并commit</h2><p>可以看到其中分为两个部分，上方未注释的部分是填写要执行的指令，而下方注释的部分则是指令的提示说明。指令部分中由前方的命令名称、commit hash 和 commit message 组成。</p><ul><li><p><code>pick</code> 是最终合并后的 commit</p></li><li><p><code>squash</code>和<code>fixup</code> 是将当前 commit 合并到前一个commit</p></li></ul><p>我们将<code>cab88d7</code>和<code>fb8c714</code>前缀改成<code>squash</code>或<code>fixup</code>；按<code>esc</code>退出编辑，输入<code>:wq</code>保存</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li><code>fixup</code>会自动将当前commit与前一个合并，并放弃当前commit的注释等内容。</li><li><code>squash</code> 会在退出当前编辑状态后，进入新的编辑状态，允许我们再次编辑注释等提交信息，再次退出才结束操作。</li><li>第一个commit不可以改成<code>squash</code>或者<code>fixup</code>，否则会报错。</li><li>报错之后可以使用 <code>git rebase --abort</code> 来撤销修改，回到没有开始操作合并之前的状态。</li></ul><p>如果是输入的<code>squash</code>，会再次进入一个编辑页面，可以直接<code>:wq</code>保存退出。</p><p>再次输入<code>git log</code><br><img src="/static/img/git-commits-merge/003.png" alt="003"></p><h4 id="合并成功！"><a href="#合并成功！" class="headerlink" title="合并成功！"></a>合并成功！</h4>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js操作剪切板复制粘贴</title>
      <link href="/2017/10/clipboard/"/>
      <url>/2017/10/clipboard/</url>
      
        <content type="html"><![CDATA[<h1 id="js操作剪切板复制粘贴"><a href="#js操作剪切板复制粘贴" class="headerlink" title="js操作剪切板复制粘贴"></a>js操作剪切板复制粘贴</h1><blockquote><p>最近写一个js复制文本内容的功能，在网上搜了一圈，发大部分文章都是比较老旧的，有的甚至是flash复制。</p></blockquote><p>截至2016年，clipboard API还在发展中，很多规范已经更新，市面上大部分文章都是比较老的API，很大一部分被抛弃。</p><h2 id="使用event-clipboardData-setData-复制到剪切板"><a href="#使用event-clipboardData-setData-复制到剪切板" class="headerlink" title="使用event.clipboardData.setData()复制到剪切板"></a>使用event.clipboardData.setData()复制到剪切板</h2><p>在<code>copy</code>可以使用 event.clipboardData.setData() 更改剪贴板内容。</p><p>请注意，为了防止event事件默认操作被浏览器覆盖，需要阻止默认事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;copy&#x27;</span>，<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault(); <span class="comment">//默认行为是复制所选文本</span></span><br><span class="line">  e.clipboardData.setData(<span class="string">&#x27;text/plain&#x27;</span>，<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用execCommand触发复制事件"><a href="#使用execCommand触发复制事件" class="headerlink" title="使用execCommand触发复制事件"></a>使用execCommand触发复制事件</h2><p>如果需要触发复制事件(而不仅仅是通过浏览器UI处理用户复制的请求)，则必须使用document.execCommand(‘copy’)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;copyBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出发事件后还需要删除当前copy事件的绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> copy = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  e.clipboardData.setData(<span class="string">&#x27;text/plain&#x27;</span>, url || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  e.clipboardData.setData(<span class="string">&#x27;text/html&#x27;</span>, url || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;copy&#x27;</span>, copy, <span class="literal">false</span>)</span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;copy&#x27;</span>, copy)</span><br></pre></td></tr></table></figure><h2 id="浏览器对clipboard-API支持情况"><a href="#浏览器对clipboard-API支持情况" class="headerlink" title="浏览器对clipboard API支持情况"></a>浏览器对clipboard API支持情况</h2><ul><li>Firefox支持<code>copy/cut/paste</code>事件(Firefox 22+)和<code>execCommand(&#39;copy&#39;)</code>用户操作(Firefox 41+)。</li><li>Chrome也支持<code>copy/cut/paste</code>和<code>execCommand(&#39;copy&#39;)</code>(Chrome 42+)。</li><li>caniuse.com声称Safari(截至9.1)不支持<code>execCommand(&#39;copy&#39;)</code>。</li><li>微软的IE和Edge不支持clipboard API，可以使用微软自己的API:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.clipboardData.setData(<span class="string">&#x27;Text&#x27;</span>, url || <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="————-2017-07-27-更新-————"><a href="#————-2017-07-27-更新-————" class="headerlink" title="———— 2017-07-27 更新 ————"></a>———— 2017-07-27 更新 ————</h2><p>最近发现在Safari中document.execCommand(‘copy’)限制了必须由用户触发才有效，所以在Safari中document.execCommand(‘copy’)一直返回false</p><blockquote><p>It looks like the copied text gets returned properly by the event, but the document.execCommand(‘copy’) always returns false in Safari. Safari doesn’t support the execCommand API as mentioned at the bottom of the <a href="https://clipboardjs.com/">Clipboard.js documentation</a>.</p></blockquote><p>于是经过反复试错，最终决定使用兼容性最好的input.select()</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;copyInput&quot;</span> <span class="attr">id</span>=<span class="string">&quot;copyInput&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute;opacity: 0;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copyUrl = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;copyInput&#x27;</span>)</span><br><span class="line">    input.value = text</span><br><span class="line">    input.focus()</span><br><span class="line">    input.select()</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>, <span class="literal">false</span>, <span class="literal">null</span>)) &#123;</span><br><span class="line">      alert(<span class="string">&#x27;复制成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">&#x27;当前浏览器不支持复制操作，请使用Ctrl+c手动复制&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    alert(<span class="string">`复制出错：<span class="subst">$&#123;e&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AWS搭建自己的VPN</title>
      <link href="/2017/10/aws-vpn/"/>
      <url>/2017/10/aws-vpn/</url>
      
        <content type="html"><![CDATA[<h1 id="使用AWS搭建自己的VPN"><a href="#使用AWS搭建自己的VPN" class="headerlink" title="使用AWS搭建自己的VPN"></a>使用AWS搭建自己的VPN</h1><blockquote><p>免费拥有自己的海外VPN服务器。</p></blockquote><h2 id="部署自己的AWS服务器"><a href="#部署自己的AWS服务器" class="headerlink" title="部署自己的AWS服务器"></a>部署自己的AWS服务器</h2><p>网上有很多教程：<br><a href="http://www.freehao123.com/amazon-ec2-vps/">新Amazon EC2免费VPS主机申请和使用方法:Linux和Windows</a><br><a href="https://www.google.com.hk/search?q=%E7%94%B3%E8%AF%B7%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%9C%8D%E5%8A%A1%E5%99%A8&rlz=1C1CHWL_zh-CN__669__670&oq=%E7%94%B3%E8%AF%B7%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%9C%8D%E5%8A%A1%E5%99%A8&aqs=chrome..69i57j0l5.9665j0j7&sourceid=chrome&es_sm=122&ie=UTF-8">申请亚马逊服务器 - google 搜索</a><br><a href="https://www.baidu.com/s?wd=%E7%94%B3%E8%AF%B7%E4%BA%9A%E9%A9%AC%E9%80%8A%E6%9C%8D%E5%8A%A1%E5%99%A8&rsv_spt=1&rsv_iqid=0xdfe5dd75000b3330&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=0&inputT=894">申请亚马逊服务器_百度搜索</a></p><h2 id="使用putty软件，登录你的服务"><a href="#使用putty软件，登录你的服务" class="headerlink" title="使用putty软件，登录你的服务"></a>使用putty软件，登录你的服务</h2><ul><li>首先准备好刚才下载的软件putty和puttygen，和key文件(就是那个后缀pem的文件)</li><li>使用puttygen把pem转换成ppk</li><li>使用ip登陆<br>不会的参考：<a href="https://www.baidu.com/s?wd=putty%E7%99%BB%E9%99%86ec2&rsv_spt=1&rsv_iqid=0xdfe5dd75000b3330&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=0&inputT=12246">putty登陆ec2_百度搜索</a></li></ul><h2 id="使用root账户，直接输入"><a href="#使用root账户，直接输入" class="headerlink" title="使用root账户，直接输入"></a>使用root账户，直接输入</h2><p>EC2 ubuntu系统默认用户是<code>ubuntu</code><br>首先是启用root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br><span class="line"><span class="comment">#会让你输入2次密码</span></span><br></pre></td></tr></table></figure><p>然后使用Root账户登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="comment">#输入你刚才设置的密码会变成下面这样</span></span><br><span class="line">root@ip-172-31-20-144:/home/ubuntu<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="安装pptpd"><a href="#安装pptpd" class="headerlink" title="安装pptpd"></a>安装pptpd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install pptpd</span><br></pre></td></tr></table></figure><p>不获取root账户也可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pptpd</span><br></pre></td></tr></table></figure><h2 id="修改-etc-pptpd-conf文件，设置vpn代理地址"><a href="#修改-etc-pptpd-conf文件，设置vpn代理地址" class="headerlink" title="修改/etc/pptpd.conf文件，设置vpn代理地址"></a>修改/etc/pptpd.conf文件，设置vpn代理地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/pptpd.conf</span><br></pre></td></tr></table></figure><p>移动到文件末尾，按i进入编辑模式<br>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localip 192.168.0.1</span><br><span class="line">remoteip 192.168.0.234-238,192.168.0.245</span><br></pre></td></tr></table></figure><p>按Esc键，输入<code>:wq</code> 退出<br>(这里如果不小心删错了或者编辑错了，输入<code>:q!</code>退出就可以)</p><h2 id="修改-etc-ppp-pptpd-options文件-加上谷歌的dns"><a href="#修改-etc-ppp-pptpd-options文件-加上谷歌的dns" class="headerlink" title="修改/etc/ppp/pptpd-options文件, 加上谷歌的dns"></a>修改/etc/ppp/pptpd-options文件, 加上谷歌的dns</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure><p>还是和刚才一样，到文件末尾添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ms-dns    8.8.8.8</span><br><span class="line">ms-dns    8.8.4.4</span><br></pre></td></tr></table></figure><p>退出保存</p><h2 id="修改-etc-ppp-chap-secrets文件，设置用户名"><a href="#修改-etc-ppp-chap-secrets文件，设置用户名" class="headerlink" title="修改/etc/ppp/chap-secrets文件，设置用户名"></a>修改/etc/ppp/chap-secrets文件，设置用户名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure><p>配置你自己VPN的用户名/密码直接按i输入就行，格式见下方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;username&gt; pptpd &lt;passwd&gt; *</span><br></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user pptpd 123456 *</span><br></pre></td></tr></table></figure><h2 id="修改-etc-sysctl-conf，打开ip转发"><a href="#修改-etc-sysctl-conf，打开ip转发" class="headerlink" title="修改/etc/sysctl.conf，打开ip转发"></a>修改/etc/sysctl.conf，打开ip转发</h2><p>修改/etc/sysctl.conf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>最后添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>退出保存<br>执行重新加载配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/sysctl -p</span><br></pre></td></tr></table></figure><h2 id="启用iptables的NAT-configuration"><a href="#启用iptables的NAT-configuration" class="headerlink" title="启用iptables的NAT configuration"></a>启用iptables的NAT configuration</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><h2 id="为了保证每次EC2实例重启后NAT-configuration能启动"><a href="#为了保证每次EC2实例重启后NAT-configuration能启动" class="headerlink" title="为了保证每次EC2实例重启后NAT configuration能启动"></a>为了保证每次EC2实例重启后NAT configuration能启动</h2><p>修改/etc/rc.local文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br></pre></td></tr></table></figure><p>在exit 0这行上面加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><h2 id="vpn如何连接"><a href="#vpn如何连接" class="headerlink" title="vpn如何连接"></a>vpn如何连接</h2><p><a href="http://jingyan.baidu.com/article/a3f121e4f9903cfc9052bb0b.html">怎么设置vpn连接_百度经验</a><br><a href="http://jingyan.baidu.com/article/d71306350b042713fdf4759e.html">安卓手机怎么设置VPN，安卓手机VPN怎么用_百度经验</a><br><a href="http://jingyan.baidu.com/article/86fae3469769403c48121a71.html">vpn在iphone上怎么用_百度经验</a><br><a href="https://support.apple.com/zh-cn/HT201550">iOS：设置 VPN - Apple 支持</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 翻墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
            <tag> aws </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 选择器性能求解</title>
      <link href="/2017/10/css-selector-performance/"/>
      <url>/2017/10/css-selector-performance/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-选择器性能求解"><a href="#CSS-选择器性能求解" class="headerlink" title="CSS 选择器性能求解"></a>CSS 选择器性能求解</h1><blockquote><p>关于css性能的详细探究。</p></blockquote><p>上周去360面试，有这么一个面试题：</p><pre><code>写出下列最后输出文字的颜色的值?&lt;style&gt;a&#123;color:#000&#125;#header a&#123;color:pink&#125;.logo a&#123;color:pink&#125;h1 a&#123;color:pink&#125;&lt;/style&gt;&lt;h1 clss=&quot;#header&quot;&gt;    &lt;div class=&quot;logo&quot;&gt;&lt;a&gt;360&lt;/a&gt;&lt;/div&gt;&lt;/h1&gt;</code></pre><p>这么简单的题，我顺手就回答出来了～～科科</p><h2 id="优先级顺序"><a href="#优先级顺序" class="headerlink" title="优先级顺序"></a>优先级顺序</h2><p>选择器列表优先级逐级增加：</p><ul><li>通用选择器（*）</li><li>元素(类型)选择器</li><li>类选择器</li><li>属性选择器</li><li>伪类</li><li>ID 选择器</li><li>内联样式</li></ul><p>但是，接下来面试官提问又来了：优先级你知道，那他们的性能谁的最高你知道吗？<br>这下我就哔了个🐶了，css选择器也有性能一说，真实开眼界了！<br>回来马上开始查文档，看文章！</p><h2 id="CSS-选择器性能损耗来自哪里？"><a href="#CSS-选择器性能损耗来自哪里？" class="headerlink" title="CSS 选择器性能损耗来自哪里？"></a>CSS 选择器性能损耗来自哪里？</h2><p>我们中的大多数人都是从左到右的阅读习惯，会习惯性的设定浏览器也是从左到右的方式进行匹配规则，推测这条规则的开销并不高。事实上，却恰恰相反，CSS选择器是从右到左进行规则匹配。<br>可怜我以前一直的写法都是左到右多级寻找:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.shouc</span> <span class="selector-tag">a</span> &#123;...&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.shouc</span> <span class="selector-tag">a</span> <span class="selector-tag">i</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="如何减少-CSS-选择器性能损耗？"><a href="#如何减少-CSS-选择器性能损耗？" class="headerlink" title="如何减少 CSS 选择器性能损耗？"></a>如何减少 CSS 选择器性能损耗？</h2><p>Google 资深web开发工程师 <a href="http://stevesouders.com/">Steve Souders</a> 对 CSS 选择器的执行效率从高到低做了一个排序：</p><ul><li>id选择器（#myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div,h1,p）</li><li>相邻选择器（h1+p）</li><li>子选择器（ul &lt; li）</li><li>后代选择器（li a）</li><li>通配符选择器（*）</li><li>属性选择器（a[rel=”external”]）</li><li>伪类选择器（a:hover, li:nth-child）</li></ul><h4 id="阿树的一篇文章－如何提升-CSS-选择器性能详细介绍了关于css性能的优化"><a href="#阿树的一篇文章－如何提升-CSS-选择器性能详细介绍了关于css性能的优化" class="headerlink" title="阿树的一篇文章－如何提升 CSS 选择器性能详细介绍了关于css性能的优化"></a><a href="http://www.jianshu.com/users/vCyqyQ/latest_articles">阿树</a>的一篇文章－<a href="http://www.jianshu.com/p/268c7f3dd7a6">如何提升 CSS 选择器性能</a>详细介绍了关于css性能的优化</h4><h5 id="1、避免使用通用选择器"><a href="#1、避免使用通用选择器" class="headerlink" title="1、避免使用通用选择器"></a>1、避免使用通用选择器</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> * &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>浏览器匹配文档中所有的元素后分别向上逐级匹配 class 为 content 的元素，直到文档的根节点。因此其匹配开销是非常大的，所以应避免使用关键选择器是通配选择器的情况。</p><h5 id="2、避免使用标签或-class-选择器限制-id-选择器"><a href="#2、避免使用标签或-class-选择器限制-id-选择器" class="headerlink" title="2、避免使用标签或 class 选择器限制 id 选择器"></a>2、避免使用标签或 class 选择器限制 id 选择器</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">不好的例子：</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#backButton</span> &#123;…&#125;</span><br><span class="line">不好的例子：</span><br><span class="line"><span class="selector-class">.menu-left</span><span class="selector-id">#newMenuIcon</span> &#123;…&#125;</span><br><span class="line">好的例子：</span><br><span class="line"><span class="selector-id">#backButton</span> &#123;…&#125;</span><br><span class="line">好的例子：</span><br><span class="line"><span class="selector-id">#newMenuIcon</span> &#123;…&#125;</span><br></pre></td></tr></table></figure><h5 id="3、避免使用标签限制-class-选择器"><a href="#3、避免使用标签限制-class-选择器" class="headerlink" title="3、避免使用标签限制 class 选择器"></a>3、避免使用标签限制 class 选择器</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不好的例子：</span><br><span class="line">treecell<span class="selector-class">.indented</span> &#123;…&#125;</span><br><span class="line">好的例子：</span><br><span class="line"><span class="selector-class">.treecell-indented</span> &#123;…&#125;</span><br><span class="line">最好的例子：</span><br><span class="line"><span class="selector-class">.hierarchy-deep</span> &#123;…&#125;</span><br></pre></td></tr></table></figure><h5 id="4、避免使用多层标签选择器。使用-class-选择器替换，减少css查找"><a href="#4、避免使用多层标签选择器。使用-class-选择器替换，减少css查找" class="headerlink" title="4、避免使用多层标签选择器。使用 class 选择器替换，减少css查找"></a>4、避免使用多层标签选择器。使用 class 选择器替换，减少css查找</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不好的例子：</span><br><span class="line">treeitem<span class="selector-attr">[mailfolder=<span class="string">&quot;true&quot;</span>]</span> &gt; treerow &gt; treecell &#123;…&#125;</span><br><span class="line">好的例子：</span><br><span class="line"><span class="selector-class">.treecell-mailfolder</span> &#123;…&#125;</span><br></pre></td></tr></table></figure><h5 id="5、避免使用子选择器"><a href="#5、避免使用子选择器" class="headerlink" title="5、避免使用子选择器"></a>5、避免使用子选择器</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不好的例子：</span><br><span class="line">treehead treerow treecell &#123;…&#125;</span><br><span class="line">BETTER, BUT STILL 不好的例子：</span><br><span class="line">treehead &gt; treerow &gt; treecell &#123;…&#125;</span><br><span class="line">好的例子：</span><br><span class="line"><span class="selector-class">.treecell-header</span> &#123;…&#125;</span><br></pre></td></tr></table></figure><h5 id="6、使用继承"><a href="#6、使用继承" class="headerlink" title="6、使用继承"></a>6、使用继承</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不好的例子：</span><br><span class="line"><span class="selector-id">#bookmarkMenuItem</span> &gt; <span class="selector-class">.menu-left</span> &#123; <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">blah</span>) &#125;</span><br><span class="line">好的例子：</span><br><span class="line"><span class="selector-id">#bookmarkMenuItem</span> &#123; <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">blah</span>) &#125;</span><br></pre></td></tr></table></figure><h4 id="高性能CSS一文中还指出："><a href="#高性能CSS一文中还指出：" class="headerlink" title="高性能CSS一文中还指出："></a><a href="http://www.alloyteam.com/2012/10/high-performance-css/">高性能CSS</a>一文中还指出：</h4><h5 id="避免AlphaImageLoader滤镜"><a href="#避免AlphaImageLoader滤镜" class="headerlink" title="避免AlphaImageLoader滤镜"></a>避免AlphaImageLoader滤镜</h5><p>IE独有属性AlphaImageLoader用于修正7.0以下版本中显示PNG图片的半透明效果。这个滤镜的问题在于浏览器加载图片时它会终止内容的呈现并且冻结浏览器。在每一个元素（不仅仅是图片）它都会运算一次，增加了内存开支，因此它的问题是多方面的。完全避免使用AlphaImageLoader的最好方法就是使用PNG8格式来代替，这种格式能在IE中很好地工作。如果你确实需要使用AlphaImageLoader，请使用下划线_filter又使之对IE7以上版本的用户无效。</p><h5 id="避免CSS表达式"><a href="#避免CSS表达式" class="headerlink" title="避免CSS表达式"></a>避免CSS表达式</h5><p>CSS表达式是动态设置CSS属性的强大（但危险）方法。Internet Explorer从第5个版本开始支持CSS表达式。下面的例子中，使用CSS表达式可以实现隔一个小时切换一次背景颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="built_in">expression</span>((new <span class="built_in">Date</span>()).<span class="built_in">getHours</span>()%<span class="number">2</span>?<span class="string">&quot;#FFFFFF&quot;</span>: <span class="string">&quot;#000000&quot;</span> );</span><br></pre></td></tr></table></figure><p>如上所示，expression中使用了JavaScript表达式。CSS属性根据JavaScript表达式的计算结果来设置。expression方法在其它浏览器中不起作用，因此在跨浏览器的设计中单独针对Internet Explorer设置时会比较有用。<br>表达式的问题就在于它的计算频率要比我们想象的多。不仅仅是在页面显示和缩放时，就是在页面滚动、乃至移动鼠标时都会要重新计算一次。给CSS表达式增加一个计数器可以跟踪表达式的计算频率。在页面中随便移动鼠标都可以轻松达到10000次以上的计算量。一个减少CSS表达式计算次数的方法就是使用一次性的表达式，它在第一次运行时将结果赋给指定的样式属性，并用这个属性来代替CSS表达式。如果样式属性必须在页面周期内动态地改变，使用事件句柄来代替CSS表达式是一个可行办法。如果必须使用CSS表达式，一定要记住它们要计算成千上万次并且可能会对你页面的性能产生影响。</p><h5 id="避免类正则的属性选择器"><a href="#避免类正则的属性选择器" class="headerlink" title="避免类正则的属性选择器"></a>避免类正则的属性选择器</h5><p>CSS3添加了复杂的属性选择器，可以通过类正则表达式的方式对元素的属性值进行匹配。当然这些类型的选择器定是会影响性能的，正则表达式匹配会比基于类别的匹配会慢很多。大部分情况下我们应尽量避免使用 *=， |=， ^=， $=， 和 ~=语法的属性选择器。</p><h5 id="避免使用-import"><a href="#避免使用-import" class="headerlink" title="避免使用@import"></a>避免使用@import</h5><p>有两种方式加载样式文件，一种是link元素，另一种是CSS 2.1加入@import。而在外部的CSS文件中使用@import会使得页面在加载时增加额外的延迟。虽然规则允许在样式中调用@import来导入其它的CSS，但浏览器不能并行下载样式，就会导致页面增添了额外的往返耗时。比如，第一个CSS文件first.css包含了以下内容：@import url(“second.css”)。那么浏览器就必须先把first.css下载、解析和执行后，才发现及处理第二个文件second.css。简单的解决方法是使用<link>标记来替代@import;</p><h5 id="移除无匹配的样式"><a href="#移除无匹配的样式" class="headerlink" title="移除无匹配的样式"></a>移除无匹配的样式</h5><p>移除无匹配的样式，有两个好处：<br>第一，删除无用的样式后可以缩减样式文件的体积，加快资源下载速度；<br>第二，对于浏览器而言，所有的样式规则的都会被解析后索引起来，即使是当前页面无匹配的规则。移除无匹配的规则，减少索引项，加快浏览器查找速度；</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>作为一名前端工程师，应该具有「提升 CSS 选择器性能」的意识，但实际应用中，是否需要完全贯彻这些原则呢？我认为在「可维护性」前提下，提升 CSS 选择器性能是有必要的，但绝不追求「高性能」而牺牲「可维护性」。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git shell 技巧</title>
      <link href="/2017/10/git-shell-skills/"/>
      <url>/2017/10/git-shell-skills/</url>
      
        <content type="html"><![CDATA[<h1 id="git-shell-技巧"><a href="#git-shell-技巧" class="headerlink" title="git shell 技巧"></a>git shell 技巧</h1><blockquote><p>git作为常用的代码管理工具，有些shell脚本可以大大提高使用git的效率，本文主要介绍一下我常用的一些shell技巧。</p></blockquote><h2 id="git-shell-自动补全"><a href="#git-shell-自动补全" class="headerlink" title="git shell 自动补全"></a>git shell 自动补全</h2><h5 id="如果你用的是-Bash-shell，可以试试看-Git-提供的自动补全脚本"><a href="#如果你用的是-Bash-shell，可以试试看-Git-提供的自动补全脚本" class="headerlink" title="如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本"></a>如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本</h5><ul><li>git的源代码包里有个自动补全的shell脚本：<br><code>contrib/completion／git-completion.bash</code></li><li>把这个文件保存到<code>~/.git-completion.bash</code>，</li><li>然后在<code>.bash_profile</code>中加入一行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.git-completion.bash</span><br></pre></td></tr></table></figure></li><li>重启终端即可使用</li></ul><h5 id="也可以为系统上所有用户都设置默认使用此脚本。"><a href="#也可以为系统上所有用户都设置默认使用此脚本。" class="headerlink" title="也可以为系统上所有用户都设置默认使用此脚本。"></a>也可以为系统上所有用户都设置默认使用此脚本。</h5><ul><li>脚本复制到本机<ul><li> Mac <code>/opt/local/etc/bash_completion.d</code> 目录中，</li><li> Linux 复制到 <code>/etc/bash_completion.d/</code> 目录中。</li></ul></li><li> 这两处目录中的脚本，都会在 Bash 启动时自动加载。</li></ul><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%8A%80%E5%B7%A7%E5%92%8C%E7%AA%8D%E9%97%A8">2.7 Git 基础 - 技巧和窍门</a></p><h2 id="设置Git命令别名"><a href="#设置Git命令别名" class="headerlink" title="设置Git命令别名"></a>设置Git命令别名</h2><h5 id="打开-bash-profile-文件"><a href="#打开-bash-profile-文件" class="headerlink" title="打开.bash_profile 文件"></a>打开<code>.bash_profile </code>文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><h5 id="设置以下别名"><a href="#设置以下别名" class="headerlink" title="设置以下别名"></a>设置以下别名</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gst=<span class="string">&#x27;git status&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gcom=<span class="string">&#x27;git commit -m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gadd=<span class="string">&#x27;git add .&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> push=<span class="string">&#x27;git push origin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> pull=<span class="string">&#x27;git pull origin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gb=<span class="string">&#x27;git branch&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gba=<span class="string">&#x27;git branch -a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gbd=<span class="string">&#x27;git branch -D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> glog=<span class="string">&#x27;git log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gc=<span class="string">&#x27;git checkout&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gcb=<span class="string">&#x27;git checkout -b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> gcf=<span class="string">&#x27;git checkout -f&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="也可以设置其他shel命令别名"><a href="#也可以设置其他shel命令别名" class="headerlink" title="也可以设置其他shel命令别名"></a>也可以设置其他shel命令别名</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> pss=<span class="string">&#x27;ps -ef|grep&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> k9=<span class="string">&#x27;kill -9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> chmod7=<span class="string">&#x27;chmod -R 777&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">&#x27;rm -i&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> cli </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JavaScript的一些总结</title>
      <link href="/2017/10/JavaScript-some-of-the-summary/"/>
      <url>/2017/10/JavaScript-some-of-the-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="关于JavaScript的一些总结"><a href="#关于JavaScript的一些总结" class="headerlink" title="关于JavaScript的一些总结"></a>关于JavaScript的一些总结</h1><blockquote><p>众所周知，JavaScript是动态的面向对象的编程语言，能够实现以下效果：</p><blockquote><ol><li>丰富Web 网页功能</li><li>丰富Web界面</li><li>实现本地或远程存储。</li><li>实现分布式网络应用的前端组件，并在后台进行数据存储管理。</li><li>使用JavaScript可以实现完整的分布式Web 应用。</li></ol></blockquote></blockquote><h2 id="JavaScript-中的数据类型"><a href="#JavaScript-中的数据类型" class="headerlink" title="JavaScript 中的数据类型"></a>JavaScript 中的数据类型</h2><p>JavaScript 提供三种元数据类型:<code>string</code>, <code>number</code>, <code>Boolean</code>,<br>可使用<code>typeof(type)</code> 测试变量type 的类型</p><p>提供五种基本的引用类型：<code>Object</code>, <code>Array</code>, <code>Function</code>, <code>Date</code> 及<code>RegExp</code>。<br>数组，函数，日期和正则表达式是特殊类型，但是严格来讲，日期和正则表达式是元数据类型，可封装在其他对象中。</p><p>JS 中变量类型，数组元素类型，函数参数以及返回值的类型不需要声明类型，类型之间的转换是自动执行的。</p><p>变量值可以是:</p><ul><li>数值：如字符串，数字或布尔值。</li><li>对象引用： 可引用典型对象，也可以是数据，函数，日期或正则表达式。</li><li>特殊数据值，Null,是典型的用于初始化对象的默认值。</li><li>特殊数据undefined，常用于已被定义，但未赋值的变量。</li></ul><p><code>string</code> 是一系列的Unicode字符串，String 如“hello world”,’A3FO’或空字符串“”，字符串连接可通过+操作符来执行，也可以使用=号来验证两个字符串是否相等；</p><p><code>number</code> 表示64位的浮点数，在JS中没有明显的区分整形和浮点数，如果一个表达式的值不等于某个数字，那么它的值可设为NaN,表示非数字，可联合isNaN使用。</p><p>如下表是详细的类型测试和转换</p><h2 id="变量作用域范围"><a href="#变量作用域范围" class="headerlink" title="变量作用域范围"></a>变量作用域范围</h2><p>目前，JavaScript，ES5提供两种作用域类型：全局变量及函数作用域，没有块作用域。块作用域的范围不太明确，所以应当避免块作用域的使用。如下代码，尽管是开发人员常用的Pattern,却是一个陷阱。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    ...  <span class="comment">// do something with i</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>所有的变量声明最好是在函数的开始位置。在JS，ES6版本中支持块作用域，采用关键字let 定义变量。</p><p>严格模式（Strict Mode）<br>从ES5开始， 严格模式用于检测运行时的错误，在严格模式下，所有的变量必须声明，如果给未声明的变量赋值会抛出异常。<br>在JavaScript 文件或<code>&lt;Script&gt;</code>元素内，通过输入以下代码切换到严格模式：<code>use strict;</code><br>建议采用严格模式，除非项目依赖的库不兼容严格模式。</p><h2 id="多种对象"><a href="#多种对象" class="headerlink" title="多种对象"></a>多种对象</h2><p>JS中对象不需要实例化，也可以有自己的方法，不仅有property，也包含method。除此之外还包含key-value；因此他们总共有三种扩展。</p><p>JS对象是由一系列的key-value组成的。而key可以是属性名称，函数名称，映射名称。</p><p>对象可通过一种特定的方式创建，使用JS 对象声明语法（JSON），而不需要实例化一个类。<br>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Object</span> = &#123; <span class="attr">lastName</span>:<span class="string">&quot;hello&quot;</span>, <span class="attr">firstName</span>:<span class="string">&quot;word&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>Object 属性可以使用两种方法来访问：</p><ul><li>使用”.”(与C++ 和Java的类似)：<code>Object.key = val</code></li><li>使用map：<code>Object[key] = val</code></li></ul><p>JS 对象能够用于各种途径，以下是3⃣️种常见情况：</p><ol><li>Property集合；</li><li>map 如Hash map，数组，hash表；</li><li>对象不需要实例化类，它可能包含property和function:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;word&quot;</span>,</span><br><span class="line">  <span class="attr">getFullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName +<span class="string">&quot; &quot;</span>+ <span class="built_in">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Array-List"><a href="#Array-List" class="headerlink" title="Array List"></a>Array List</h2>JS array 即逻辑数据结构，通过数组下标访问。如数组初始化：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>JS数组可动态增长，因此数组索引有可能比实际元素个数多，如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">4</span>] = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>数组循环：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; arr.length; i++) &#123; ...&#125;</span><br></pre></td></tr></table></figure>数组是特殊的对象类型，因此有很多情况下，需要判断变量是否为数组类型，使用IsArray方法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(arr)</span><br></pre></td></tr></table></figure>添加新元素到数组：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.push(newArray);</span><br></pre></td></tr></table></figure>删除：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(i, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>查找：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr.indexOf(v) &gt; -<span class="number">1</span>)  ...</span><br></pre></td></tr></table></figure>循环：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果数组较小，可使用foreach 循环：<br>a.forEach( function (elem) {<br>console.log( elem);<br>})</li></ol><p>JS 也提供克隆数组的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clone = arr.slice(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>map 提供key 到值得映射。JS map 是一串字符集，可包含空格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">&quot;apple&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orgin&quot;</span>: <span class="string">&quot;yellow&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[<span class="string">&quot;banana&quot;</span>] = <span class="string">&quot;yellow&quot;</span>;</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[<span class="string">&quot;banana&quot;</span>] = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>查找：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;yellow&quot;</span> <span class="keyword">in</span> map)  ...</span><br></pre></td></tr></table></figure><p>循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log( map[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果map 较小可使用foreach 语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>[key]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>复制map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(map))</span><br></pre></td></tr></table></figure><p>record，map，entity 在实际应用中没有明显的区分，只是概念上的区分。对JS 引擎而言，都是对象。但是从概念上是有区分的。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> <span class="title">functionName</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>functionName</code>是可选的，如果省略函数名称，则称该函数为匿名函数。通常，函数是通过变量来调用的，如上面的代码，则表示<br><code>myFunction</code> 会调用<code>myFunction()</code>函数，而不是使用<code>functionName()</code>调用。<br>匿名函数表达式在其他编程语言中称为lambda 表达式。如下代码是匿名函数。可以与预定义的sort函数对比：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>]];</span><br><span class="line">list.sort( <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x[<span class="number">0</span>] === y[<span class="number">0</span>]) ? x[<span class="number">1</span>]-y[<span class="number">1</span>] : x[<span class="number">0</span>]-y[<span class="number">0</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>函数声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>与代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span> <span class="title">functionName</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>等价；<br>声明了函数functionName ，并使用functionName 变量来引用函数。<br>JS 提供函数内联，closure机制允许JS 函数调用函数之外的使用变量。函数可以创建closure 来存储当前的环境。如下，不需要通过参数将外部变量的结果传给内部函数，它本身就是可用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">  numbers.forEach( <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">      result += n;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure><p>当执行一个方法时，可以使用内置arguments 对象访问函数内的参数，arguments 对象与数组使用方法类似，有长度属性，也有索引，并且可以使用For语句来循环迭代。但是由于它并不是Array 实例，因此JS arrary的部分方法无法应用如foreach。<br>arguments 对象的元素个数与函数参数个数相同，也可以定义方法的时候不指定参数个数，在调用时，可为函数赋多个参数，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>, i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    result = result + <span class="built_in">arguments</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log( sum(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>));  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>方法是在构造函数的原型上定义的，可以通过对象创建的构造器调用，如<code>Array.prototype.forEach</code>；Array表示构造器，调用类的实例作为上下文对象参考的，如下： 在foreach中numbers表示上下文对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];  <span class="comment">// create an instance of Array</span></span><br><span class="line">numbers.forEach( <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( n);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>无论原型方法是否被上下文对象调用，但是只要是参数为对象，可以使用JS函数的Call 方法来辅助调用对象。如下，我们可以使用foreach 循环方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach.call( <span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    result = result + n;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Function.prototype.call</code>方法和<code>Function.prototype.apply</code>都是为了改变某个函数运行时的 context 即上下文而存在的。</p><h4 id="定义和使用类"><a href="#定义和使用类" class="headerlink" title="定义和使用类"></a>定义和使用类</h4><p>类是面向对象中的基本概念，对象的实例化称为类。JS中定义类需要满足以下五个需求：</p><ul><li>指定类的名称，实例级别的属性和方法，类级别的属性和方法。</li><li>是可预测的实力，能够用于验证是否是某一对象的实例。</li><li>实例级别的属性用于检测对象的直接类型。</li><li>属性继承</li><li>方法继承。<br>除此之外还支持对哦集成和多分类。<br>JS中对类没有统一的定义规范，可以使用不同代码模式来定义类，并应用于多种不同的框架。JS中最常用的定义类的方法如下：</li><li> 构造函数规范，可通过prototype chain实现方法继承，并支持创建新的类实例。</li><li> factory 对象，用于预定义Object.create 方法来创建新实例。该方法中基于构造函数的继承机制可以被其他机制代替。<br>创建App都需要使用类，因此经常需要定义类之间的关系，所以必须保证，使用相同类</li></ul><h4 id="Constructor-based-classes只有ES6引入了定义基于构造器的类。新语法支持定义一些简单的类继承，具体步骤如下："><a href="#Constructor-based-classes只有ES6引入了定义基于构造器的类。新语法支持定义一些简单的类继承，具体步骤如下：" class="headerlink" title="Constructor-based classes只有ES6引入了定义基于构造器的类。新语法支持定义一些简单的类继承，具体步骤如下："></a>Constructor-based classes只有ES6引入了定义基于构造器的类。新语法支持定义一些简单的类继承，具体步骤如下：</h4><h5 id="定义一个基类Person-具有两个属性，first-Name-和Last-Name，实例层的方法toString和静态方法checkLastName；"><a href="#定义一个基类Person-具有两个属性，first-Name-和Last-Name，实例层的方法toString和静态方法checkLastName；" class="headerlink" title="定义一个基类Person 具有两个属性，first Name 和Last Name，实例层的方法toString和静态方法checkLastName；"></a>定义一个基类Person 具有两个属性，<code>first Name</code> 和<code>Last Name</code>，实例层的方法<code>toString</code>和静态方法<code>checkLastName</code>；</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"> first, last</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName = first;</span><br><span class="line">    <span class="built_in">this</span>.lastName = last;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> +</span><br><span class="line">        <span class="built_in">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">checkLastName</span>(<span class="params"> ln</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(ln)!==<span class="string">&quot;string&quot;</span> ||</span><br><span class="line">        ln.trim()===<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Error: &quot;</span> +</span><br><span class="line">          <span class="string">&quot;invalid last name!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义一个带有其他属性和方法的子类，也有可能重写父类的相关方法："><a href="#定义一个带有其他属性和方法的子类，也有可能重写父类的相关方法：" class="headerlink" title="定义一个带有其他属性和方法的子类，也有可能重写父类的相关方法："></a>定义一个带有其他属性和方法的子类，也有可能重写父类的相关方法：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;  <span class="function"><span class="title">constructor</span>(<span class="params"> first, last, studNo</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.constructor( first, last);</span><br><span class="line">    <span class="built_in">this</span>.studNo = studNo;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// method overrides superclass method</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.toString() + <span class="string">&quot;(&quot;</span> +</span><br><span class="line">        <span class="built_in">this</span>.studNo +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES5中，可以定义继承基于构造器类的子类。如下："><a href="#ES5中，可以定义继承基于构造器类的子类。如下：" class="headerlink" title="ES5中，可以定义继承基于构造器类的子类。如下："></a>ES5中，可以定义继承基于构造器类的子类。如下：</h4><h5 id="首先定义构造函数，能够隐式的定义类的属性并赋值；"><a href="#首先定义构造函数，能够隐式的定义类的属性并赋值；" class="headerlink" title="首先定义构造函数，能够隐式的定义类的属性并赋值；"></a>首先定义构造函数，能够隐式的定义类的属性并赋值；</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> first, last</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.firstName = first;</span><br><span class="line">  <span class="built_in">this</span>.lastName = last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，上述代码中的this 指的是新生成的对象，当构造函数被调用时，该对象就已经生成了。</p><h5 id="定义实例层的方法："><a href="#定义实例层的方法：" class="headerlink" title="定义实例层的方法："></a>定义实例层的方法：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot; &quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义静态方法："><a href="#定义静态方法：" class="headerlink" title="定义静态方法："></a>定义静态方法：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.checkLastName = <span class="function"><span class="keyword">function</span> (<span class="params">ln</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span>(ln)!==<span class="string">&quot;string&quot;</span> || ln.trim()===<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Error: invalid last name!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义子类："><a href="#定义子类：" class="headerlink" title="定义子类："></a>定义子类：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> first, last, studNo</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// invoke superclass constructor</span></span><br><span class="line">  Person.call( <span class="built_in">this</span>, first, last);</span><br><span class="line">  <span class="comment">// define and assign additional properties</span></span><br><span class="line">  <span class="built_in">this</span>.studNo = studNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用超类的构造函数Person.call( this, …)，来创建新对象。其中This指的是Student，Property Slots 在超类的构造函数中已经创建（(firstName 和lastName） 以及其他子类相关的属性。在这种情况下可使用Property Inheritance 机制保证所有的属性已经被定义且被创建。</p><h5 id="通过构造函数的prototype-属性安装method-inheritance-。如下，分配了一个新对象创建子类型构造函数的Prototype-属性，并做出适当的调整："><a href="#通过构造函数的prototype-属性安装method-inheritance-。如下，分配了一个新对象创建子类型构造函数的Prototype-属性，并做出适当的调整：" class="headerlink" title="通过构造函数的prototype 属性安装method inheritance 。如下，分配了一个新对象创建子类型构造函数的Prototype 属性，并做出适当的调整："></a>通过构造函数的prototype 属性安装method inheritance 。如下，分配了一个新对象创建子类型构造函数的Prototype 属性，并做出适当的调整：</h5><p>// Student inherits from<br>PersonStudent.prototype = Object.create(Person.prototype);<br>// adjust the subtype’s constructor<br>propertyStudent.prototype.constructor = Student;</p><h5 id="重新定义子类方法重写超类方法："><a href="#重新定义子类方法重写超类方法：" class="headerlink" title="重新定义子类方法重写超类方法："></a>重新定义子类方法重写超类方法：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student inherits from Person</span></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(</span><br><span class="line">    Person.prototype);</span><br><span class="line"><span class="comment">// adjust the subtype&#x27;s constructor property</span></span><br><span class="line">Student.prototype.constructor = Student;</span><br></pre></td></tr></table></figure><h5 id="基于构造器类的实例化是通过应用new-操作符来创建的，并提供合适的构造参数："><a href="#基于构造器类的实例化是通过应用new-操作符来创建的，并提供合适的构造参数：" class="headerlink" title="基于构造器类的实例化是通过应用new 操作符来创建的，并提供合适的构造参数："></a>基于构造器类的实例化是通过应用new 操作符来创建的，并提供合适的构造参数：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Person.prototype.toString.call( <span class="built_in">this</span>) +</span><br><span class="line">      <span class="string">&quot;(&quot;</span> + <span class="built_in">this</span>.studNo + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法toString 通过pers1. 来调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;The full name of the person are: &quot;</span> +      pers1.toString());</span><br></pre></td></tr></table></figure><p>在JS中，prototype 是具有method slots 的对象，可以通过JS方法或属性槽继承的。</p><h4 id="基于Factory-的类"><a href="#基于Factory-的类" class="headerlink" title="基于Factory 的类"></a>基于Factory 的类</h4><p>在该方法中定义了JS 对象Person，含有特殊的Create 方法来调用预定义的Object.Create方法，创建Person类型的对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Person&quot;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: &#123;<span class="attr">range</span>:<span class="string">&quot;NonEmptyString&quot;</span>, <span class="attr">label</span>:<span class="string">&quot;First name&quot;</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    <span class="attr">lastName</span>: &#123;<span class="attr">range</span>:<span class="string">&quot;NonEmptyString&quot;</span>, <span class="attr">label</span>:<span class="string">&quot;Last name&quot;</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">getFullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName +<span class="string">&quot; &quot;</span>+ <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">create</span>: <span class="function"><span class="keyword">function</span> (<span class="params">slots</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// create object</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create( <span class="built_in">this</span>.methods, <span class="built_in">this</span>.properties);</span><br><span class="line">    <span class="comment">// add special property for *direct type* of object</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty( obj, <span class="string">&quot;type&quot;</span>,</span><br><span class="line">        &#123;<span class="attr">value</span>: <span class="built_in">this</span>, <span class="attr">writable</span>: <span class="literal">false</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="comment">// initialize object</span></span><br><span class="line">    <span class="built_in">Object</span>.keys( slots).forEach( <span class="function"><span class="keyword">function</span> (<span class="params">prop</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (prop <span class="keyword">in</span> <span class="built_in">this</span>.properties) obj[prop] = slots[prop];</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意JS对象Person实际表示的是factory-based 类。factory-based类的实例化是通过调用它自己的Create方法实现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pers1 = Person.create( &#123;<span class="attr">firstName</span>:<span class="string">&quot;Tom&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Smith&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>getFullName 方法是通过pers1. 调用的，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;The full name of the person are: &quot;</span> + pers1.getFullName());</span><br></pre></td></tr></table></figure><p>每个属性的声明都是使用Object.Create 声明的，其中包含三个参数及值，’descriptors’writable: true and enumerable: true。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 常用方法 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索引擎命令</title>
      <link href="/2017/10/search-command/"/>
      <url>/2017/10/search-command/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索引擎命令"><a href="#搜索引擎命令" class="headerlink" title="搜索引擎命令"></a>搜索引擎命令</h1><blockquote><p>记录一些高级实用的搜索技巧。</p></blockquote><h2 id="双引号””"><a href="#双引号””" class="headerlink" title="双引号””"></a>双引号””</h2><p>把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。baidu和Google 都支持这个指令。<br>例如搜索： <code>“淘宝设计”</code><br><img src="/static/img/search-command/001.png" alt="001"></p><h2 id="减号"><a href="#减号" class="headerlink" title="减号-"></a>减号-</h2><p>减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。Google和baidu都支持这个指令。<br>例如：<code>淘宝 -设计</code><br><img src="/static/img/search-command/006.png" alt="006"><br>返回的则是包含“淘宝”这个词，却不包含“设计”这个词的结果</p><h2 id="星号"><a href="#星号" class="headerlink" title="星号*"></a>星号*</h2><p>星号<code>*</code>是常用的通配符，也可以用在搜索中。百度不支持<em>号搜索指令。<br>比如在Google 中搜索：<code>搜索*擎</code><br><img src="/static/img/search-command/005.png" alt="005"><br>其中的</em>号代表任何文字。返回的结果就不仅包含“搜索引擎”，还包含了“搜索收擎”，“搜索巨擎”等内容。</p><h2 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h2><p>inurl: 指令用于搜索查询词出现在url 中的页面。baidu和Google 都支持inurl 指令。inurl 指令支持中文和英文。<br>比如搜索：<code>inurl:淘宝设计</code><br><img src="/static/img/search-command/002.png" alt="002"></p><h2 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h2><p>用于搜索特定文件格式。Google和baidu都支持filetype 指令。<br>比如搜索<code>filetype:pdf 设计</code><br><img src="/static/img/search-command/003.png" alt="003"><br>返回的就是包含设计这个关键词的所有pdf文件。</p><h2 id="site"><a href="#site" class="headerlink" title="site"></a>site</h2><p><code>site:</code>是SEO 最熟悉的高级搜索指令，用来搜索某个域名下的所有文件。</p><h3 id="搜各种软件："><a href="#搜各种软件：" class="headerlink" title="搜各种软件："></a>搜各种软件：</h3><p><code>关键词 site:pan.baidu.com</code><br><img src="/static/img/search-command/004-3.png" alt="004-3"></p><h3 id="搜一些常用问题："><a href="#搜一些常用问题：" class="headerlink" title="搜一些常用问题："></a>搜一些常用问题：</h3><p><code>关键词 site:zhihu.com</code><br><img src="/static/img/search-command/004-1.png" alt="004-1"></p><h3 id="搜一些八卦新闻："><a href="#搜一些八卦新闻：" class="headerlink" title="搜一些八卦新闻："></a>搜一些八卦新闻：</h3><p><code>关键词 site:tieba.baidu.com</code><br><img src="/static/img/search-command/004-2.png" alt="004-2"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js判断一个对象是否为空对象</title>
      <link href="/2017/10/the-object-is-an-empty-object/"/>
      <url>/2017/10/the-object-is-an-empty-object/</url>
      
        <content type="html"><![CDATA[<h1 id="js判断一个对象是否为空对象"><a href="#js判断一个对象是否为空对象" class="headerlink" title="js判断一个对象是否为空对象"></a>js判断一个对象是否为空对象</h1><blockquote><p>最近遇到一个问题，用vue循环一个数组，展示一些海报图片。数组为空的话是不会遍历的，为了不让能够出现默认图片，这也就需要在数组中增加一个默认空对象arr[{}]。问题来了，提交的时候怎么判断这个对象是空的呢？</p></blockquote><h2 id="简单粗暴的判断"><a href="#简单粗暴的判断" class="headerlink" title="简单粗暴的判断"></a>简单粗暴的判断</h2><p>因为是展示海报图片，每个对象下都有url属性，所以最直接的判断当前object的url属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr[<span class="number">0</span>].url) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法是无法判断arr为空的情况，如果arr[0]是个null，那么浏览器回抛出<code>Cannot read property &#39;url&#39; of undefined</code>的错误</p><h2 id="使用es5的getOwnPropertyNames属性"><a href="#使用es5的getOwnPropertyNames属性" class="headerlink" title="使用es5的getOwnPropertyNames属性"></a>使用es5的getOwnPropertyNames属性</h2><p>getOwnPropertyNames 方法可以获取所有的元素键。它的返回值是一个数组，当数组长度为零时，说明对象为空。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.getOwnPropertyNames(arr[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>这个方法和第一个方法相同，如果arr是个空数组，会抛出<code>Cannot convert undefined or null to object</code></p><h2 id="jQuery的实现方法"><a href="#jQuery的实现方法" class="headerlink" title="jQuery的实现方法"></a>jQuery的实现方法</h2><p>Js判断object/json 是否为空，可以使用jQuery的isEmptyObject()方法。<br>jquery的实现非常简单，就是for in循环对象，默认返回true，如果可以循环则return false<br>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法可以兼容到所有异常情况，下面是例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(isEmptyObject());           <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(&#123;&#125;));         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(<span class="literal">null</span>));       <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(<span class="number">111</span>));         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;));      <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="过滤原型继承属性的方法"><a href="#过滤原型继承属性的方法" class="headerlink" title="过滤原型继承属性的方法"></a>过滤原型继承属性的方法</h2><p>上面也是最简单的实现，其实我们实际生产中还面对很多问题，不如对象从别处继承的对象过滤。<br>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOwnEmpty</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 file对象和blob对象的互相转换</title>
      <link href="/2017/10/html5-file/"/>
      <url>/2017/10/html5-file/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5-file对象和blob对象的互相转换"><a href="#HTML5-file对象和blob对象的互相转换" class="headerlink" title="HTML5 file对象和blob对象的互相转换"></a>HTML5 file对象和blob对象的互相转换</h1><blockquote><p>最近在做一个裁剪图片的需求，基于vue和elementui，裁剪完图片遇到一个坑，elementui的upload组件接受一个promise，要求promise resolve一个File对象才可以使用新文件上传，而canvas是转成了blob对象，我google查了好久，没有发现有blob对象转File的文章，所以今天来写一个吧！</p></blockquote><h2 id="使用FileReader-对象转换：File-gt-DataURL"><a href="#使用FileReader-对象转换：File-gt-DataURL" class="headerlink" title="使用FileReader 对象转换：File =&gt; DataURL"></a>使用FileReader 对象转换：File =&gt; DataURL</h2><p>该对象用于读取文件（读取单个对象文件，所以，不能直接读取 Filelist 对象文件集合），即把文件内容读入内存。它接收 File 对象或 Blob 对象，作为参数。</p><h5 id="生成该对象的构造函数方法如下："><a href="#生成该对象的构造函数方法如下：" class="headerlink" title="生成该对象的构造函数方法如下："></a>生成该对象的构造函数方法如下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader(); <span class="comment">// 参数为 Blob 对象或 File 对象</span></span><br></pre></td></tr></table></figure><h5 id="对于不同类型的文件，FileReader-使用不同的方法读取。方法如下："><a href="#对于不同类型的文件，FileReader-使用不同的方法读取。方法如下：" class="headerlink" title="对于不同类型的文件，FileReader 使用不同的方法读取。方法如下："></a>对于不同类型的文件，FileReader 使用不同的方法读取。方法如下：</h5><ul><li>readAsBinaryString(Blob|File)：返回二进制字符串，该字符串每个字节包含一个 0 到 255 之间的整数。</li><li>readAsText(Blob|File, opt_encoding) ：返回文本字符串。默认情况下，文本编码格式是’UTF-8’，可以通过可选的格式参数，指定其他编码格式的文本。</li><li>readAsDataURL(Blob|File)：返回一个基于 Base64 编码的 data-uri 对象。</li><li>readAsArrayBuffer(Blob|File) ：返回一个 ArrayBuffer（数组缓存）对象。</li><li>abort()：该方法用于中止文件上传。</li></ul><h5 id="下面是获取上传对象的文本内容的方法："><a href="#下面是获取上传对象的文本内容的方法：" class="headerlink" title="下面是获取上传对象的文本内容的方法："></a>下面是获取上传对象的文本内容的方法：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// target.result 该属性表示目标对象的DataURL</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.target.result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传入一个参数对象即可得到基于该参数对象的文本内容</span></span><br><span class="line">reader.rederAsDataURL(file);</span><br></pre></td></tr></table></figure><h2 id="利用canvas剪切图片"><a href="#利用canvas剪切图片" class="headerlink" title="利用canvas剪切图片"></a>利用canvas剪切图片</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">CanvasRenderingContext2D.drawImage()</a> 是 Canvas 2D API 中的方法，它提供了多种方式来在Canvas上绘制图像，我们使用drawImage方法节剪切图片。</p><h5 id="先从canvas获取剪切过的图片DataURL"><a href="#先从canvas获取剪切过的图片DataURL" class="headerlink" title="先从canvas获取剪切过的图片DataURL"></a>先从canvas获取剪切过的图片DataURL</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取canvas</span></span><br><span class="line"><span class="keyword">let</span> ctx = <span class="built_in">this</span>.$refs.canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取图片dom元素</span></span><br><span class="line"><span class="keyword">let</span> image = <span class="built_in">this</span>.$refs.image</span><br><span class="line"><span class="comment">// 裁剪图片200 * 200图片</span></span><br><span class="line">ctx.drawImage(image, x, y, w, h, <span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// canvas生成剪切过的图片DataURL</span></span><br><span class="line"><span class="built_in">this</span>.cutAvater = <span class="built_in">this</span>.$refs.canvas.toDataURL()</span><br></pre></td></tr></table></figure><p>具体的裁剪方法我下篇文章会写</p><h5 id="将dataurl转换为Blob对象"><a href="#将dataurl转换为Blob对象" class="headerlink" title="将dataurl转换为Blob对象"></a>将dataurl转换为Blob对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">this</span>.cutAvater.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> data = <span class="built_in">window</span>.atob(arr[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">let</span> mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(data.length)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">  ia[i] = data.charCodeAt(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.blob = <span class="keyword">new</span> Blob([ia], &#123;<span class="attr">type</span>: mime&#125;)</span><br></pre></td></tr></table></figure><h2 id="利用File-Api讲blob转成File对象"><a href="#利用File-Api讲blob转成File对象" class="headerlink" title="利用File Api讲blob转成File对象"></a>利用File Api讲blob转成File对象</h2><p>其实我google找了一圈只有 File =&gt; Blob，没人写怎么用Blob =&gt; File<br>最终我在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File">File</a>中找到了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/File">File()构造函数</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = <span class="keyword">new</span> <span class="built_in">window</span>.File([<span class="built_in">this</span>.blob], file.name, &#123;<span class="attr">type</span>: file.type&#125;)</span><br></pre></td></tr></table></figure><p>File()构造函数的前两个参数为必传</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">Blob</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File">File</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/File">File.File()</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">CanvasRenderingContext2D.drawImage()</a></p><p><a href="http://javascript.ruanyifeng.com/htmlapi/file.html">文件和二进制数据的操作</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5 </tag>
            
            <tag> file </tag>
            
            <tag> blob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的正则表达式</title>
      <link href="/2017/07/common-regular-expression/"/>
      <url>/2017/07/common-regular-expression/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的正则表达式"><a href="#常用的正则表达式" class="headerlink" title="常用的正则表达式"></a>常用的正则表达式</h1><blockquote><p>记录下常用的正则表达式，以后就不用搜索了。</p></blockquote><h5 id="匹配中文字符：-u4e00-u9fa5"><a href="#匹配中文字符：-u4e00-u9fa5" class="headerlink" title="匹配中文字符： [\u4e00-\u9fa5]"></a>匹配中文字符： <code>[\u4e00-\u9fa5]</code></h5><h5 id="匹配双字节字符-包括汉字在内-：-x00-xff"><a href="#匹配双字节字符-包括汉字在内-：-x00-xff" class="headerlink" title="匹配双字节字符(包括汉字在内)：[^\x00-\xff]"></a>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code></h5><h5 id="匹配HTML标记：-lt-S-gt-gt-lt-gt-lt-gt"><a href="#匹配HTML标记：-lt-S-gt-gt-lt-gt-lt-gt" class="headerlink" title="匹配HTML标记：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;"></a>匹配HTML标记：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;</code></h5><h5 id="匹配首尾空白字符：-s-s"><a href="#匹配首尾空白字符：-s-s" class="headerlink" title="匹配首尾空白字符：^\s*|\s*$"></a>匹配首尾空白字符：<code>^\s*|\s*$</code></h5><h5 id="匹配Email地址：-w-w-w-w-w-w"><a href="#匹配Email地址：-w-w-w-w-w-w" class="headerlink" title="匹配Email地址：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*"></a>匹配Email地址：<code>\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</code></h5><h5 id="匹配网址URL：-a-zA-z-s"><a href="#匹配网址URL：-a-zA-z-s" class="headerlink" title="匹配网址URL：[a-zA-z]+://[^\s]*"></a>匹配网址URL：<code>[a-zA-z]+://[^\s]*</code></h5><h5 id="匹配国内电话号码：-d-3-d-8-d-4-d-7"><a href="#匹配国内电话号码：-d-3-d-8-d-4-d-7" class="headerlink" title="匹配国内电话号码：\d{3}-\d{8}|\d{4}-\d{7}"></a>匹配国内电话号码：<code>\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</code></h5><h5 id="匹配国内手机号码：-13-0-9-14-0-9-15-0-9-17-0-9-18-0-9-d-8"><a href="#匹配国内手机号码：-13-0-9-14-0-9-15-0-9-17-0-9-18-0-9-d-8" class="headerlink" title="匹配国内手机号码：^(13[0-9]|14[0-9]|15[0-9]|17[0-9]|18[0-9])\d{8}$"></a>匹配国内手机号码：<code>^(13[0-9]|14[0-9]|15[0-9]|17[0-9]|18[0-9])\d&#123;8&#125;$</code></h5><h5 id="匹配中国邮政编码：-1-9-d-5-d"><a href="#匹配中国邮政编码：-1-9-d-5-d" class="headerlink" title="匹配中国邮政编码：[1-9]\d{5}(?!\d)"></a>匹配中国邮政编码：<code>[1-9]\d&#123;5&#125;(?!\d)</code></h5><h5 id="匹配身份证：-d-15-d-18"><a href="#匹配身份证：-d-15-d-18" class="headerlink" title="匹配身份证：^\d{15}|\d{18}$"></a>匹配身份证：<code>^\d&#123;15&#125;|\d&#123;18&#125;$</code></h5><h5 id="匹配IP地址：-25-0-5-2-0-4-d-01-d-d-3-25-0-5-2-0-4-d-01-d-d"><a href="#匹配IP地址：-25-0-5-2-0-4-d-01-d-d-3-25-0-5-2-0-4-d-01-d-d" class="headerlink" title="匹配IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))"></a>匹配IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></h5><h4 id="引用ITeye文章"><a href="#引用ITeye文章" class="headerlink" title="引用ITeye文章"></a>引用<a href="http://lives.iteye.com/blog/1397939">ITeye文章</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">验证数字：^[<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">验证n位的数字：^\d&#123;n&#125;$</span><br><span class="line">验证至少n位数字：^\d&#123;n,&#125;$</span><br><span class="line">验证m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">验证零和非零开头的数字：^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line">验证有两位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line">验证有<span class="number">1</span>-<span class="number">3</span>位小数的正实数：^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br><span class="line">验证非零的正整数：^\+?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">验证非零的负整数：^\-[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line">验证非负整数（正整数 + <span class="number">0</span>） ^\d+$</span><br><span class="line">验证非正整数（负整数 + <span class="number">0</span>） ^((-\d+)|(<span class="number">0</span>+))$</span><br><span class="line">验证长度为<span class="number">3</span>的字符：^.&#123;<span class="number">3</span>&#125;$</span><br><span class="line">验证由<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line">验证由<span class="number">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line">验证由<span class="number">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line">验证由数字和<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z0-<span class="number">9</span>]+$</span><br><span class="line">验证由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：^\w+$</span><br><span class="line">验证用户密码:^[a-zA-Z]\w&#123;<span class="number">5</span>,<span class="number">17</span>&#125;$ 正确格式为：以字母开头，长度在<span class="number">6</span>-<span class="number">18</span>之间，只能包含字符、数字和下划线。</span><br><span class="line">验证是否含有 ^%&amp;<span class="string">&#x27;,;=?$\&quot; 等字符：[^%&amp;&#x27;</span>,;=?$\x22]+</span><br><span class="line">验证汉字：^[\u4e00-\u9fa5],&#123;<span class="number">0</span>,&#125;$</span><br><span class="line">验证Email地址：^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">验证InternetURL：^http:<span class="comment">//([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$ ；^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$</span></span><br><span class="line">验证电话号码：^(\(\d&#123;<span class="number">3</span>,<span class="number">4</span>&#125;\)|\d&#123;<span class="number">3</span>,<span class="number">4</span>&#125;-)?\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;$：--正确格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。</span><br><span class="line">验证身份证号（<span class="number">15</span>位或<span class="number">18</span>位数字）：^\d&#123;<span class="number">15</span>&#125;|\d&#123;&#125;<span class="number">18</span>$</span><br><span class="line">验证一年的<span class="number">12</span>个月：^(<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])$ 正确格式为：“<span class="number">01</span>”-“<span class="number">09</span>”和“<span class="number">1</span>”“<span class="number">12</span>”</span><br><span class="line">验证一个月的<span class="number">31</span>天：^((<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>])|((<span class="number">1</span>|<span class="number">2</span>)[<span class="number">0</span>-<span class="number">9</span>])|<span class="number">30</span>|<span class="number">31</span>)$ 正确格式为：<span class="number">01</span>、<span class="number">09</span>和<span class="number">1</span>、<span class="number">31</span>。</span><br><span class="line">整数：^-?\d+$</span><br><span class="line">非负浮点数（正浮点数 + <span class="number">0</span>）：^\d+(\.\d+)?$</span><br><span class="line">正浮点数 ^(([<span class="number">0</span>-<span class="number">9</span>]+\.[<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)|([<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*\.[<span class="number">0</span>-<span class="number">9</span>]+)|([<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*))$</span><br><span class="line">非正浮点数（负浮点数 + <span class="number">0</span>） ^((-\d+(\.\d+)?)|(<span class="number">0</span>+(\<span class="number">.0</span>+)?))$</span><br><span class="line">负浮点数 ^(-(([<span class="number">0</span>-<span class="number">9</span>]+\.[<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)|([<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*\.[<span class="number">0</span>-<span class="number">9</span>]+)|([<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)))$</span><br><span class="line">浮点数 ^(-?\d+)(\.\d+)?$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常用操作指南</title>
      <link href="/2017/04/mysql-operations-guide/"/>
      <url>/2017/04/mysql-operations-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql常用操作指南"><a href="#mysql常用操作指南" class="headerlink" title="mysql常用操作指南"></a>mysql常用操作指南</h1><blockquote><p>集合一些常用的mysql操作，覆盖增删改查。</p></blockquote><h2 id="数据库-amp-表"><a href="#数据库-amp-表" class="headerlink" title="数据库&amp;表"></a>数据库&amp;表</h2><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h5><p><code>show database;</code></p><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><p><code>create database test;</code></p><h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><p><code>use test;</code></p><h5 id="查看当前数据库所有表"><a href="#查看当前数据库所有表" class="headerlink" title="查看当前数据库所有表"></a>查看当前数据库所有表</h5><p><code>show tables;</code></p><h5 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h5><p><code>create table person(id int, name varchar(20), sex char(1), birth date);</code></p><h5 id="获取数据表结构"><a href="#获取数据表结构" class="headerlink" title="获取数据表结构"></a>获取数据表结构</h5><p><code>desc person;</code></p><h5 id="查询表中的数据"><a href="#查询表中的数据" class="headerlink" title="查询表中的数据"></a>查询表中的数据</h5><p><code>select * from person;</code></p><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><p><code>insert into person(id,name,sex,birth) values(1,&#39;test&#39;,&#39;1&#39;,&#39;1990-01-08&#39;);</code></p><h5 id="更新表中的数据"><a href="#更新表中的数据" class="headerlink" title="更新表中的数据"></a>更新表中的数据</h5><p><code>update person set name=&#39;test1&#39;, sex=1, birth=1990-01-01 where id=1;</code></p><h5 id="删除表中的数据"><a href="#删除表中的数据" class="headerlink" title="删除表中的数据"></a>删除表中的数据</h5><p><code>delete from person where id=1;</code></p><h5 id="删除表中的全部数据"><a href="#删除表中的全部数据" class="headerlink" title="删除表中的全部数据"></a>删除表中的全部数据</h5><p><code>delete from person; </code></p><h5 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h5><p><code>alter table person rename person_test;</code></p><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><p><code>drop table person_test;</code></p><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><p><code>drop database test;</code></p><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><h5 id="新增主键"><a href="#新增主键" class="headerlink" title="新增主键"></a>新增主键</h5><p><code>alter table person_test add primary key(id); </code></p><h5 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h5><p><code>alter table person_test drop primary key; </code></p><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><h5 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h5><p><code>alter table person add(address varchar(50));</code> </p><h5 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h5><p><code>alter table person CHANGE address newAddress varchar(50);</code></p><h5 id="修改字段类型"><a href="#修改字段类型" class="headerlink" title="修改字段类型"></a>修改字段类型</h5><p><code>alter table person modify newAddress varchar(50);</code></p><h5 id="更新字段内容"><a href="#更新字段内容" class="headerlink" title="更新字段内容"></a>更新字段内容</h5><p><code>update person set name=&#39;test1&#39; where id=1;</code></p><h5 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h5><p><code>alter table person drop column id;</code></p><h5 id="新增id为自增主键"><a href="#新增id为自增主键" class="headerlink" title="新增id为自增主键"></a>新增id为自增主键</h5><p><code>alter table card add id int auto_increment primary key;</code></p><h5 id="修改id为自增主键"><a href="#修改id为自增主键" class="headerlink" title="修改id为自增主键"></a>修改id为自增主键</h5><p><code>alter table card modify id int auto_increment primary key;</code></p><h5 id="自增id从1开始"><a href="#自增id从1开始" class="headerlink" title="自增id从1开始"></a>自增id从1开始</h5><p><code>TRUNCATE TABLE card</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于魏则西事件，我来谈谈百度</title>
      <link href="/2017/04/i-think-baidu/"/>
      <url>/2017/04/i-think-baidu/</url>
      
        <content type="html"><![CDATA[<h1 id="关于魏则西事件，我来谈谈百度"><a href="#关于魏则西事件，我来谈谈百度" class="headerlink" title="关于魏则西事件，我来谈谈百度"></a>关于魏则西事件，我来谈谈百度</h1><blockquote><p>个人工作经历对百度带有感情，但本文会尽量客观的态度来讲讲我认识的百度。</p></blockquote><p>&emsp;&emsp;这两天微博，微信，知乎上疯狂转载的魏则西在知乎提问《你认为人性最大的“恶”是什么？》。大好青年魏则西在问描述中写道自己患有一种恶性肿瘤－滑膜肉瘤，在百度搜索疾病信息，第一条结果是武警北京总队第二医院所谓的“生物免疫疗法”，后来魏则西通过知友得知这种所谓的“最新技术”在美国因为临床阶段效率太低就被淘汰了，而在国内却成为了骗子没挣钱的法宝。  </p><p>&emsp;&emsp;2016年4月12日，魏则西去世了，针对他的死，无数网友开始质疑百度，并迅速发酵。昨天，也就是2015年5月2日，DoNews消息称国信办已经成立调查组进驻百度。这次事件几乎所有的大V，网友一致对准百度之恶－医疗广告。前不久百度卖血友吧的余波还没过去，百度的医疗广告作恶再次被推到封口浪尖。从28号到今天，看了无数的大V文章，篇篇直指百度的恶，这里不能链接，有兴趣可以自行搜索一下：</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODIyMTE0MA==&mid=2650968235&idx=1&sn=6c99a7f680af5679215ae09351bf9f1d&scene=0&uin=MzEwMDgyNjM1&key=b28b03434249256b70fcc7b5ab6e422a86509b4d1cfbc4cec50b04fa1664e2320c84ad649796f135b2c674007be4111e">小道消息(WebNotes)－《青年魏则西之死》</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MDMwOTcwMg==&mid=2650004538&idx=1&sn=34f7cdd4df7a3d4de6b824fb7a16142a&scene=0&uin=MzEwMDgyNjM1&key=b28b03434249256b6585311d4bcf43aa5d3031b0c6cfd6f1896576b8e09a7a65264b1f98d1e1af4fdb3edcbafc5a6a0d">余晟以为(yurii-says)－《再谈百度》</a></li></ul><p>&emsp;&emsp;百度的恶大家都看到了，但是他为什么恶呢？很多大V的第一反应是为了钱，这个我不反对，我还可以更深层次的发掘下百度的恶：<br><img src="/static/img/i-think-baidu/1.jpg" alt="百度股票指数"></p><p>&emsp;&emsp;百度05年在美国纳斯达克，上市之后百度的盈利一直靠搜索竞价排名盈利，那时候的百度没有凤巢，竞价是公开的，正如拍卖一样，好的关键词价高者得。那是的中国互联网刚起步，并没有现在这么发达，能出的起高价钱买关键词的只有被称为“黑五类”电视广告商（就是以前大家经常看到的电视广告）。06-07这一年间百度靠”黑五类“的竞价收入几乎完成了逆袭式的增长。</p><p>&emsp;&emsp;但是好景不长，百度推出的是明码竞价方式，”黑五类”为了取得好的关键词往往把价钱抬的特别高。这种恶意竞争虽然最终把大部分利润都给了百度，但是最终能玩的起的只有一些财大气粗的大玩家，小玩家基本退出了，从而导致百度营收开始停泄不前。07－08年百度股票大跌也是因为这个。</p><p>&emsp;&emsp;09年百度推出凤巢最重改变竞价方式（有人说凤巢是抄袭google竞价排名系统，但我还没找到确切证据可以证明），百度又开始依靠这种不透明竞价方式实现的了3年的快速增长。最终有人的地方就有江湖，百度这种灰色配置，最终在12年形成了七家比较大的竞价平台，到此时百度推广的灰色产业链也正式形成了。</p><p>&emsp;&emsp;百度的主要营收都是靠”黑五类“这些见不得光的灰色产业链，最为严重的是这些灰色产业几乎占到百度营收的一半。这意味着一但百度没有新的增长点，砍掉这这些灰色产业链，百度有可能破产。</p><p>&emsp;&emsp;我相信人是本善的，百度也不是没有考虑过清理这些灰色产业链，但是转型对于百度来说压力真的比较大。百度在纳斯达克上市，它要面对的不止是转型的压力，还有华尔街那群贪婪的资本家。</p><p>&emsp;&emsp;华尔街那群贪婪并短视的资本家们可不会关心百度的长期发展，他们只关心百度如何能带来利润。AT&amp;T的前车之柬还历历在目，当初一个巨无霸的百年企业，在被拆分后接受了华尔街的压榨，最终转型乏力，能变卖的都卖掉了（浪潮之巅－帝国的余辉AT&amp;T）。</p><p>&emsp;&emsp;实际上百度也有做过转型的努力，13年之后也开始发力移动端，虽然是为了打击大玩家联盟垄断关键词。15年的时候突然发力O2O，并砸出200亿，可能是受到阿里上市的刺激。</p><p>&emsp;&emsp;但是百度的努力多数还是以失败告终，根本原因还是缺乏竞争，创新乏力，以下引用曹大大观点：<br><img src="/static/img/i-think-baidu/2.jpg" alt="曹大观点"></p><p>&emsp;&emsp;百度的是很努力的，而且很有实力，依靠着北京这个最大的人才市场，百度俨然成为bat里公认技术最好的公司。但是在没有外来竞争者之后，百度已经在垄断的温床沉睡太久了，久到自己都不愿意把自己叫醒，这次事件我希望能唤醒百度。</p><p>&emsp;&emsp;这次信任危机的出现对百度来说可能是：塞翁失马，焉知非福。如果这次危机能让它真正转型，百度就有可能成为一个更加优秀的企业。</p><h3 id="引用文章："><a href="#引用文章：" class="headerlink" title="引用文章："></a>引用文章：</h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODIyMTE0MA==&mid=2650968235&idx=1&sn=6c99a7f680af5679215ae09351bf9f1d&scene=0&uin=MzEwMDgyNjM1&key=b28b03434249256b70fcc7b5ab6e422a86509b4d1cfbc4cec50b04fa1664e2320c84ad649796f135b2c674007be4111e">青年魏则西之死－小道消息</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODIyMTE0MA==&mid=2650968237&idx=1&sn=9fbcd3ee206a6561e5514edb4dc84119&scene=0&uin=MzEwMDgyNjM1&key=b28b03434249256b9139301d5044b5877473f5cc7a8b001a392eb1593675c822db2df7b7e30855c17083a7b8c0ea8142">虚假医疗广告面前，你我终将无法独善其身－小道消息</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MDMwOTcwMg==&mid=2650004538&idx=1&sn=34f7cdd4df7a3d4de6b824fb7a16142a&scene=0&uin=MzEwMDgyNjM1&key=b28b03434249256b6585311d4bcf43aa5d3031b0c6cfd6f1896576b8e09a7a65264b1f98d1e1af4fdb3edcbafc5a6a0d">再谈百度－余晟以为</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&mid=2649866794&idx=1&sn=cb820dc87ae4e4c3df8bce5fe66bcd11&scene=21&uin=MzEwMDgyNjM1&key=b28b03434249256b0abe72828f6f58d2b9016e9f3150f36362de79668545e2bc99597959bcc057b600be4b78f2b29f29">傲慢与偏见之 - 谷歌中国逆袭史－caoz的梦呓</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一次马拉松</title>
      <link href="/2017/04/first-marathon/"/>
      <url>/2017/04/first-marathon/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一次马拉松"><a href="#我的第一次马拉松" class="headerlink" title="我的第一次马拉松"></a>我的第一次马拉松</h1><blockquote><p>跑马拉松不止有pb，还有快乐！</p></blockquote><p>&emsp;&emsp;2016年5月1日，我参加了秦皇岛国际马拉松，以下简称秦马。人生第一次马拉松，也是第一次全马，这是一个很值得纪念的事我觉得必须写点什么！</p><p>&emsp;&emsp;关于秦马，一个caa银牌赛事，中国田径协会共同举办，还是全国马拉松锦标赛第二场，名头上已经很大。这次赛道是沿着海滨，全程经过很多著名景区，跑者算事大饱眼福了。秦皇岛的市民非常的热情，沿途不断有市民和跑者相互击掌打气，还有市民自发的为运动员提供临时补给，此时应该为秦皇岛市民点个赞。赛事组织方也是很给力，寄包取包井然有序；起跑检录的时候稍微有点拥挤，但毕竟人多，可以谅解；全程补给相当给力，我是全程跟400兔子，一路补给充足。秦马从整体上讲体验非常不错，下年还会参加！</p><p>&emsp;&emsp;这次秦马我是按照超男姐建议全程跟400兔子跑，36公里之前我按照大脚婶的补给方法10、20、30吃盐丸，15、25、35吃能量胶，全程配速均匀，体力充沛。但是真正的马拉松是35之后才开始的，</p><p>&emsp;&emsp;在跑过35之后我感觉大腿有明显抽筋的迹象，幸好有一旁的兔子大哥帮助，给了我一粒盐丸，并带我跑完全程。</p><p>&emsp;&emsp;需要说一下，跑马拉松很危险，尤其是全程，35公里之后由于体能下降，出汗严重，很多人都抽筋了，那是非常痛苦的，有的几乎不能走路。在最后7公里兔子大哥拿着一瓶医用喷雾在跑，我拿着一瓶水在跑，我们一块帮助了很多受伤的选手，并鼓励他们坚持到完赛，这也是我首马最大的收获。</p><p>&emsp;&emsp;但是马拉松的危险还是必须注意，在36公里的时候我们就看到一个人倒在地上抽搐，医护人员在掐他人中。经验丰富的兔子大哥说，这人不及时送医院可能会猝死。完赛后一位50岁的老人也躺地上了，但是他的情况稍微好一点，医护人员说是体力不支，有点虚脱而已。这些都是真实发生的事，所以如果你有跑马拉松的准备，一定要科学训练，注意补给，最好是找个有经验的跑者带你。</p><p>&emsp;&emsp;这次秦马最大收获是跟兔子大哥一块帮助了那么多人，看着他们感激的神情，在我们鼓励后迈着腿继续向终点进发，我当时的心情比我全马完赛还要爽。跑马拉松不止有pb，还有快乐！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 马拉松 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马拉松 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>货币战争：相当不错的金融普及读本</title>
      <link href="/2017/04/currency-war/"/>
      <url>/2017/04/currency-war/</url>
      
        <content type="html"><![CDATA[<h1 id="货币战争：相当不错的金融普及读本"><a href="#货币战争：相当不错的金融普及读本" class="headerlink" title="货币战争：相当不错的金融普及读本"></a>货币战争：相当不错的金融普及读本</h1><blockquote><p>刚开始就像讲故事一样，到后面几章，讲金本位和信贷危机的时候就觉得挺有道理，最后还预测到了08年经济危机！挺不错的一本书，能够学到挺多的金融知识。</p></blockquote><p><img src="/static/img/currency-war/currency-war.jpg" alt="currency-war"></p><p>&emsp;&emsp;从高中的时候零星的看到过罗斯柴尔德家族的故事，那个时候基本上看的书都是些网络小说，每本出现‘罗斯柴尔德’的小说里都表示它是世界上最富裕的家族，但很少有介绍罗斯柴尔德家族的辉煌历史的；</p><p>&emsp;&emsp;当我看到货币战争第一章的时候就被深深的吸引了。这本书第一章详细的介绍了罗斯柴尔德这个家族，从一开始的梅耶.罗斯柴尔德（原名：梅耶.A.鲍尔）靠结实威廉王子成为宫廷代理人，挣到人生第一桶金后，让自己的五个儿子像利剑一样射向欧洲的五个地区。后来老三内森靠英法战争押注威灵顿，最终在滑铁卢战争中，利用信息不对称赢得了英国金融城的统治地位；</p><p>&emsp;&emsp;另外几个儿子，老大拉姆斯洛称为了德国财政部长，罗斯柴尔德银行成为了德国金融中心；老二所罗门利用梅特涅把控了奥地利的财政；老四卡尔成为了意大利的财政支柱；老五詹姆斯完全控制了法国的金融，在法国只有国王的财富比他高；自此罗斯柴尔德家族控制了半个欧洲。</p><p>&emsp;&emsp;紧接着的第2-6章感觉就像讲故事一样，19－20世纪的每次战争都归结于银行家的贪婪；罗斯柴尔德家族还扶持了摩根和洛克菲勒等美国等金融大鳄，并最终控制了美国货币发行权。一战和二战中罗斯柴尔德扶持的银行家们最终获利颇丰，用美元统治了世界。这里我个人以为是有夸张的成分在内，尤其是第五章，罗斯福是银行家傀儡、希特勒是银行家的候选人用来发动二战、华尔街资助纳粹都有点太夸张了。</p><p>&emsp;&emsp;我讲到这里你是不是以为这本书就是在讲故事，如果没接着往下看我也是这么认为的。本书最精彩纷呈的全在后面一部分。</p><p>&emsp;&emsp;诚实货币的最后抗争一章中以肯尼迪11110号令利用白银劵摆脱向美联储”借钱“的荒谬政策失败开始，里根要求成立“黄金委员会”失败而结束，两位总统都为此献出了生命；诚实货币是什么呢？在美联储成立之前，世界的货币是和黄金挂钩的，黄金的多少直接决定了市场的货币的发行，这就叫做诚实货币。但是银行家是贪婪的，他们不能接受如此缓慢的挣钱方式，他们发明了一个非常高明的挣钱方式。货币的发行不再以黄金做挂钩，而是和国债绑定。这样货币增发就相当于美国欠了美联储一笔钱，而国债是要支付利息的，这些利息理所当然便落入银行家手里。慢慢的美联储就成为了美国最大的债权人，美国的个人所得税也就是在缴纳国贷的利息！这也就是美国民主自由下隐藏的污垢吧！</p><p>&emsp;&emsp;接着还有中东石油美元回流、世界环保银行圈掉全球30％的土地，世界新生经济体被控解体、日本经济衰退、组织欧元区的夸大、亚洲货币绞杀站等一系列货币战争案例，个个精彩纷呈。</p><p>&emsp;&emsp;本书的后几章还提到了通货膨胀的本质就是信贷资金的不断加大。银行每贷出的一笔款钱都是要在市场上流通的。比如你买房子贷款50万，购房款是银行预先给开发商的。这笔钱支付后，不同于借贷，银行会在整个国家的货币流通中增印这部分贷款50万。想象下你还是像以前一样勤勤肯肯的工作，创造的价值和工资都没变，但是市场上平白多了五十万，整个社会的物价就回被带动50万。这也就是同伙膨胀的本质，10年来物价的飞涨和房地产是有很大关联的。</p><p>&emsp;&emsp;这本书的后记中作者给中国的金融开放提了很多建议，分析了债务资产证券化流通过剩产生的问题，并预测了08年会因为这些不良信贷发生次贷危机。</p><p>&emsp;&emsp;总结本书前半部分可以当作故事来读，后半部分可以当成金融知识来读，总的来说这事一本相当不错的金融普及读本。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 货币战争 </tag>
            
            <tag> 金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下apt-get安装nodejs</title>
      <link href="/2017/04/ubuntu-apt-get-install-nodejs/"/>
      <url>/2017/04/ubuntu-apt-get-install-nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu下apt-get安装nodejs"><a href="#ubuntu下apt-get安装nodejs" class="headerlink" title="ubuntu下apt-get安装nodejs"></a>ubuntu下apt-get安装nodejs</h1><blockquote><p>最近在阿里云服务器上安装<code>nodejs</code>，自己编译挺麻烦的，决定用<code>apt-get</code></p></blockquote><h2 id="直接执行apt-get-install-nodejs遇到了问题，具体看下面命令："><a href="#直接执行apt-get-install-nodejs遇到了问题，具体看下面命令：" class="headerlink" title="直接执行apt-get install nodejs遇到了问题，具体看下面命令："></a>直接执行<code>apt-get install nodejs</code>遇到了问题，具体看下面命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nodejs &amp;&amp; node -v</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following extra packages will be installed:</span><br><span class="line">  libc-ares2 libv8-3.14.5</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  libc-ares2 libv8-3.14.5 nodejs</span><br><span class="line">0 upgraded, 3 newly installed, 0 to remove and 186 not upgraded.</span><br><span class="line">Need to get 1,912 kB of archives.</span><br><span class="line">After this operation, 7,538 kB of additional disk space will be used.</span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n] y</span><br><span class="line">Get:1 http://mirrors.aliyun.com/ubuntu/ trusty/main libc-ares2 amd64 1.10.0-2 [38.5 kB]</span><br><span class="line">Get:2 http://mirrors.aliyun.com/ubuntu/ trusty/universe libv8-3.14.5 amd64 3.14.5.8-5ubuntu2 [1,189 kB]</span><br><span class="line">Get:3 http://mirrors.aliyun.com/ubuntu/ trusty/universe nodejs amd64 0.10.25~dfsg2-2ubuntu1 [684 kB]</span><br><span class="line">Fetched 1,912 kB <span class="keyword">in</span> 1s (1,269 kB/s)</span><br><span class="line">Selecting previously unselected package libc-ares2:amd64.</span><br><span class="line">(Reading database ... 75222 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../libc-ares2_1.10.0-2_amd64.deb ...</span><br><span class="line">Unpacking libc-ares2:amd64 (1.10.0-2) ...</span><br><span class="line">Selecting previously unselected package libv8-3.14.5.</span><br><span class="line">Preparing to unpack .../libv8-3.14.5_3.14.5.8-5ubuntu2_amd64.deb ...</span><br><span class="line">Unpacking libv8-3.14.5 (3.14.5.8-5ubuntu2) ...</span><br><span class="line">Selecting previously unselected package nodejs.</span><br><span class="line">Preparing to unpack .../nodejs_0.10.25~dfsg2-2ubuntu1_amd64.deb ...</span><br><span class="line">Unpacking nodejs (0.10.25~dfsg2-2ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.6.7.1-1ubuntu1) ...</span><br><span class="line">Setting up libc-ares2:amd64 (1.10.0-2) ...</span><br><span class="line">Setting up libv8-3.14.5 (3.14.5.8-5ubuntu2) ...</span><br><span class="line">Setting up nodejs (0.10.25~dfsg2-2ubuntu1) ...</span><br><span class="line">update-alternatives: using /usr/bin/nodejs to provide /usr/bin/js (js) <span class="keyword">in</span> auto mode</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.19-0ubuntu6.6) ...</span><br><span class="line">The program <span class="string">&#x27;node&#x27;</span> can be found <span class="keyword">in</span> the following packages:</span><br><span class="line"> * node</span><br><span class="line"> * nodejs-legacy</span><br><span class="line">Try: apt-get install &lt;selected package&gt;</span><br></pre></td></tr></table></figure><p>Google了一下是因为<code>ubuntu</code>默认的<code>apt-get</code>源<code>nodejs</code>版本是<code>0.10.25</code>。  </p><h2 id="查看apt-get源方法是："><a href="#查看apt-get源方法是：" class="headerlink" title="查看apt-get源方法是："></a>查看<code>apt-get</code>源方法是：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apt-cache show nodejs</span><br><span class="line">Package: nodejs</span><br><span class="line">Priority: extra</span><br><span class="line">Section: universe/web</span><br><span class="line">Installed-Size: 3043</span><br><span class="line">Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt;</span><br><span class="line">Original-Maintainer: Debian Javascript Maintainers &lt;pkg-javascript-devel@lists.alioth.debian.org&gt;</span><br><span class="line">Architecture: amd64</span><br><span class="line">Version: 0.10.25~dfsg2-2ubuntu1</span><br><span class="line">Depends: libc-ares2 (&gt;= 1.8.0), libc6 (&gt;= 2.14), libssl1.0.0 (&gt;= 1.0.1), libstdc++6 (&gt;= 4.1.1), libv8-3.14.5, zlib1g (&gt;= 1:1.1.4)</span><br><span class="line">Filename: pool/universe/n/nodejs/nodejs_0.10.25~dfsg2-2ubuntu1_amd64.deb</span><br><span class="line">Size: 683742</span><br><span class="line">MD5sum: 8d3cdf0c2277eb19f8a8666a54eeeed8</span><br><span class="line">SHA1: b3c1f91229f2689141cc6d1a9a30dd355a444310</span><br><span class="line">SHA256: f2a3aa1f11fcc5e37d50d9ec0e1eb7e255105b79dcb268a9fd8624f5ddead15a</span><br><span class="line">Description-en: evented I/O <span class="keyword">for</span> V8 javascript</span><br><span class="line"> Node.js is a platform built on Chrome<span class="string">&#x27;s JavaScript runtime for easily</span></span><br><span class="line"><span class="string"> building fast, scalable network applications. Node.js uses an</span></span><br><span class="line"><span class="string"> event-driven, non-blocking I/O model that makes it lightweight and</span></span><br><span class="line"><span class="string"> efficient, perfect for data-intensive real-time applications that run</span></span><br><span class="line"><span class="string"> across distributed devices.</span></span><br><span class="line"><span class="string"> .</span></span><br><span class="line"><span class="string"> Node.js is bundled with several useful libraries to handle server</span></span><br><span class="line"><span class="string"> tasks:</span></span><br><span class="line"><span class="string"> .</span></span><br><span class="line"><span class="string"> System, Events, Standard I/O, Modules, Timers, Child Processes, POSIX,</span></span><br><span class="line"><span class="string"> HTTP, Multipart Parsing, TCP, DNS, Assert, Path, URL, Query Strings.</span></span><br><span class="line"><span class="string">Description-md5: e507fb472d7cdaceffc5b285a62d5c1b</span></span><br><span class="line"><span class="string">Homepage: http://nodejs.org/</span></span><br><span class="line"><span class="string">Bugs: https://bugs.launchpad.net/ubuntu/+filebug</span></span><br><span class="line"><span class="string">Origin: Ubuntu</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="更新apt-get源的方法有好多，这里推荐nodejs官方的源：nodesource-distributions"><a href="#更新apt-get源的方法有好多，这里推荐nodejs官方的源：nodesource-distributions" class="headerlink" title="更新apt-get源的方法有好多，这里推荐nodejs官方的源：nodesource/distributions"></a>更新<code>apt-get</code>源的方法有好多，这里推荐<code>nodejs</code>官方的源：<a href="https://github.com/nodesource/distributions">nodesource/distributions</a></h3><h2 id="介绍一下用法："><a href="#介绍一下用法：" class="headerlink" title="介绍一下用法："></a>介绍一下用法：</h2><p>1、添加一个NodeSource签名密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --silent https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>2、在apt下增加一个<code>nodesource.list</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/sources.list.d/ &amp;&amp; vim nodesource.list</span><br></pre></td></tr></table></figure><p>3、编辑<code>nodesource.list</code>文件</p><p>加入以下两行代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb https://deb.nodesource.com/node_4.x trusty main</span><br><span class="line">deb-src https://deb.nodesource.com/node_4.x trusty main</span><br></pre></td></tr></table></figure><p><code>node_4.x</code>是版本号，可以指定安装版本。</p><p>4、更新<code>apt-get</code>源&amp;&amp;安装<code>nodejs</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> apt-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回首一下2016</title>
      <link href="/2017/01/look-back-at-2106/"/>
      <url>/2017/01/look-back-at-2106/</url>
      
        <content type="html"><![CDATA[<h1 id="回首一下2016"><a href="#回首一下2016" class="headerlink" title="回首一下2016"></a>回首一下2016</h1><blockquote><p>2016也是我的本命年，没有经历什么本命年的劫数，收获了很多，最大的收获当属跑出来的爱情，我们以跑步相识，因北马结情。</p></blockquote><p><img src="/static/img/look-back-at-2016/001.jpg" alt="图图北马照片"></p><h2 id="关于家人"><a href="#关于家人" class="headerlink" title="关于家人"></a>关于家人</h2><p>4月份姥姥去世，我真的很伤心。小时候父母做生意很忙，我和弟弟有一半的时间在和我姥姥一起生活的，血浓于水的感情真的铭记在心。姥姥走的挺平和，我的心也随着年龄的长大，已经渐渐开始慢慢适应亲人的离去。失去的回不来，所以一定要用力抓住现有的。<br>8月份弟弟失足从三楼摔下，高位截瘫，万幸的是他还年轻，动完手术之后恢复很快。这件事也让我感受到，我还是太幼稚，我的父亲他还是这个家的主心骨。还有那些亲戚们，血浓于水的亲情，总是在关键时刻才能展现，感谢你们。<br>经历这么多，我和父母也都更加乐观啦，苦难已经到这样，以后的生活怎么也会比这甜。</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>今年大目标完成，买了房。紧接着装修、买家具，总之时间精力耗进去很多，也欠了一屁股债。但是这种人生的转变还是很大的。<br>房子住进去之后，时间开始变得紧促啦，每天要在路上浪费2小时，早上挤得站都站不住，很少有时间看书学习。距离远了半个小时，做什么都要提前出门。到目前为止还没适应这种感觉。<br>16年给自己定了看54本书的目标，很遗憾没有完成，今年看的书大概是二十本多的样子，不得不感谢微信读书，不是这个应用，我还真不能合理利用我的碎片时间。今年也写了几篇文章，关于技术的文章多点，关于读书和生活的也有几篇，17年准备多写几篇文章。</p><h2 id="关于工作和技术"><a href="#关于工作和技术" class="headerlink" title="关于工作和技术"></a>关于工作和技术</h2><p>今年公司业务发展不错，B论融资也快到位啦，一切都在向好的方向发展。今年做新项目接触了很多不同的东西。用angular2、typescript、ionic2写了个app，app的打包配置也算是能玩溜啦，但是写oc和java代码还真有点力不从心；开发了一个node+mongoDB的后台服务系统。期间也了解了下webpack、react、vue这些框架和工具。今年进步最大的当属是git了，为了方便项目管理，看了很多git的文章。最坑的当属苹果升级ios10之后，原来的pptp不能用啦，自己又搞了个IPSec的vpn，还是用的亚马逊ec2。<br>总结下今年，技术进步还是有的，但是基础还是不扎实，下半年也有些浮躁，对于技术的学习开始动力不足，几乎没什么实质进步，对此在这里深刻反思，下年一定要加大基础学习，尤其是变编程思想上的。</p><h2 id="关于旅行"><a href="#关于旅行" class="headerlink" title="关于旅行"></a>关于旅行</h2><p>16年跑马松去了3个城市，分别是秦皇岛、天津、兰州；秦皇岛自己一人去的，跑首马累的半死，就直接回来啦，只去了一趟海滩，收获不是很多；天津武清是和飘团长组团去的，因为前天下雨，没怎么玩耍，倒是第二天天气不错，小PB了一下；<br>兰州正好赶在端午，带我弟弟一块去的，不得不说这个黄河边的城市给我的印象极好，悠闲，舒适，空气堪称完美。在黄河边跑马拉松的体验简直不能再棒了。<br>和女朋友去了次天津和上海，这两次算是比较悠闲的旅行吧。去天津玩给我俩的印象还是不错的，尤其是那天晚上在滨河边走着聊着天，瞬间就拉近俩人的感情啦。去上海完全是因为冲动啦。那几天工作压力大，她也想去趟迪士尼，于是我们就来了个说走就走的旅行。上海是我第二次去，总体体验还是很棒，去迪士尼的时候中间也有小插曲，我们也都共同面对过去啦。这里安利一下迪士尼，能让你找到未泯灭的童心，不过一定提前做好攻略。最幸福的是我们还一起去了交通大学跑了个步，哈哈，我们真的是跑出来的爱情。下年目标准备带她去跑更多的城市。</p><h3 id="16年也成长让我认识到17年的责任也不一样，所以17年：努力，去抓住幸福！"><a href="#16年也成长让我认识到17年的责任也不一样，所以17年：努力，去抓住幸福！" class="headerlink" title="16年也成长让我认识到17年的责任也不一样，所以17年：努力，去抓住幸福！"></a>16年也成长让我认识到17年的责任也不一样，所以17年：<code>努力，去抓住幸福！</code></h3>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016年中总结</title>
      <link href="/2016/07/mid-year-summary-2016/"/>
      <url>/2016/07/mid-year-summary-2016/</url>
      
        <content type="html"><![CDATA[<h1 id="2016年中总结"><a href="#2016年中总结" class="headerlink" title="2016年中总结"></a>2016年中总结</h1><blockquote><p>2016年6月12号，16年过半的第12天，跑完兰马第一天，总结下上半年生活，调整下半年的计划。</p></blockquote><p><img src="/static/img/mid-year-summary-2016/me.jpg" alt="天津武清马拉松"></p><ul><li><p>今年是我工作的第4年，13年毕业到现在一直朝着一个标准攻城狮在努力。（抱歉，我不自嘲卧室程序猿，因为我喜欢攻城狮这个称谓，它能给我自信）今年努力的结果是我可以在父母帮助下首付在北京买房了，虽然面积不大，但是终于在北京有个家。</p></li><li><p>在北京买房是春节决定的，春节过后我就开始在北京看房，主战场是燕郊，也经历的燕郊房间从均价1.5w到2w的疯狂涨幅。不得不说一线城市房价涨幅真的吓人。由于涨幅过大，北京周边楼盘开始被国家调控，5月份所有楼盘都没开盘。进而我开始转战北京，最终算是找到了一个满意的房子，离地铁近，公交方便，关键是现房。</p></li><li><p>2016年上半年还有一个主题就是马拉松，几乎所有的周末和小长假我都在奔跑。上半年参加了秦皇岛全程马拉松、天津武清半程马拉松、兰州半程马拉松三场比赛。全马最好成绩3:55，半马最好成绩1:40。</p></li><li><p>跑马拉松之后我才知道原来跑步也能上瘾，每次跑马的时候我总是在想：好累，什么时候能完赛。。。但是每次跑完之后我就会想：好爽，下次还要跑，PB。上半年几乎就是这么乐此不疲的奔跑，加了很多跑团，认识了很多热爱跑步的朋友，整个人变得更加自信，生活也变得更加规律。</p></li><li><p>最后主题就是读书了，今年给自己设置了一个目标读54本书，并写出读后感。目前完本的书是8本，写了读后感的是2本。在读即将读完的是2本，状态磕磕绊绊，但是收益很多。</p></li><li><p>年后看的第一本书是用微信阅读看的《中国哲学简史》，说实话我这个学渣，看这本书确实有点吃力，很多地方会感到枯燥无聊，想快速跳过。大概读到一半的时候我换了另一本书《货币战争》，读完并写完读后感之后，我对阅读的信心大增，然后花费了两个星期把《中国哲学简史》重新看完，有些很多地方真心是没读懂，所以也不感写读后感。以后的书除了《明朝的七张面孔》，其他的也没写读后感，主要原因还是懒。</p></li><li><p>读书属于长线收益，短期内可能看不到立竿见影的效果，但是后期潜力巨大，我还是会坚持下去，读后感也会陆续补上，做个有理想的文艺小青年😄</p></li><li><p>今年还有个意外之喜，我的微信订阅人数接近300人，记得去年的年中计划是：微信订阅1000，跑一场马拉松比赛😂 结果是去年一个没完成，今年上半年实现了马拉松，下半年计划就是微信订阅超过1000，下半年努力多写一些关于技术和读书的文章。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将网页变灰的CSS代码</title>
      <link href="/2016/03/css-filter/"/>
      <url>/2016/03/css-filter/</url>
      
        <content type="html"><![CDATA[<h1 id="将网页变灰的CSS代码"><a href="#将网页变灰的CSS代码" class="headerlink" title="将网页变灰的CSS代码"></a>将网页变灰的CSS代码</h1><p>今天无意之中看到了阿烈的<a href="https://www.baidufe.com/item/4eb2e626e62749df88e2.html">css filter</a>文章。</p><blockquote><p>IE中可以直接使用CSS Filter实现，但非IE浏览器，却没有直接的提供类似方法。<br>好在CSS3出现了，可以通过filter:graysacle实现，但是目前仅支持chrome（18 dev+），<br>其他浏览器好像暂时没有支持的打算！<br>不过没关系，在中国，目前IE（6/7/8/9）+ Chrome（18 dev+）基本能覆盖了绝大部分浏览器（包括360、Maxthon、Sougou等）。<br><code>-webkit-filter</code>，严格意义上将，这个都不是CSS3的一部分，充其量算得上chrome浏览器的私有css，</p></blockquote><p>试了下，感觉效果碉堡了！</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=<span class="number">1</span>);</span><br><span class="line">    -webkit-<span class="attribute">filter</span>:<span class="built_in">grayscale</span>(<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="effect可取下列值："><a href="#effect可取下列值：" class="headerlink" title="effect可取下列值："></a>effect可取下列值：</h4><ul><li><code>grayscale</code>           灰度，值为数值，x∈[0,1]  </li><li><code>sepia</code>                  褐色，值为数值，x∈[0,1]  </li><li><code>saturate</code>             饱和度，值为数值，默认是1，可以是小于1的小数，也可以大于1,x∈[0,+∞)  </li><li><code>hue-rotate</code>         色相旋转，值为角度，x∈[0,360]，单位deg  </li><li><code>invert</code>                  反色，值为数值，x∈[0,1]  </li><li><code>opacity</code>               透明度，值为数值，x∈[0,1]  </li><li><code>brightness</code>          亮度，值为数值，默认是1，可以小于1(变暗)，可以大于1(变亮)；  </li><li><code>contrast</code>              对比度，值为数字，默认是1，可以大于1，也可以小于1；  </li><li><code>blur</code>                     模糊，值为length，表示模糊半径，比如filter:blur(2px)  </li><li><code>drop-shadow</code>     阴影，值为shadow()，写法类似css3 box-shadow，比如filter:drop-shadow(0,0,10px,black)  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 变灰 </tag>
            
            <tag> 暗黑主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 编码规范</title>
      <link href="/2016/03/javascript-coding-standards/"/>
      <url>/2016/03/javascript-coding-standards/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-编码规范"><a href="#JavaScript-编码规范" class="headerlink" title="JavaScript 编码规范"></a>JavaScript 编码规范</h1><h3 id="1、变量、方法命名必须匹配正则：-a-zA-Z-w"><a href="#1、变量、方法命名必须匹配正则：-a-zA-Z-w" class="headerlink" title="1、变量、方法命名必须匹配正则：/^[$_a-zA-Z]\w*$/ **"></a>1、变量、方法命名必须匹配正则：/^[$_a-zA-Z]\w*$/ **</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 虽然Javascript引擎支持多种格式命名的变量，</span></span><br><span class="line"><span class="comment"> * 比如下面这样的变量，Javascript引擎依然能正常解析</span></span><br><span class="line"><span class="comment"> * 但是，禁止这样定义！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> \u0041 = <span class="string">&quot;A&quot;</span>;    <span class="comment">//最终会被解析为：var A = &quot;A&quot;;</span></span><br><span class="line"><span class="keyword">var</span> 中国 = <span class="string">&quot;中国&quot;</span>;  <span class="comment">//以中文命名的变量</span></span><br></pre></td></tr></table></figure><h3 id="2、变量命名不能用关键字、保留字"><a href="#2、变量命名不能用关键字、保留字" class="headerlink" title="2、变量命名不能用关键字、保留字"></a>2、变量命名不能用关键字、保留字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Javascript关键字列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;break&quot;</span>,    <span class="string">&quot;case&quot;</span>,         <span class="string">&quot;catch&quot;</span>,    <span class="string">&quot;const&quot;</span>,    <span class="string">&quot;continue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;default&quot;</span>,  <span class="string">&quot;delete&quot;</span>,       <span class="string">&quot;do&quot;</span>,       <span class="string">&quot;else&quot;</span>,     <span class="string">&quot;finally&quot;</span>,</span><br><span class="line">    <span class="string">&quot;for&quot;</span>,      <span class="string">&quot;function&quot;</span>,     <span class="string">&quot;if&quot;</span>,       <span class="string">&quot;in&quot;</span>,       <span class="string">&quot;instanceof&quot;</span>,</span><br><span class="line">    <span class="string">&quot;new&quot;</span>,      <span class="string">&quot;return&quot;</span>,       <span class="string">&quot;switch&quot;</span>,   <span class="string">&quot;throw&quot;</span>,    <span class="string">&quot;try&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typeof&quot;</span>,   <span class="string">&quot;var&quot;</span>,          <span class="string">&quot;void&quot;</span>,     <span class="string">&quot;while&quot;</span>,    <span class="string">&quot;with&quot;</span>,</span><br><span class="line">    <span class="string">&quot;false&quot;</span>,    <span class="string">&quot;true&quot;</span>,         <span class="string">&quot;null&quot;</span>,     <span class="string">&quot;undefined&quot;</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Javascript保留字列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;abstract&quot;</span>,     <span class="string">&quot;boolean&quot;</span>,      <span class="string">&quot;byte&quot;</span>,     <span class="string">&quot;char&quot;</span>,         <span class="string">&quot;class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;debugger&quot;</span>,     <span class="string">&quot;double&quot;</span>,       <span class="string">&quot;enum&quot;</span>,     <span class="string">&quot;export&quot;</span>,       <span class="string">&quot;extends&quot;</span>,</span><br><span class="line">        <span class="string">&quot;final&quot;</span>,        <span class="string">&quot;float&quot;</span>,        <span class="string">&quot;goto&quot;</span>,     <span class="string">&quot;implements&quot;</span>,   <span class="string">&quot;import&quot;</span>,</span><br><span class="line">        <span class="string">&quot;int&quot;</span>,          <span class="string">&quot;interface&quot;</span>,    <span class="string">&quot;long&quot;</span>,     <span class="string">&quot;native&quot;</span>,       <span class="string">&quot;package&quot;</span>,</span><br><span class="line">        <span class="string">&quot;private&quot;</span>,      <span class="string">&quot;protected&quot;</span>,    <span class="string">&quot;public&quot;</span>,   <span class="string">&quot;short&quot;</span>,        <span class="string">&quot;static&quot;</span>,</span><br><span class="line">        <span class="string">&quot;super&quot;</span>,        <span class="string">&quot;synchronized&quot;</span>, <span class="string">&quot;throws&quot;</span>,   <span class="string">&quot;transient&quot;</span>,    <span class="string">&quot;volatile&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3、正则的修饰符只能是-i、g、m-组合"><a href="#3、正则的修饰符只能是-i、g、m-组合" class="headerlink" title="3、正则的修饰符只能是[i、g、m]组合"></a>3、正则的修饰符只能是[i、g、m]组合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面的这个正则表达式修饰符不合法，只能有igm组成，或者无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/</span>abcdigm;  <span class="comment">//修饰符“abcdigm”不合法</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//应该改为：</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/igm</span>;</span><br></pre></td></tr></table></figure><h3 id="4、数组字面量和json（object字面量）的最后一个item后，不能有多余的逗号“-”"><a href="#4、数组字面量和json（object字面量）的最后一个item后，不能有多余的逗号“-”" class="headerlink" title="4、数组字面量和json（object字面量）的最后一个item后，不能有多余的逗号“,”"></a>4、数组字面量和json（object字面量）的最后一个item后，不能有多余的逗号“,”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面这个数组定义是不合法的，</span></span><br><span class="line"><span class="comment"> * 数组最后一项“3”后多了一个逗号“,”</span></span><br><span class="line"><span class="comment"> * 在IE下会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,];     <span class="comment">//数组最后一项“3”后多了一个逗号“,”</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//应该改为：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面这个json定义是不合法的，</span></span><br><span class="line"><span class="comment"> * json字面量的最后一个key，不能有多余的逗号“,”</span></span><br><span class="line"><span class="comment"> * 在IE下会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="string">&quot;b&quot;</span>,    <span class="comment">//这是json字面量的最后一个key，不能有多余的逗号“,”</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//应该改为：</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span> : <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="attr">b</span> : <span class="string">&quot;b&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5、json字面量的key不能是javascript关键字或保留字"><a href="#5、json字面量的key不能是javascript关键字或保留字" class="headerlink" title="5、json字面量的key不能是javascript关键字或保留字"></a>5、json字面量的key不能是javascript关键字或保留字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面的json定义是不合法的，因为采用了javascript关键字作为key</span></span><br><span class="line"><span class="comment"> * 这在IE下会报错，YUI压缩时也会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">var</span> : <span class="number">1</span>     <span class="comment">//这在IE下会报错</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//改成如下格式可以被正确解析，但依然不推荐这样做</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;var&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//因为在IE下，如果通过如下方式获取该值，依然会报错</span></span><br><span class="line"><span class="keyword">var</span> value = obj.var;    <span class="comment">//error!</span></span><br><span class="line"><span class="comment">//改为下面形式可以正确解析</span></span><br><span class="line"><span class="keyword">var</span> value = obj[<span class="string">&quot;var&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="6、从json（object字面量）中获取value时，如果key为关键字或保留字，禁止用“obj-key”的方式"><a href="#6、从json（object字面量）中获取value时，如果key为关键字或保留字，禁止用“obj-key”的方式" class="headerlink" title="6、从json（object字面量）中获取value时，如果key为关键字或保留字，禁止用“obj.key”的方式"></a>6、从json（object字面量）中获取value时，如果key为关键字或保留字，禁止用“obj.key”的方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果有json对象为：obj = &#123;float:1&#125;，</span></span><br><span class="line"><span class="comment"> * 在代码中要获取obj对象的float字段内容，不能通过obj.float的方式获取，</span></span><br><span class="line"><span class="comment"> * 这在YUI压缩的时候会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">float</span> : <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> value = obj.float;  <span class="comment">//这在YUI压缩时直接报错</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果真有这样的case，应该改成这样：</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&quot;float&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> value = obj[<span class="string">&quot;float&quot;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//PS:虽然上面的方式可以正确的通过编译，在各种浏览器中叶能正确的解析，但是依然不推荐使用！</span></span><br><span class="line"><span class="comment">//json参考文档：http://www.json.org/</span></span><br></pre></td></tr></table></figure><h3 id="7、禁止在代码中出现仅IE支持的注释"><a href="#7、禁止在代码中出现仅IE支持的注释" class="headerlink" title="7、禁止在代码中出现仅IE支持的注释"></a>7、禁止在代码中出现仅IE支持的注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 仅IE支持的javascript条件注释，是以&quot;/ * @&quot;开始，以&quot;@ * /&quot;结束的，</span></span><br><span class="line"><span class="comment"> * 比如下面的注释，在代码中严格禁止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*@cc_on alert(4 - @*/</span> <span class="number">3</span> <span class="comment">/*@)@*/</span></span><br><span class="line"><span class="comment">//上面的这段注释，在IE浏览器中，将会被解释为：alert(4 - 3)，最终alert(1)</span></span><br><span class="line"><span class="comment">//而在其他浏览器中，会得到：3</span></span><br></pre></td></tr></table></figure><h3 id="8、function的定义方式"><a href="#8、function的定义方式" class="headerlink" title="8、function的定义方式"></a>8、function的定义方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只允许出现如下三种形式的function的定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;;                          <span class="comment">//注意，这里必须加分号“;”具体原因请看第13条关于分号“;”的解释</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//方式三：（同二）</span></span><br><span class="line">ClassA.xxx = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面这样的定义方式是禁止的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//上面这样的定义，仅IE中会认为funcName和funcName2都存在，</span></span><br><span class="line"><span class="comment">//FireFox、Chrome中仅你能解释funcName，而funcName2不存在</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  在IE里，var foo = function foo2()&#123;&#125;</span></span><br><span class="line"><span class="comment"> *  foo2能被外部访问是IE的bug，且foo !== foo2，在IE6/7/8/9中的确不建议这么使用它。</span></span><br><span class="line"><span class="comment"> *  但是ES5中取消了arguments.callee，当使用use strict模式，这就意味着任何需要使用递归的地方都需要这么定义才能保证函数的安全性</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="9、禁止在行尾用“-”来拼接字符串"><a href="#9、禁止在行尾用“-”来拼接字符串" class="headerlink" title="9、禁止在行尾用“\”来拼接字符串"></a>9、禁止在行尾用“\”来拼接字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在行尾通过“\”的方式拼接字符串，在YUI压缩的时候，</span></span><br><span class="line"><span class="comment"> * 下一行开头的一片空白会被解析为正常的字符，而造成无法被压缩的现象！</span></span><br><span class="line"><span class="comment"> * 另外，下一行的空白字符在非IE浏览器中，会被当成TextNode而占位解析！</span></span><br><span class="line"><span class="comment"> * 影响页面布局</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;\</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;body&quot;&gt;&lt;/div&gt;\</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\</span></span><br><span class="line"><span class="string">          &lt;/div&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//一种比上面稍微好点儿的办法，是多个字符串“+”连接</span></span><br><span class="line"><span class="comment">//但是这种方法会创建多个字符串常量，每次执行“+”操作都会创建新的常量</span></span><br><span class="line"><span class="comment">//从而影响性能</span></span><br><span class="line"><span class="comment">//uglifyjs会将多个字符串常量的加法优化成一个字符串常量</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;div class=&quot;body&quot;&gt;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//最好的大字符串拼接方法，是通过数组join方式</span></span><br><span class="line"><span class="keyword">var</span> str = [</span><br><span class="line">    <span class="string">&#x27;&lt;div&gt;&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;&lt;div class=&quot;body&quot;&gt;&lt;/div&gt;&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;&lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;&#x27;</span> ,</span><br><span class="line">    <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">].join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 关于字符串拼接，High performance Javascript 第五章已经对join和+情况作了对比说明。</span></span><br><span class="line"><span class="comment"> * join只在ie7或以下会更快，所以这个优化也许应该根据浏览器使用统计来定吧</span></span><br><span class="line"><span class="comment"> * 另可参见http://jsperf.com/string-concatenation-plus-vs-join</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="10、禁止在代码中使用标签（label）"><a href="#10、禁止在代码中使用标签（label）" class="headerlink" title="10、禁止在代码中使用标签（label）"></a>10、禁止在代码中使用标签（label）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标签一般配合goto，break，continue进行使用！</span></span><br><span class="line"><span class="comment"> * 但是使用标签，会让程序的逻辑变得混乱，所以程序中极端不推荐！</span></span><br><span class="line"><span class="comment"> * 比如下面的这段代码：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">label_1</span> : <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;         <span class="comment">//这里声明了label_1标签</span></span><br><span class="line">    <span class="comment">//TODO...</span></span><br><span class="line">    <span class="attr">label_2</span> : <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)&#123;     <span class="comment">//这里声明了lable_2标签</span></span><br><span class="line">        <span class="keyword">if</span>(i * j &gt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> label_2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i * j &gt; <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> label_1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(i * j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、代码中避免使用void、eval、with"><a href="#11、代码中避免使用void、eval、with" class="headerlink" title="11、代码中避免使用void、eval、with"></a>11、代码中避免使用void、eval、with</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * void表示某个方法或表达式无返回值！</span></span><br><span class="line"><span class="comment"> * 虽然javascript引擎能正常解析，但是完全不推荐这样使用！</span></span><br><span class="line"><span class="comment"> * 比如下面的这几个例子：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这里表示方法无返回值</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO...</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这里表示表达式无返回值</span></span><br><span class="line"><span class="keyword">var</span> returnValue = <span class="keyword">void</span> ( <span class="number">2</span> &gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">void</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//还有别的使用场景，不再穷举！不推荐使用！</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eval方法，是把一个字符串当作一个js表达式一样去执行它。</span></span><br><span class="line"><span class="comment"> * 在IE中，可以通过下面的方式获取一个DOM节点。</span></span><br><span class="line"><span class="comment"> * 但程序中不推荐使用eval</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dom = <span class="built_in">eval</span>(<span class="string">&quot;DomId&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * with语句:为一个或一组语句指定默认对象，通常用来缩短特定情形下必须写的代码量。</span></span><br><span class="line"><span class="comment"> * 程序中不推荐使用with块</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="12、禁止在return、continue、break、throw语句后写无法被执行到的代码"><a href="#12、禁止在return、continue、break、throw语句后写无法被执行到的代码" class="headerlink" title="12、禁止在return、continue、break、throw语句后写无法被执行到的代码"></a>12、禁止在return、continue、break、throw语句后写无法被执行到的代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * return、continue、break、throw这些语句都会作为一个程序块的最后一句代码来执行。</span></span><br><span class="line"><span class="comment"> * 比如，下面这样的代码都是禁止出现的！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        alert(i);           <span class="comment">//这句代码永远都不可能被执行到！</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">3</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        alert(i);           <span class="comment">//这句代码永远都不可能被执行到！</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i % <span class="number">5</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">        alert(i);           <span class="comment">//这句代码永远都不可能被执行到！</span></span><br><span class="line">    &#125;</span><br><span class="line">    alert(i * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13、正确断句，正确使用分号"><a href="#13、正确断句，正确使用分号" class="headerlink" title="13、正确断句，正确使用分号"></a>13、正确断句，正确使用分号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javascript引擎会自动的在语句结束的地方插入分号，然而，ECMAScript中也明确的解释到：</span></span><br><span class="line"><span class="comment"> * 空语句，变量语句，表达式语句，do-while 语句，continue 语句，</span></span><br><span class="line"><span class="comment"> * break 语句，return 语句，以及 throw 语句，这些确定的ECMAScript语句必须以分号结束。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 看下面的例子，return后自动被插入分号造成的问题：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>,j = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span>              <span class="comment">//这个地方会被自动插入分号</span></span><br><span class="line">    (</span><br><span class="line">        i + j</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line">alert(funcName());      <span class="comment">//结果为“undefined”</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//修改的办法可以是这样：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>,j = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        i + j</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过var定义function，function必须以“&#125;;”结束，否则，如果在function的定义之后紧跟着一个闭包，</span></span><br><span class="line"><span class="comment"> * 就会出现很严重的后果。</span></span><br><span class="line"><span class="comment"> * 比如下面的例子：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;                           <span class="comment">//这里是不可能被自动插入分号的</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                <span class="comment">//当上面的function结束标准&quot;&#125;&quot;遇到了这里的&quot;(&quot;，就会视为要执行这个function</span></span><br><span class="line">        <span class="comment">//TODO 1</span></span><br><span class="line">    &#125;)()</span><br><span class="line"><span class="comment">//上面的例子最终会被等价的解释为：</span></span><br><span class="line"><span class="keyword">var</span> funcName = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO 1</span></span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//TODO 2</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//这样，程序加载就会出现异常情况！！！</span></span><br></pre></td></tr></table></figure><h3 id="14、关于闭包"><a href="#14、关于闭包" class="headerlink" title="14、关于闭包"></a>14、关于闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用闭包时：</span></span><br><span class="line"><span class="comment"> * 1、要注意局部变量的释放，避免循环引用造成内存泄露！</span></span><br><span class="line"><span class="comment"> * 2、闭包后，注意分号的使用！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//下面的这段闭包的代码，就是由于没有添加适当的分号，而造成严重后果！</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">&#125;)()                    <span class="comment">//同第13条，这里也不会自动插入分号</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b;</span><br><span class="line">    &#125;)()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//应该改成这样：</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a;</span><br><span class="line">    &#125;)();                   <span class="comment">//增加分号</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="15、绕开浏览器差异，正确使用多行注释"><a href="#15、绕开浏览器差异，正确使用多行注释" class="headerlink" title="15、绕开浏览器差异，正确使用多行注释"></a>15、绕开浏览器差异，正确使用多行注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面是一段非常正常的代码，在所有的浏览器中，result的结果均为：1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> result = (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt; <span class="number">1</span>) ?</span><br><span class="line">        <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;)(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 但是项目维护的过程中，不能像下面这样做，</span></span><br><span class="line"><span class="comment"> * 否则各个浏览器处理兼容性不一致，会得到不一样的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> result = (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/*(x &gt; 1) ? </span></span><br><span class="line"><span class="comment">     1 : 0*/</span> x;</span><br><span class="line">&#125;)(<span class="number">2</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WEB标准规定，对于多行注释中存在行终结符的情况，都是一致的，</span></span><br><span class="line"><span class="comment"> * 要求这个多行注释不是简单的被忽略，而是要被替换为一个行终结符插入到流中。</span></span><br><span class="line"><span class="comment"> * 所以上面的代码在遵守规范的浏览器中，最终将被解释为：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> result = (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ; x;</span><br><span class="line">&#125;)(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="16、this指针的使用"><a href="#16、this指针的使用" class="headerlink" title="16、this指针的使用"></a>16、this指针的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果存在标签：&lt;input type=&quot;button&quot; value=&quot;Hello zxlie!&quot; id=&quot;MyButton&quot; &gt;</span></span><br><span class="line"><span class="comment"> * 试图通过下面的方式，给MyButton添加click事件，是不正确的！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> EventHandler = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.info = <span class="string">&quot;This is from event handler!&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.clickHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.info );</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">clickHandler</span> : clickHandler</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;MyButton&quot;</span>).onclick =  EventHandler.clickHandler;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会发现，每次点击这个按钮，得到的都是：undefined</span></span><br><span class="line"><span class="comment"> * 问题的根源，就是错误的使用了this指针，this指针具体指到什么对象，取决于调用者：caller</span></span><br><span class="line"><span class="comment"> * 应该像下面这样修改：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> EventHandler = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">    self.info = <span class="string">&quot;This is from event handler!&quot;</span>;</span><br><span class="line">    self.clickHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(self.info );    <span class="comment">//主要是这里的self，不能用this</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">clickHandler</span> : clickHandler</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;MyButton&quot;</span>).onclick =  EventHandler.clickHandler;</span><br></pre></td></tr></table></figure><h3 id="17、switch块中只可以包含多个case分支，但是最后只能有一个default分支"><a href="#17、switch块中只可以包含多个case分支，但是最后只能有一个default分支" class="headerlink" title="17、switch块中只可以包含多个case分支，但是最后只能有一个default分支"></a>17、switch块中只可以包含多个case分支，但是最后只能有一个default分支</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在switch块中可以不定义default分支。</span></span><br><span class="line"><span class="comment"> * 但如果定义了多个default分支，YUI压缩的过程中，就会报错！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">switch</span>(value) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    <span class="keyword">default</span> : </span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18、提测以及上线之前去掉代码中的console、debugger等调试语句"><a href="#18、提测以及上线之前去掉代码中的console、debugger等调试语句" class="headerlink" title="18、提测以及上线之前去掉代码中的console、debugger等调试语句 **"></a>18、提测以及上线之前去掉代码中的console、debugger等调试语句 **</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * console对象主要用来在开发过程中进行程序调试，</span></span><br><span class="line"><span class="comment"> * 该语句在IE7及其以下版本无法被识别。</span></span><br><span class="line"><span class="comment"> * 所以提测和上线之前务必去掉这样的语句</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> 编码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM节点操作</title>
      <link href="/2016/03/javascript-dom-operating/"/>
      <url>/2016/03/javascript-dom-operating/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-DOM节点操作"><a href="#JavaScript-DOM节点操作" class="headerlink" title="JavaScript DOM节点操作"></a>JavaScript DOM节点操作</h1><blockquote><p>javascript的操作dom的语法。</p></blockquote><h4 id="一些常用的-HTML-DOM-方法："><a href="#一些常用的-HTML-DOM-方法：" class="headerlink" title="一些常用的 HTML DOM 方法："></a>一些常用的 HTML DOM 方法：</h4><ul><li>getElementById(id) - 获取带有指定 id 的节点（元素） </li><li>appendChild(node) - 插入新的子节点（元素） </li><li>removeChild(node) - 删除子节点（元素）</li></ul><h4 id="一些常用的-HTML-DOM-属性："><a href="#一些常用的-HTML-DOM-属性：" class="headerlink" title="一些常用的 HTML DOM 属性："></a>一些常用的 HTML DOM 属性：</h4><ul><li>innerHTML - 节点（元素）的文本值</li><li>parentNode - 节点（元素）的父节点</li><li>childNodes - 节点（元素）的子节点</li><li>attributes - 节点（元素）的属性节点</li></ul><h5 id=""><a href="#" class="headerlink" title=""></a><span name="table"/></h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getElementById()</td><td>返回带有指定 ID 的元素。</td></tr><tr><td>getElementsByTagName()</td><td>返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。</td></tr><tr><td>getElementsByClassName()</td><td>返回包含带有指定类名的所有元素的节点列表。</td></tr><tr><td>appendChild()</td><td>把新的子节点添加到指定节点。</td></tr><tr><td>removeChild()</td><td>删除子节点。</td></tr><tr><td>replaceChild()</td><td>替换子节点。</td></tr><tr><td>insertBefore()</td><td>在指定的子节点前面插入新的子节点。</td></tr><tr><td>createAttribute()</td><td>创建属性节点。</td></tr><tr><td>createElement()</td><td>创建元素节点。</td></tr><tr><td>createTextNode()</td><td>创建文本节点。</td></tr><tr><td>getAttribute()</td><td>返回指定的属性值。</td></tr><tr><td>setAttribute()</td><td>把指定属性设置或修改为指定的值。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
